var search_data = {"index":{"longSearchIndex":["lib/new_relic/agent/instrumentation/rails3/errors.rb","actioncontroller","lib/newrelic_rpm.rb","newrelic","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent::instrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation::rails3","newrelic::agent::instrumentation::rails3","newrelic::agent::instrumentation","newrelic::agent","newrelic::agent","newrelic::agent::methodtracer","newrelic::agent::methodtracer","newrelic::agent","newrelic::agent","newrelic::agent::sampler","newrelic::agent","newrelic::agent::samplers","newrelic::agent::samplers","newrelic::agent::samplers","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent::statsengine","newrelic::agent::statsengine","newrelic::agent::statsengine","newrelic::agent::statsengine","newrelic::agent","newrelic::agent","newrelic::agent","newrelic","newrelic","newrelic","newrelic","newrelic","newrelic::command","newrelic::command","newrelic::command","newrelic","newrelic::control","newrelic::control","newrelic::control","newrelic::control","newrelic::control","newrelic::control","newrelic","newrelic","newrelic::histogram","newrelic::histogram","newrelic","newrelic","newrelic","newrelic","newrelic","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser","newrelic","newrelic","newrelic","newrelic","newrelic::rack","newrelic::rack","newrelic::rack","newrelic","newrelic","newrelic","newrelic","newrelic::transactionanalysis","newrelic","newrelic::transactionsample","newrelic::transactionsample","newrelic::transactionsample","newrelic::transactionsample","newrelic::transactionsample","newrelic","lib/new_relic_api.rb","newrelicapi","newrelicapi::account","newrelicapi::account","newrelicapi","newrelicapi::application","newrelicapi","newrelicapi","newrelicapi","newrelicapi","lib/new_relic/agent/instrumentation/data_mapper.rb","newrelic::transactionanalysis::segmentsummary","newrelic::metricspec","newrelic::versionnumber","newrelic::metricspec","newrelic::control","newrelic::transactionsample::segment","newrelic::control","newrelic::transactionsample::segment","newrelic::agent","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::stats","newrelic::metricparser::controller","newrelic::metricparser::controllercpu","newrelic::metricparser::view","newrelic::transactionsample::segment","newrelic::agent","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::statsengine::samplers","newrelic::agent","newrelic::control","newrelic::agent::methodtracer::classmethods","newrelic::agent","newrelic::agent::statsengine::samplers","newrelic::transactionsample::summarysegment","newrelic::agent::instrumentation::controllerinstrumentation::classmethods","newrelic::agent","newrelic::agent::agent","newrelic::agent::shimagent","newrelic::control","newrelic::metricparser::client","newrelic::metricparser::external","newrelic::metricparser::memcache","newrelic::transactionsample","newrelic::metricparser","newrelic::stats","newrelic::control","newrelic::control","newrelic::control","newrelic::control","newrelic::control","newrelic::control","newrelic::control::rails","newrelic::control::rails3","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelicapi::account","newrelic::stats","newrelic::stats","newrelicapi","newrelic::stats","newrelic::stats","newrelic::transactionanalysis::segmentsummary","newrelic::stats","newrelic::transactionanalysis::segmentsummary","newrelic::stats","newrelic::metricparser","newrelic::metricparser::controllercpu","newrelic::statsbase","newrelic::statsbase","newrelic::transactionanalysis","newrelic::agent::busycalculator","newrelic::agent::instrumentation::rack","newrelic::agent::instrumentation::rack","newrelic::chainedcall","newrelic::rack::episodes","newrelic::rack::metricapp","newrelic::rack::status","newrelic::metricparser","newrelic::metricparser::controller","newrelic::metricparser::controllercpu","newrelic::agent::instrumentation::rack","newrelic::agent::instrumentation::rack","newrelic::agent::instrumentation::rack","newrelic::transactionsample::segment","newrelic::transactionsample::segment","newrelic::stats","newrelic::agent::samplers::memorysampler::base","newrelic::control","newrelic::agent::instrumentation::metricframe","newrelic::metricparser","newrelic::agent::statsengine::metricstats","newrelic::transactionsample","newrelicapi::thresholdvalue","newrelic::command::deployments","newrelic::command::install","newrelic::control","newrelic::control::ruby","newrelic::command::install","newrelic::metricparser::controller","newrelic::metricparser::controllercpu","newrelic::metricparser::view","newrelic::control","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::metricparser::controller","newrelic::transactionsample","newrelic::agent::instrumentation::metricframe","newrelic::agent::transactionsampler","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::transactionanalysis","newrelic::localenvironment","newrelic::transactionsample::compositesegment","newrelic::control","newrelic::metricparser","newrelic::metricparser::activerecord","newrelic::metricparser::client","newrelic::metricparser::controller","newrelic::metricparser::controllercpu","newrelic::metricparser::external","newrelic::metricparser::memcache","newrelic::metricparser::memcache","newrelic::metricparser::othertransaction","newrelic::metricparser::view","newrelic::transactionanalysis::segmentsummary","newrelic::agent::transactionsampler","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::control","newrelic::agent::busycalculator","newrelic::control","newrelic::localenvironment","newrelic::agent::busycalculator","newrelic::control::rails","newrelic::metricparser::othertransaction","newrelic::stats","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::statsbase","newrelic::statsbase","newrelic::transactionsample::segment","newrelic::agent::agent","newrelic::agent::statsengine::transactions","newrelic::control::merb","newrelic::control::rails","newrelic::control::rails3","newrelic::control::ruby","newrelic::control::sinatra","newrelic::control","newrelic::metricdata","newrelic::metricspec","newrelic::versionnumber","newrelic::command","newrelic::transactionsample::segment","newrelic::stats","newrelic::transactionanalysis::segmentsummary","newrelic::transactionsample::segment","newrelic::control","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::agent::transactionsamplebuilder","newrelic::metricparser","newrelic::stats","newrelic::control","newrelic::agent::transactionsamplebuilder","newrelic::statsbase","newrelic::transactionsample::segment","newrelic::metricparser::activemerchant","newrelic::localenvironment","newrelic::stats","newrelic::transactionsample","newrelic::agent::statsengine::metricstats","newrelic::agent::samplers::memorysampler::javaheapsampler","newrelic::agent::samplers::memorysampler::procstatus","newrelic::agent::samplers::memorysampler::shellps","newrelic::agent::samplers::memorysampler::base","newrelic::agent","newrelic::agent::statsengine::metricstats","newrelic::agent","newrelic::agent::statsengine::metricstats","newrelic::transactionsample::segment","newrelic::agent::transactionsampler","newrelic::agent::busycalculator","newrelic::agent::errorcollector","newrelic::agent::statsengine::metricstats","newrelic::metricdata","newrelic::metricspec","newrelic::versionnumber","newrelic::metricparser::external","newrelic::metricparser::external","newrelic::control","newrelic::agent::errorcollector","newrelic::agent","newrelic::agent::errorcollector","newrelic::agent::transactionsamplebuilder","newrelic::agent::transactionsampler","newrelic::agent::transactionsamplebuilder","newrelic::agent::instrumentation::activerecordinstrumentation","newrelic::methodtracestats","newrelic::command","newrelic::agent::sampler","newrelic::command","newrelic::control::external","newrelic::control::merb","newrelic::control::rails","newrelic::control::rails3","newrelic::control::ruby","newrelic::control::sinatra","newrelic::control","object","newrelic::control::rails","newrelic::control::rails","newrelic::control::rails","newrelic::control","newrelic::control","newrelic::control::rails","newrelic::control::rails3","newrelic::agent::agent","newrelic::agent::shimagent","newrelic::control","object","newrelic::metricparser::actionmailer","newrelic::metricparser::activemerchant","newrelic::metricparser::activemerchant","newrelic::metricparser::activemerchant","newrelic::metricparser::activerecord","newrelic::metricparser::view","newrelic::metricparser::controller","newrelic::metricparser::controllercpu","newrelic::metricparser::errors","newrelic::agent","newrelic::metricparser::memcache","newrelic::metricparser::view","newrelic::stats","newrelic::metricparser::view","newrelic::metricparser::webservice","newrelic::agent::workerloop","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser::activerecord","newrelic::metricparser::client","newrelic::metricparser::external","newrelic::metricparser::memcache","newrelic::metricparser::webfrontend","newrelic::metricparser::external","newrelic::control","newrelic::control","newrelic::control","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::workerloop","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::agent","newrelic::agent::statsengine","newrelic::agent::workerloop","newrelic::control","newrelic::control","newrelic::control","newrelic::control::rails","newrelic::control::rails3","object","newrelic::agent::instrumentation::activerecordinstrumentation","object","newrelic::agent","newrelic::control::rails3","newrelic::agent::statsengine::metricstats","newrelic::agent::statsengine::metricstats","newrelic::versionnumber","newrelic::agent","newrelic::agent::agent","newrelic::histogram::bucket","newrelic::metricparser::client","object","newrelic::stats","newrelic::stats","newrelic::control","newrelic::control","newrelic::metricparser","newrelic::agent::instrumentation::metricframe","newrelic::metricdata","newrelic::metricdata","newrelic::agent::statsengine::metricstats","newrelic::histogram::bucket","newrelic::versionnumber","newrelic::metricparser::activerecord","newrelic::localenvironment","newrelic::control","newrelic::control","newrelic::stats","newrelic::agent::agent","newrelic::agent::errorcollector","newrelic::agent::instrumentation::metricframe","newrelic::agent::sampler","newrelic::agent::samplers::cpusampler","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::memorysampler::shellps","newrelic::agent::samplers::objectsampler","newrelic::agent::shimagent","newrelic::agent::statsengine","newrelic::agent::statsengine::scopestackelement","newrelic::agent::transactionsamplebuilder","newrelic::agent::transactionsampler","newrelic::agent::workerloop","newrelic::chainedcall","newrelic::command","newrelic::command::commandfailure","newrelic::command::deployments","newrelic::command::install","newrelic::control","newrelic::histogram","newrelic::histogram::bucket","newrelic::localenvironment","newrelic::metricdata","newrelic::metricparser","newrelic::metricspec","newrelic::noticederror","newrelic::rack::episodes","newrelic::rack::metricapp","newrelic::scopedmethodtracestats","newrelic::statsbase","newrelic::transactionanalysis::segmentsummary","newrelic::transactionsample","newrelic::transactionsample::compositesegment","newrelic::transactionsample::idgenerator","newrelic::transactionsample::segment","newrelic::transactionsample::summarysegment","newrelic::versionnumber","newrelic::control","newrelic::agent::instrumentation::controllerinstrumentation::classmethods","newrelic::agent::instrumentation::controllerinstrumentation::classmethods","newrelic::agent::instrumentation::rails3::actioncontroller","object","object","newrelic::agent::instrumentation::rails3::errors","object","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::agent::instrumentation::rack","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::control","newrelic::control","newrelic::transactionsample::idgenerator","newrelic::collectionhelper","newrelic::agent","newrelic::agent::errorcollector","newrelic::agent::instrumentation::metricframe","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::transactionsample","newrelic::metricparser::client","newrelic::metricparser::external","newrelic::metricparser::memcache","newrelic::metricparser::activemerchant","newrelic::metricdata","newrelic::transactionsample::segment","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::transactionsample::segment","newrelic::metricparser","newrelic::agent::instrumentation::metricframe","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::agent::statsengine::transactions","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::metricparser","newrelic::metricparser::view","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::memorysampler","newrelic::agent::sampler","newrelic::agent::samplers::cpusampler","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::objectsampler","newrelic::agent::instrumentation::metricframe","newrelic::agent::statsengine::transactions","newrelic::agent::agent","newrelic::agent::shimagent","newrelic::control","newrelic::transactionsample","newrelic::agent::samplers::memorysampler::procstatus","newrelic::histogram","newrelic::histogram::bucket","newrelic::histogram::shim","newrelic::agent::instrumentation::rails3::actioncontroller","newrelic::control","newrelic::control","newrelic::control","newrelic::control","newrelic::agent::instrumentation::metricframe","newrelic::agent::statsengine::transactions","newrelic::agent::agent","newrelic::agent::shimagent","newrelic::control::rails","newrelic::control::rails","newrelic::agent::instrumentation::metricframe","newrelic::apdexstats","newrelic::apdexstats","newrelic::apdexstats","newrelic::methodtracestats","newrelic::methodtracestats","newrelic::scopedmethodtracestats","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::statsengine::transactions","newrelic::transactionanalysis","object","newrelic::stats","object","newrelic::agent::busycalculator","newrelic::stats","newrelic::agent::transactionsampler","newrelicapi","newrelic::agent","newrelic::agent::agent","newrelic::agent::statsengine::metricstats","newrelic::control::merb","newrelic::control::rails","newrelic::control::rails3","newrelic::control::ruby","newrelic::transactionsample","newrelic::stats","newrelic::agent::instrumentation::sinatra","newrelic::agent::workerloop","newrelic::command","newrelic::command::deployments","newrelic::command::install","newrelic::merbbootloader","newrelic::agent::workerloop","newrelic::agent::transactionsamplebuilder","newrelic::agent::transactionsamplebuilder","newrelic::agent::sampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsamplebuilder","newrelic::agent::transactionsampler","newrelic::agent::statsengine::transactions","newrelic::agent::statsengine::transactions","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser","newrelic::metricparser","newrelic::control","newrelic::control","newrelic::agent::transactionsamplebuilder","newrelic::agent::agent","newrelic::agent::agent","newrelic::agent","newrelic::agent::agent","newrelic::agent::transactionsamplebuilder","newrelic::agent::transactionsamplebuilder","newrelic::control","newrelic::control","newrelic::metricparser","newrelic::metricparser::actionmailer","newrelic::metricparser::activemerchant","newrelic::metricparser::controller","newrelic::metricparser::controllercpu","newrelic::metricparser::errors","newrelic::metricparser::memcache","newrelic::metricparser::view","newrelic::metricparser::webfrontend","newrelic::agent","newrelic::agent::agent","newrelic::agent::shimagent","newrelic::localenvironment","newrelic::stats","newrelic::transactionanalysis","newrelic::stats","newrelic::agent::agent","newrelic::agent::shimagent","newrelic::control","newrelic::agent::statsengine::samplers","newrelic::transactionsample","newrelic::agent::agent","newrelic::agent::instrumentation::metricframe","newrelic::agent::statsengine::transactions","newrelic::agent::agent","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::objectsampler","newrelic::histogram::bucket","newrelic::agent::statsengine::metricstats","newrelic::agent::workerloop","newrelic::collectionhelper","newrelic::metricspec","newrelic::stats","newrelic::stats","newrelic::agent::sampler","newrelic::agent::samplers::cpusampler","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::objectsampler","newrelic::control","newrelic::agent::samplers::cpusampler","newrelic::agent::samplers::cpusampler","newrelic::metricparser::othertransaction","newrelic::metricparser::view","newrelic::stats","newrelic::stats","newrelic::transactionsample","newrelic::versionnumber","newrelic::transactionsample::segment","newrelic::metricdata","newrelic::metricspec","newrelic::statsbase","newrelic::transactionsample::segment","newrelic::agent::samplers::memorysampler::javaheapsampler","newrelic::agent::samplers::memorysampler::procstatus","newrelic::agent::samplers::memorysampler::shellps","newrelic::control","newrelic::histogram::bucket","newrelic::localenvironment","newrelic::metricdata","newrelic::metricspec","newrelic::stats","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::versionnumber","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::control","newrelic::control::merb","newrelic::control::rails","newrelic::control::ruby","newrelic::metricparser","newrelic::metricparser::activerecord","newrelic::metricparser::client","newrelic::metricparser::external","newrelic::metricparser::memcache","newrelic::stats","newrelic::transactionanalysis::segmentsummary","newrelic::methodtracestats","newrelic::scopedmethodtracestats","newrelic::agent::transactionsamplebuilder","newrelic::agent::methodtracer::instancemethods","newrelic::agent::methodtracer::instancemethods","newrelic::agent::transactionsamplebuilder","newrelic::agent::methodtracer::instancemethods","newrelic::agent::statsengine::transactions","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::metricspec","newrelic::metricparser::controller","newrelic::localenvironment","newrelic::scopedmethodtracestats","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::metricparser","newrelic::metricparser::controller","newrelic::metricparser::controllercpu","newrelic::metricparser::view","newrelic::agent::sampler","newrelic::control","newrelic::control","newrelicapi::account::accountview","newrelic::agent::samplers::cpusampler","newrelic::agent::samplers::cpusampler","newrelic::control","newrelic::control","newrelic::control::rails3","newrelic::control","newrelic::control::rails3","newrelic::metricparser::webservice","newrelic::agent","newrelic::agent::instrumentation::metricframe","newrelic::agent::samplers::delayedjoblocksampler","files/license.html","files/readme_md.html","files/readme_md.html","files/lib/new_relic/agent_rb.html","files/lib/new_relic/agent/agent_rb.html","files/lib/new_relic/agent/busy_calculator_rb.html","files/lib/new_relic/agent/chained_call_rb.html","files/lib/new_relic/agent/error_collector_rb.html","files/lib/new_relic/agent/instrumentation/active_merchant_rb.html","files/lib/new_relic/agent/instrumentation/active_record_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/authlogic_rb.html","files/lib/new_relic/agent/instrumentation/controller_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/data_mapper_rb.html","files/lib/new_relic/agent/instrumentation/delayed_job_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/memcache_rb.html","files/lib/new_relic/agent/instrumentation/memcache_rb_~14635~.html","files/lib/new_relic/agent/instrumentation/merb/controller_rb.html","files/lib/new_relic/agent/instrumentation/merb/errors_rb.html","files/lib/new_relic/agent/instrumentation/metric_frame_rb.html","files/lib/new_relic/agent/instrumentation/net_rb.html","files/lib/new_relic/agent/instrumentation/passenger_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/rack_rb.html","files/lib/new_relic/agent/instrumentation/rails/action_controller_rb.html","files/lib/new_relic/agent/instrumentation/rails/action_web_service_rb.html","files/lib/new_relic/agent/instrumentation/rails/errors_rb.html","files/lib/new_relic/agent/instrumentation/rails3/action_controller_rb.html","files/lib/new_relic/agent/instrumentation/rails3/errors_rb.html","files/lib/new_relic/agent/instrumentation/sinatra_rb.html","files/lib/new_relic/agent/instrumentation/unicorn_instrumentation_rb.html","files/lib/new_relic/agent/method_tracer_rb.html","files/lib/new_relic/agent/sampler_rb.html","files/lib/new_relic/agent/samplers/cpu_sampler_rb.html","files/lib/new_relic/agent/samplers/delayed_job_lock_sampler_rb.html","files/lib/new_relic/agent/samplers/memory_sampler_rb.html","files/lib/new_relic/agent/samplers/object_sampler_rb.html","files/lib/new_relic/agent/shim_agent_rb.html","files/lib/new_relic/agent/stats_engine_rb.html","files/lib/new_relic/agent/stats_engine/metric_stats_rb.html","files/lib/new_relic/agent/stats_engine/samplers_rb.html","files/lib/new_relic/agent/stats_engine/transactions_rb.html","files/lib/new_relic/agent/transaction_sampler_rb.html","files/lib/new_relic/agent/worker_loop_rb.html","files/lib/new_relic/agent/x.html","files/lib/new_relic/collection_helper_rb.html","files/lib/new_relic/command_rb.html","files/lib/new_relic/commands/deployments_rb.html","files/lib/new_relic/commands/install_rb.html","files/lib/new_relic/control_rb.html","files/lib/new_relic/control/external_rb.html","files/lib/new_relic/control/merb_rb.html","files/lib/new_relic/control/rails_rb.html","files/lib/new_relic/control/rails3_rb.html","files/lib/new_relic/control/ruby_rb.html","files/lib/new_relic/control/sinatra_rb.html","files/lib/new_relic/delayed_job_injection_rb.html","files/lib/new_relic/histogram_rb.html","files/lib/new_relic/local_environment_rb.html","files/lib/new_relic/merbtasks_rb.html","files/lib/new_relic/metric_data_rb.html","files/lib/new_relic/metric_parser_rb.html","files/lib/new_relic/metric_parser/action_mailer_rb.html","files/lib/new_relic/metric_parser/active_merchant_rb.html","files/lib/new_relic/metric_parser/active_record_rb.html","files/lib/new_relic/metric_parser/client_rb.html","files/lib/new_relic/metric_parser/controller_rb.html","files/lib/new_relic/metric_parser/controller_cpu_rb.html","files/lib/new_relic/metric_parser/errors_rb.html","files/lib/new_relic/metric_parser/external_rb.html","files/lib/new_relic/metric_parser/mem_cache_rb.html","files/lib/new_relic/metric_parser/other_transaction_rb.html","files/lib/new_relic/metric_parser/view_rb.html","files/lib/new_relic/metric_parser/web_frontend_rb.html","files/lib/new_relic/metric_parser/web_service_rb.html","files/lib/new_relic/metric_spec_rb.html","files/lib/new_relic/metrics_rb.html","files/lib/new_relic/noticed_error_rb.html","files/lib/new_relic/rack/episodes_rb.html","files/lib/new_relic/rack/metric_app_rb.html","files/lib/new_relic/rack/mongrel_rpm_ru.html","files/lib/new_relic/rack/newrelic_yml.html","files/lib/new_relic/rack_app_rb.html","files/lib/new_relic/recipes_rb.html","files/lib/new_relic/stats_rb.html","files/lib/new_relic/transaction_analysis_rb.html","files/lib/new_relic/transaction_sample_rb.html","files/lib/new_relic/version_rb.html","files/lib/new_relic_api_rb.html","files/lib/newrelic_rpm_rb.html","files/lib/tasks/all_rb.html","files/lib/tasks/install_rake.html","files/lib/tasks/tests_rake.html"],"info":[["ActionController","lib/new_relic/agent/instrumentation/rails3/errors.rb","classes/ActionController.html"," < ","",1],["Base","ActionController","classes/ActionController/Base.html"," < Object","",1],["NewRelic","lib/new_relic/agent/busy_calculator.rb","classes/NewRelic.html"," < ","This module supports calculation of actual time spent processing requests over the course of one harvest",1],["Agent","NewRelic","classes/NewRelic/Agent.html"," < ","== Agent APIs This module contains the public API methods for the Agent. For adding custom instrumentation",1],["Agent","NewRelic::Agent","classes/NewRelic/Agent/Agent.html"," < Object","The Agent is a singleton that is instantiated when the plugin is activated. ",1],["BackgroundLoadingError","NewRelic::Agent","classes/NewRelic/Agent/BackgroundLoadingError.html"," < StandardError","",1],["BusyCalculator","NewRelic::Agent","classes/NewRelic/Agent/BusyCalculator.html"," < ","",1],["ErrorCollector","NewRelic::Agent","classes/NewRelic/Agent/ErrorCollector.html"," < Object","",1],["ForceDisconnectException","NewRelic::Agent","classes/NewRelic/Agent/ForceDisconnectException.html"," < StandardError","An exception that forces an agent to stop reporting until its mongrel is restarted. ",1],["ForceRestartException","NewRelic::Agent","classes/NewRelic/Agent/ForceRestartException.html"," < StandardError","An exception that forces an agent to restart. ",1],["Instrumentation","NewRelic::Agent","classes/NewRelic/Agent/Instrumentation.html"," < ","A struct holding the information required to measure a controller action.  This is put on the thread",1],["ActiveRecordInstrumentation","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/ActiveRecordInstrumentation.html"," < ","",1],["ControllerInstrumentation","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html"," < ","== NewRelic instrumentation for controller actions and tasks This instrumentation is applied to the action",1],["ClassMethods","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation/ClassMethods.html"," < ","",1],["DelayedJobInstrumentation","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/DelayedJobInstrumentation.html"," < ","",1],["MetricFrame","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/MetricFrame.html"," < Object","",1],["Rack","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/Rack.html"," < ","== Instrumentation for Rack New Relic will instrument a #call method as if it were a controller action,",1],["Rails3","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/Rails3.html"," < ","",1],["ActionController","NewRelic::Agent::Instrumentation::Rails3","classes/NewRelic/Agent/Instrumentation/Rails3/ActionController.html"," < ","",1],["Errors","NewRelic::Agent::Instrumentation::Rails3","classes/NewRelic/Agent/Instrumentation/Rails3/Errors.html"," < ","",1],["Sinatra","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/Sinatra.html"," < ","NewRelic instrumentation for Sinatra applications.  Sinatra actions will  appear in the UI similar to",1],["LicenseException","NewRelic::Agent","classes/NewRelic/Agent/LicenseException.html"," < StandardError","An exception that is thrown by the server if the agent license is invalid. ",1],["MethodTracer","NewRelic::Agent","classes/NewRelic/Agent/MethodTracer.html"," < ","This module contains class methods added to support installing custom metric tracers and executing for",1],["ClassMethods","NewRelic::Agent::MethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods.html"," < ","",1],["InstanceMethods","NewRelic::Agent::MethodTracer","classes/NewRelic/Agent/MethodTracer/InstanceMethods.html"," < ","",1],["PostTooBigException","NewRelic::Agent","classes/NewRelic/Agent/PostTooBigException.html"," < ServerConnectionException","Used for when a transaction trace or error report has too much data, so we reset the queue to clear the",1],["Sampler","NewRelic::Agent","classes/NewRelic/Agent/Sampler.html"," < Object","A Sampler is used to capture meaningful metrics in a background thread  periodically.  They will either",1],["Unsupported","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler/Unsupported.html"," < StandardError","Exception denotes a sampler is not available and it will not be registered. ",1],["Samplers","NewRelic::Agent","classes/NewRelic/Agent/Samplers.html"," < ","",1],["CpuSampler","NewRelic::Agent::Samplers","classes/NewRelic/Agent/Samplers/CpuSampler.html"," < NewRelic::Agent::Sampler","",1],["DelayedJobLockSampler","NewRelic::Agent::Samplers","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html"," < NewRelic::Agent::Sampler","",1],["MemorySampler","NewRelic::Agent::Samplers","classes/NewRelic/Agent/Samplers/MemorySampler.html"," < NewRelic::Agent::Sampler","",1],["Base","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler/Base.html"," < Object","",1],["JavaHeapSampler","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler/JavaHeapSampler.html"," < Base","",1],["ProcStatus","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler/ProcStatus.html"," < Base","ProcStatus A class that samples memory by reading the file /proc/$$/status, which is specific to linux",1],["ShellPS","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler/ShellPS.html"," < Base","",1],["ObjectSampler","NewRelic::Agent::Samplers","classes/NewRelic/Agent/Samplers/ObjectSampler.html"," < NewRelic::Agent::Sampler","",1],["ServerConnectionException","NewRelic::Agent","classes/NewRelic/Agent/ServerConnectionException.html"," < StandardError","Used to blow out of a periodic task without logging a an error, such as for routine failures. ",1],["ServerError","NewRelic::Agent","classes/NewRelic/Agent/ServerError.html"," < StandardError","Reserved for future use.  Meant to represent a problem on the server side. ",1],["ShimAgent","NewRelic::Agent","classes/NewRelic/Agent/ShimAgent.html"," < NewRelic::Agent::Agent","This agent is loaded by the plug when the plug-in is disabled It recreates just enough of the API to",1],["StatsEngine","NewRelic::Agent","classes/NewRelic/Agent/StatsEngine.html"," < Object","",1],["MetricStats","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine/MetricStats.html"," < ","",1],["Samplers","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine/Samplers.html"," < ","",1],["ScopeStackElement","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine/ScopeStackElement.html"," < Object","Defines methods that stub out the stats engine methods when the agent is disabled ",1],["Transactions","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine/Transactions.html"," < ","",1],["TransactionSampleBuilder","NewRelic::Agent","classes/NewRelic/Agent/TransactionSampleBuilder.html"," < Object","a builder is created with every sampled transaction, to dynamically generate the sampled data.  It is",1],["TransactionSampler","NewRelic::Agent","classes/NewRelic/Agent/TransactionSampler.html"," < Object","",1],["WorkerLoop","NewRelic::Agent","classes/NewRelic/Agent/WorkerLoop.html"," < Object","A worker loop executes a set of registered tasks on a single thread.   A task is a proc or block with",1],["ApdexStats","NewRelic","classes/NewRelic/ApdexStats.html"," < StatsBase","",1],["BasicStats","NewRelic","classes/NewRelic/BasicStats.html"," < StatsBase","",1],["ChainedCall","NewRelic","classes/NewRelic/ChainedCall.html"," < Object","This is used to allow obfuscators to be chained.   ",1],["CollectionHelper","NewRelic","classes/NewRelic/CollectionHelper.html"," < ","",1],["Command","NewRelic","classes/NewRelic/Command.html"," < Object","",1],["CommandFailure","NewRelic::Command","classes/NewRelic/Command/CommandFailure.html"," < StandardError","Capture a failure to execute the command. ",1],["Deployments","NewRelic::Command","classes/NewRelic/Command/Deployments.html"," < NewRelic::Command","",1],["Install","NewRelic::Command","classes/NewRelic/Command/Install.html"," < NewRelic::Command","",1],["Control","NewRelic","classes/NewRelic/Control.html"," < Object","The Control is a singleton responsible for the startup and initialization sequence.  The initializer",1],["External","NewRelic::Control","classes/NewRelic/Control/External.html"," < NewRelic::Control::Ruby","",1],["Merb","NewRelic::Control","classes/NewRelic/Control/Merb.html"," < NewRelic::Control","",1],["Rails","NewRelic::Control","classes/NewRelic/Control/Rails.html"," < NewRelic::Control","Control subclass instantiated when Rails is detected.  Contains Rails specific configuration, instrumentation,",1],["Rails3","NewRelic::Control","classes/NewRelic/Control/Rails3.html"," < NewRelic::Control","Control subclass instantiated when Rails is detected.  Contains Rails specific configuration, instrumentation,",1],["Ruby","NewRelic::Control","classes/NewRelic/Control/Ruby.html"," < NewRelic::Control","A control used when no framework is detected. Looks for a newrelic.yml file in several locations including",1],["Sinatra","NewRelic::Control","classes/NewRelic/Control/Sinatra.html"," < NewRelic::Control::Ruby","",1],["DelayedJobInjection","NewRelic","classes/NewRelic/DelayedJobInjection.html"," < ","",1],["Histogram","NewRelic","classes/NewRelic/Histogram.html"," < Object","Histogram is used for organizing response times into an 'Exponential Histogram'.  Feature based in part",1],["Bucket","NewRelic::Histogram","classes/NewRelic/Histogram/Bucket.html"," < Object","Stores statistics for response times falling in a particular range. A bucket has a min and max response",1],["Shim","NewRelic::Histogram","classes/NewRelic/Histogram/Shim.html"," < ","Used to stub out API methods when the agent is not enabled ",1],["LocalEnvironment","NewRelic","classes/NewRelic/LocalEnvironment.html"," < Object","An instance of LocalEnvironment is responsible for determining three things:  * Framework - :rails, :rails3,",1],["MerbBootLoader","NewRelic","classes/NewRelic/MerbBootLoader.html"," < Merb::BootLoader","",1],["MethodTraceStats","NewRelic","classes/NewRelic/MethodTraceStats.html"," < StatsBase","Statistics used to track the performance of traced methods ",1],["MetricData","NewRelic","classes/NewRelic/MetricData.html"," < Object","",1],["MetricParser","NewRelic","classes/NewRelic/MetricParser.html"," < Object","Metric parsing logic mixin.  Given a metric name (attribute called \"name\"), provide a set of accessors",1],["ActionMailer","NewRelic::MetricParser","classes/NewRelic/MetricParser/ActionMailer.html"," < NewRelic::MetricParser","",1],["ActiveMerchant","NewRelic::MetricParser","classes/NewRelic/MetricParser/ActiveMerchant.html"," < NewRelic::MetricParser","",1],["ActiveRecord","NewRelic::MetricParser","classes/NewRelic/MetricParser/ActiveRecord.html"," < NewRelic::MetricParser","",1],["Client","NewRelic::MetricParser","classes/NewRelic/MetricParser/Client.html"," < NewRelic::MetricParser","",1],["Controller","NewRelic::MetricParser","classes/NewRelic/MetricParser/Controller.html"," < NewRelic::MetricParser","",1],["ControllerCPU","NewRelic::MetricParser","classes/NewRelic/MetricParser/ControllerCPU.html"," < NewRelic::MetricParser","",1],["Errors","NewRelic::MetricParser","classes/NewRelic/MetricParser/Errors.html"," < NewRelic::MetricParser","",1],["External","NewRelic::MetricParser","classes/NewRelic/MetricParser/External.html"," < NewRelic::MetricParser","",1],["MemCache","NewRelic::MetricParser","classes/NewRelic/MetricParser/MemCache.html"," < NewRelic::MetricParser","",1],["OtherTransaction","NewRelic::MetricParser","classes/NewRelic/MetricParser/OtherTransaction.html"," < NewRelic::MetricParser","OtherTransaction metrics must have at least three segments: /OtherTransaction/<task>/* ",1],["View","NewRelic::MetricParser","classes/NewRelic/MetricParser/View.html"," < NewRelic::MetricParser","",1],["WebFrontend","NewRelic::MetricParser","classes/NewRelic/MetricParser/WebFrontend.html"," < NewRelic::MetricParser","The metric where the mongrel queue time is stored ",1],["WebService","NewRelic::MetricParser","classes/NewRelic/MetricParser/WebService.html"," < NewRelic::MetricParser","",1],["MetricSpec","NewRelic","classes/NewRelic/MetricSpec.html"," < Object","this struct uniquely defines a metric, optionally inside the call scope of another metric ",1],["Metrics","NewRelic","classes/NewRelic/Metrics.html"," < ","",1],["NoticedError","NewRelic","classes/NewRelic/NoticedError.html"," < Object","This class encapsulates an error that was noticed by RPM in a managed app. ",1],["Rack","NewRelic","classes/NewRelic/Rack.html"," < ","",1],["Episodes","NewRelic::Rack","classes/NewRelic/Rack/Episodes.html"," < Object","",1],["MetricApp","NewRelic::Rack","classes/NewRelic/Rack/MetricApp.html"," < Object","",1],["Status","NewRelic::Rack","classes/NewRelic/Rack/Status.html"," < Object","",1],["ScopedMethodTraceStats","NewRelic","classes/NewRelic/ScopedMethodTraceStats.html"," < MethodTraceStats","",1],["Stats","NewRelic","classes/NewRelic/Stats.html"," < ","",1],["StatsBase","NewRelic","classes/NewRelic/StatsBase.html"," < Object","",1],["TransactionAnalysis","NewRelic","classes/NewRelic/TransactionAnalysis.html"," < ","",1],["SegmentSummary","NewRelic::TransactionAnalysis","classes/NewRelic/TransactionAnalysis/SegmentSummary.html"," < Object","summarizes performance data for all calls to segments with the same metric_name ",1],["TransactionSample","NewRelic","classes/NewRelic/TransactionSample.html"," < Object","",1],["CompositeSegment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample/CompositeSegment.html"," < Segment","",1],["FakeSegment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample/FakeSegment.html"," < Segment","",1],["IDGenerator","NewRelic::TransactionSample","classes/NewRelic/TransactionSample/IDGenerator.html"," < Object","Generates segment ids for json transaction segments ",1],["Segment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample/Segment.html"," < Object","",1],["SummarySegment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample/SummarySegment.html"," < Segment","",1],["VersionNumber","NewRelic","classes/NewRelic/VersionNumber.html"," < Object","Helper class for managing version comparisons  ",1],["NewRelicApi","lib/new_relic_api.rb","classes/NewRelicApi.html"," < ","== REST API Helpers Ruby lib for working with the New Relic API's XML interface.  Requires Rails 2.0",1],["Account","NewRelicApi","classes/NewRelicApi/Account.html"," < BaseResource","An account contains your basic account information. Accounts have many +applications+:: the applications",1],["AccountUsage","NewRelicApi::Account","classes/NewRelicApi/Account/AccountUsage.html"," < BaseResource","",1],["AccountView","NewRelicApi::Account","classes/NewRelicApi/Account/AccountView.html"," < BaseResource","",1],["Application","NewRelicApi","classes/NewRelicApi/Application.html"," < BaseResource","An application has many: +agents+:: the agent instances associated with this app +threshold_values+::",1],["Agent","NewRelicApi::Application","classes/NewRelicApi/Application/Agent.html"," < BaseResource","",1],["Deployment","NewRelicApi","classes/NewRelicApi/Deployment.html"," < BaseResource","This model is used to mark production deployments in RPM Only create is supported. ==Examples # Creating",1],["Subscription","NewRelicApi","classes/NewRelicApi/Subscription.html"," < BaseResource","",1],["ThresholdValue","NewRelicApi","classes/NewRelicApi/ThresholdValue.html"," < BaseResource","A threshold value represents a single health indicator for an application such as CPU, memory or response",1],["User","NewRelicApi","classes/NewRelicApi/User.html"," < BaseResource","",1],["Object","lib/new_relic/agent/instrumentation/data_mapper.rb","classes/Object.html"," < Object","",1],["<<","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M001237","(segment)","",2],["<=>","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001214","(o)","",2],["<=>","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M001292","(other)","",2],["==","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001205","(o)","",2],["[]","NewRelic::Control","classes/NewRelic/Control.html#M001021","(key)","",2],["[]","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001306","(key)","",2],["[]=","NewRelic::Control","classes/NewRelic/Control.html#M001025","(key, value)","",2],["[]=","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001305","(key, value)","",2],["abort_transaction!","NewRelic::Agent","classes/NewRelic/Agent.html#M000954","()","Cancel the collection of the current transaction in progress, if any.  Only affects the transaction started",2],["abort_transaction!","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000764","()","Call this to ensure that the current transaction is not saved ",2],["abort_transaction!","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000761","()","Indicate that you don't want to keep the currently saved transaction information ",2],["absent?","NewRelic::Stats","classes/NewRelic/Stats.html#M001222","()","",2],["action_name","NewRelic::MetricParser::Controller","classes/NewRelic/MetricParser/Controller.html#M001133","()","",2],["action_name","NewRelic::MetricParser::ControllerCPU","classes/NewRelic/MetricParser/ControllerCPU.html#M001142","()","",2],["action_name","NewRelic::MetricParser::View","classes/NewRelic/MetricParser/View.html#M001176","()","",2],["add_called_segment","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001284","(s)","",2],["add_custom_parameters","NewRelic::Agent","classes/NewRelic/Agent.html#M000959","(params)","Add parameters to the current transaction trace on the call stack. ",2],["add_custom_parameters","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000772","(p)","Add context parameters to the metric frame.  This information will be passed in to errors and transaction",2],["add_custom_parameters","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000779","(p)","",2],["add_harvest_sampler","NewRelic::Agent::StatsEngine::Samplers","classes/NewRelic/Agent/StatsEngine/Samplers.html#M000874","(sampler)","Add a sampler to be invoked just before each harvest. ",2],["add_instrumentation","NewRelic::Agent","classes/NewRelic/Agent.html#M000949","(file_pattern)","Add instrumentation files to the agent.  The argument should be a glob matching ruby scripts which will",2],["add_instrumentation","NewRelic::Control","classes/NewRelic/Control.html#M001062","(pattern)","Add instrumentation.  Don't call this directly.  Use NewRelic::Agent#add_instrumentation. This will load",2],["add_method_tracer","NewRelic::Agent::MethodTracer::ClassMethods","classes/NewRelic/Agent/MethodTracer/ClassMethods.html#M000826","(method_name, metric_name_code=nil, options = {})","Add a method tracer to the specified method. === Common Options * <tt>:push_scope => false</tt> specifies",2],["add_request_parameters","NewRelic::Agent","classes/NewRelic/Agent.html#M000960","(params)","Alias for #add_custom_parameters",2],["add_sampler","NewRelic::Agent::StatsEngine::Samplers","classes/NewRelic/Agent/StatsEngine/Samplers.html#M000872","(sampler)","Add an instance of Sampler to be invoked about every 10 seconds on a background thread. ",2],["add_segments","NewRelic::TransactionSample::SummarySegment","classes/NewRelic/TransactionSample/SummarySegment.html#M001317","(segments)","",2],["add_transaction_tracer","NewRelic::Agent::Instrumentation::ControllerInstrumentation::ClassMethods","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation/ClassMethods.html#M000738","(method, options={})","Add transaction tracing to the given method.  This will treat the given method as a main entrypoint for",2],["after_fork","NewRelic::Agent","classes/NewRelic/Agent.html#M000945","(options={})","Register this method as a callback for processes that fork jobs.   Pass <tt>:force_reconnect => true</tt>",2],["after_fork","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000689","(options={})","This method should be called in a forked process after a fork. It assumes the parent process initialized",2],["after_fork","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000856","()","",2],["agent_enabled?","NewRelic::Control","classes/NewRelic/Control.html#M001043","()","True if dev mode or monitor mode are enabled, and we are running inside a valid dispatcher like mongrel",2],["all?","NewRelic::MetricParser::Client","classes/NewRelic/MetricParser/Client.html#M001126","()","",2],["all?","NewRelic::MetricParser::External","classes/NewRelic/MetricParser/External.html#M001150","()","",2],["all?","NewRelic::MetricParser::MemCache","classes/NewRelic/MetricParser/MemCache.html#M001161","()","",2],["analyze","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001352","()","",2],["apdex_metric_path","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001191","()","",2],["apdex_score","NewRelic::Stats","classes/NewRelic/Stats.html#M001261","()","",2],["apdex_t","NewRelic::Control","classes/NewRelic/Control.html#M001028","()","Agent config conveniences ",2],["api_server","NewRelic::Control","classes/NewRelic/Control.html#M001054","()","",2],["app","NewRelic::Control","classes/NewRelic/Control.html#M001044","()","",2],["app_names","NewRelic::Control","classes/NewRelic/Control.html#M001048","()","",2],["append_environment_info","NewRelic::Control","classes/NewRelic/Control.html#M001027","(name, value)","Add your own environment value to track for change detection. The name and value should be stable and",2],["append_environment_info","NewRelic::Control","classes/NewRelic/Control.html#M001066","()","Append framework specific environment information for uploading to the server for change detection. ",2],["append_environment_info","NewRelic::Control::Rails","classes/NewRelic/Control/Rails.html#M001003","()","Collect the Rails::Info into an associative array as well as the list of plugins ",2],["append_environment_info","NewRelic::Control::Rails3","classes/NewRelic/Control/Rails3.html#M000996","()","Collect the Rails::Info into an associative array as well as the list of plugins ",2],["append_environment_value","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001068","(name, value = nil)","Add the given key/value pair to the app environment  settings.  Must pass either a value or a block.",2],["append_gem_list","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001069","()","",2],["append_plugin_list","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001070","()","",2],["application_health","NewRelicApi::Account","classes/NewRelicApi/Account.html#M001346","(type = :first)","Returns an account including all of its applications and the threshold values for each application. ",2],["as_percentage","NewRelic::Stats","classes/NewRelic/Stats.html#M001236","()","the stat total_call_time is a percent ",2],["as_percentage_of","NewRelic::Stats","classes/NewRelic/Stats.html#M001235","(other_stats)","",2],["authenticate","NewRelicApi","classes/NewRelicApi.html#M001324","(email, password)","Sets up basic authentication credentials for all the resources.  This is not necessary if you are using",2],["average_call_time","NewRelic::Stats","classes/NewRelic/Stats.html#M001224","()","",2],["average_exclusive_time","NewRelic::Stats","classes/NewRelic/Stats.html#M001225","()","",2],["average_exclusive_time","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M001239","()","",2],["average_response_time","NewRelic::Stats","classes/NewRelic/Stats.html#M001251","()","Alias for #average_call_time",2],["average_time","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M001238","()","",2],["average_value","NewRelic::Stats","classes/NewRelic/Stats.html#M001250","()","Alias for #average_call_time",2],["base_metric_name","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001194","()","Return the name of another metric if the current metric is really add-on data for another metric. ",2],["base_metric_name","NewRelic::MetricParser::ControllerCPU","classes/NewRelic/MetricParser/ControllerCPU.html#M001144","()","",2],["begin_time","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M001269","()","",2],["begin_time=","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M001267","(t)","In this class, we explicitly don't track begin and end time here, to save space during cross process",2],["breakdown_data","NewRelic::TransactionAnalysis","classes/NewRelic/TransactionAnalysis.html#M001249","(limit = nil)","return the data that breaks down the performance of the transaction as an array of SegmentSummary objects.",2],["busy_count","NewRelic::Agent::BusyCalculator","classes/NewRelic/Agent/BusyCalculator.html#M000683","()","",2],["call","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M000790","(*args)","Alias for #call_with_newrelic",2],["call","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M000794","(*args)","Alias for #call_with_newrelic",2],["call","NewRelic::ChainedCall","classes/NewRelic/ChainedCall.html#M000693","(sql)","",2],["call","NewRelic::Rack::Episodes","classes/NewRelic/Rack/Episodes.html#M001217","(env)","",2],["call","NewRelic::Rack::MetricApp","classes/NewRelic/Rack/MetricApp.html#M001220","(env)","",2],["call","NewRelic::Rack::Status","classes/NewRelic/Rack/Status.html#M001221","(env)","",2],["call_rate_suffix","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001208","()","This is the suffix used for call rate or throughput.  By default, it's cpm but things like controller",2],["call_rate_suffix","NewRelic::MetricParser::Controller","classes/NewRelic/MetricParser/Controller.html#M001139","()","",2],["call_rate_suffix","NewRelic::MetricParser::ControllerCPU","classes/NewRelic/MetricParser/ControllerCPU.html#M001147","()","",2],["call_with_newrelic","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M000788","(*args)","",2],["call_without_newrelic","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M000791","(*args)","Alias for #call",2],["call_without_newrelic","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M000793","(*args)","Alias for #call",2],["called_segments","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001300","()","",2],["called_segments=","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001313","(segments)","",2],["calls_per_minute","NewRelic::Stats","classes/NewRelic/Stats.html#M001241","()","",2],["can_run?","NewRelic::Agent::Samplers::MemorySampler::Base","classes/NewRelic/Agent/Samplers/MemorySampler/Base.html#M000848","()","",2],["capture_params","NewRelic::Control","classes/NewRelic/Control.html#M001034","()","",2],["category","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000767","()","",2],["category","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001195","()","",2],["clear_stats","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000878","()","Remove all stats.  For test code only. ",2],["close_connections","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001323","()","",2],["color_value","NewRelicApi::ThresholdValue","classes/NewRelicApi/ThresholdValue.html#M001338","()","Returns the color value for this threshold (Gray, Green, Yellow or Red). ",2],["command","NewRelic::Command::Deployments","classes/NewRelic/Command/Deployments.html#M000968","()","",2],["command","NewRelic::Command::Install","classes/NewRelic/Command/Install.html#M000972","()","",2],["config_file","NewRelic::Control","classes/NewRelic/Control.html#M001077","()","",2],["config_file","NewRelic::Control::Ruby","classes/NewRelic/Control/Ruby.html#M001007","()","Check a sequence of file locations for newrelic.yml ",2],["content","NewRelic::Command::Install","classes/NewRelic/Command/Install.html#M000975","()","",2],["controller_name","NewRelic::MetricParser::Controller","classes/NewRelic/MetricParser/Controller.html#M001132","()","If the controller name segments look like a file path, convert it to the controller class name.  If it",2],["controller_name","NewRelic::MetricParser::ControllerCPU","classes/NewRelic/MetricParser/ControllerCPU.html#M001141","()","",2],["controller_name","NewRelic::MetricParser::View","classes/NewRelic/MetricParser/View.html#M001175","()","",2],["convert_to_ip_address","NewRelic::Control","classes/NewRelic/Control.html#M001067","(host)","Look up the ip address of the host using the pure ruby lookup  to prevent blocking.  If that fails, fall",2],["count_segments","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001328","()","",2],["count_segments","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001303","()","",2],["cpu_metric","NewRelic::MetricParser::Controller","classes/NewRelic/MetricParser/Controller.html#M001135","()","return the cpu measuring equivalent.  It may be nil since this metric was not present in earlier versions",2],["create_segment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001337","(relative_timestamp, metric_name, segment_id = nil)","",2],["current","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000756","(create_if_empty=nil)","Return the currently active metric frame, or nil.  Call with +true+ to create a new metric frame if one",2],["current_sample_id","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000897","()","",2],["custom_parameters","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000778","()","",2],["custom_parameters","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000773","()","",2],["database_metric_name","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000757","()","This is the name of the model currently assigned to database  measurements, overriding the default. ",2],["database_time","NewRelic::TransactionAnalysis","classes/NewRelic/TransactionAnalysis.html#M001232","()","",2],["delayed_worker=","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001085","(worker)","Obsolete method for DelayedJob instrumentation support, which is now in the rpm_contrib gem. ",2],["detail_segments=","NewRelic::TransactionSample::CompositeSegment","classes/NewRelic/TransactionSample/CompositeSegment.html#M001320","(segments)","",2],["developer_mode?","NewRelic::Control","classes/NewRelic/Control.html#M001036","()","True if we are capturing data and displaying in /newrelic ",2],["developer_name","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001189","()","",2],["developer_name","NewRelic::MetricParser::ActiveRecord","classes/NewRelic/MetricParser/ActiveRecord.html#M001124","()","",2],["developer_name","NewRelic::MetricParser::Client","classes/NewRelic/MetricParser/Client.html#M001130","()","",2],["developer_name","NewRelic::MetricParser::Controller","classes/NewRelic/MetricParser/Controller.html#M001134","()","",2],["developer_name","NewRelic::MetricParser::ControllerCPU","classes/NewRelic/MetricParser/ControllerCPU.html#M001143","()","",2],["developer_name","NewRelic::MetricParser::External","classes/NewRelic/MetricParser/External.html#M001157","()","",2],["developer_name","NewRelic::MetricParser::MemCache","classes/NewRelic/MetricParser/MemCache.html#M001160","()","",2],["developer_name","NewRelic::MetricParser::MemCache","classes/NewRelic/MetricParser/MemCache.html#M001165","()","",2],["developer_name","NewRelic::MetricParser::OtherTransaction","classes/NewRelic/MetricParser/OtherTransaction.html#M001167","()","",2],["developer_name","NewRelic::MetricParser::View","classes/NewRelic/MetricParser/View.html#M001177","()","",2],["developer_name","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M001246","()","",2],["disable","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000898","()","",2],["disable_all_tracing","NewRelic::Agent","classes/NewRelic/Agent.html#M000955","()","Yield to the block without collecting any metrics or traces in any of the subsequent calls.  If executed",2],["disable_sql_recording","NewRelic::Agent","classes/NewRelic/Agent.html#M000952","()","This method sets the state of sql recording in the transaction sampler feature. Within the given block,",2],["disable_transaction_tracing","NewRelic::Agent","classes/NewRelic/Agent.html#M000953","()","This method disables the recording of transaction traces in the given block.  See also #disable_all_tracing",2],["dispatcher","NewRelic::Control","classes/NewRelic/Control.html#M001047","()","",2],["dispatcher_finish","NewRelic::Agent::BusyCalculator","classes/NewRelic/Agent/BusyCalculator.html#M000682","(end_time = Time.now.to_f)","",2],["dispatcher_instance_id","NewRelic::Control","classes/NewRelic/Control.html#M001046","()","",2],["dispatcher_instance_id","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001071","()","",2],["dispatcher_start","NewRelic::Agent::BusyCalculator","classes/NewRelic/Agent/BusyCalculator.html#M000681","(time)","",2],["draw_with_newrelic_map","NewRelic::Control::Rails","classes/NewRelic/Control/Rails.html#M001001","()","",2],["drilldown_url","NewRelic::MetricParser::OtherTransaction","classes/NewRelic/MetricParser/OtherTransaction.html#M001168","(metric_id)","",2],["duration","NewRelic::Stats","classes/NewRelic/Stats.html#M001240","()","",2],["duration","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001340","()","",2],["duration","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001301","()","return the total duration of this segment ",2],["each_segment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001341","(&block)","",2],["each_segment","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001308","(&block)","call the provided block for this segment and each  of the called segments ",2],["end_time","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M001270","()","",2],["end_time=","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M001268","(t)","",2],["end_trace","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001283","(timestamp)","",2],["end_transaction","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000695","()","",2],["end_transaction","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000892","()","Try to clean up gracefully, otherwise we leave things hanging around on thread locals. If it looks like",2],["env","NewRelic::Control::Merb","classes/NewRelic/Control/Merb.html#M000978","()","",2],["env","NewRelic::Control::Rails","classes/NewRelic/Control/Rails.html#M000982","()","",2],["env","NewRelic::Control::Rails3","classes/NewRelic/Control/Rails3.html#M000987","()","",2],["env","NewRelic::Control::Ruby","classes/NewRelic/Control/Ruby.html#M001005","()","",2],["env","NewRelic::Control::Sinatra","classes/NewRelic/Control/Sinatra.html#M001010","()","",2],["episodes_enabled?","NewRelic::Control","classes/NewRelic/Control.html#M001037","()","",2],["eql?","NewRelic::MetricData","classes/NewRelic/MetricData.html#M001105","(o)","",2],["eql?","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001206","(o)","",2],["eql?","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M001296","(other)","",2],["err","NewRelic::Command","classes/NewRelic/Command.html#M000964","(message)","",2],["exclusive_duration","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001302","()","return the duration of this segment without  including the time in the called segments ",2],["exclusive_time_percentage","NewRelic::Stats","classes/NewRelic/Stats.html#M001248","()","",2],["exclusive_time_percentage","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M001244","()","",2],["explain_sql","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001310","()","perform this in the runtime environment of a managed application, to explain the sql statement(s) executed",2],["fetch","NewRelic::Control","classes/NewRelic/Control.html#M001026","(key, default=nil)","",2],["find_segment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001343","(id)","",2],["find_segment","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001309","(id)","",2],["finish_trace","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000930","(time)","",2],["for_metric_named","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001184","(s)","return a string that is parsable via the Metric parser APIs ",2],["fraction_of","NewRelic::Stats","classes/NewRelic/Stats.html#M001256","(s)","calculate this set of stats to be a percentage fraction  of the provided stats, which has an overlapping",2],["framework","NewRelic::Control","classes/NewRelic/Control.html#M001045","()","Alias for #app",2],["freeze","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000932","()","",2],["freeze","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M001265","()","",2],["from_json","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001287","(json, id_generator)","",2],["gateway_name","NewRelic::MetricParser::ActiveMerchant","classes/NewRelic/MetricParser/ActiveMerchant.html#M001117","()","",2],["gather_environment_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001073","()","Collect base statistics about the environment and record them for comparison and change detection. ",2],["get_apdex","NewRelic::Stats","classes/NewRelic/Stats.html#M001260","()","returns s,t,f ",2],["get_connection","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001322","(config)","",2],["get_custom_stats","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000868","(metric_name, stat_class)","This version allows a caller to pass a stat class to use ",2],["get_memory","NewRelic::Agent::Samplers::MemorySampler::JavaHeapSampler","classes/NewRelic/Agent/Samplers/MemorySampler/JavaHeapSampler.html#M000850","()","",2],["get_memory","NewRelic::Agent::Samplers::MemorySampler::ProcStatus","classes/NewRelic/Agent/Samplers/MemorySampler/ProcStatus.html#M000862","()","Returns the amount of resident memory this process is using in MB ",2],["get_memory","NewRelic::Agent::Samplers::MemorySampler::ShellPS","classes/NewRelic/Agent/Samplers/MemorySampler/ShellPS.html#M000855","()","Returns the amount of resident memory this process is using in MB ",2],["get_sample","NewRelic::Agent::Samplers::MemorySampler::Base","classes/NewRelic/Agent/Samplers/MemorySampler/Base.html#M000849","()","",2],["get_stats","NewRelic::Agent","classes/NewRelic/Agent.html#M000939","(metric_name, use_scope=false)","Get or create a statistics gatherer that will aggregate numerical data under a metric name. +metric_name+",2],["get_stats","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000869","(metric_name, use_scope = true, scoped_metric_only = false)","If use_scope is true, two chained metrics are created, one with scope and one without If scoped_metric_only",2],["get_stats_no_scope","NewRelic::Agent","classes/NewRelic/Agent.html#M000941","(metric_name, use_scope=false)","Alias for #get_stats",2],["get_stats_no_scope","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000867","(metric_name)","",2],["handle_exception_in_explain","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001311","(e)","",2],["harvest","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000919","(previous = nil, slow_threshold = 2.0)","get the set of collected samples, merging into previous samples, and clear the collected sample list.",2],["harvest_busy","NewRelic::Agent::BusyCalculator","classes/NewRelic/Agent/BusyCalculator.html#M000685","()","Called before uploading to to the server to collect current busy stats. ",2],["harvest_errors","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000711","(unsent_errors)","Get the errors currently queued up.  Unsent errors are left  over from a previous unsuccessful attempt",2],["harvest_timeslice_data","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000873","(previous_timeslice_data, metric_ids)","Harvest the timeslice data.  First recombine current statss with any previously unsent metrics, clear",2],["hash","NewRelic::MetricData","classes/NewRelic/MetricData.html#M001109","()","",2],["hash","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001207","()","",2],["hash","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M001295","()","",2],["host","NewRelic::MetricParser::External","classes/NewRelic/MetricParser/External.html#M001152","()","",2],["hosts_all?","NewRelic::MetricParser::External","classes/NewRelic/MetricParser/External.html#M001151","()","",2],["http_connection","NewRelic::Control","classes/NewRelic/Control.html#M001057","(host = nil)","Return the Net::HTTP with proxy configuration given the NewRelic::Control::Server object. Default is",2],["ignore","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000706","(errors)","errors is an array of Exception Class Names ",2],["ignore_error_filter","NewRelic::Agent","classes/NewRelic/Agent.html#M000957","(&block)","Set a filter to be applied to errors that RPM will track.  The block should evalute to the exception",2],["ignore_error_filter","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000705","(&block)","",2],["ignore_transaction","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000927","()","",2],["ignore_transaction","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000913","()","",2],["ignored?","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000926","()","",2],["included","NewRelic::Agent::Instrumentation::ActiveRecordInstrumentation","classes/NewRelic/Agent/Instrumentation/ActiveRecordInstrumentation.html#M000723","(instrumented_class)","",2],["increment_count","NewRelic::MethodTraceStats","classes/NewRelic/MethodTraceStats.html#M001277","(value = 1)","",2],["info","NewRelic::Command","classes/NewRelic/Command.html#M000963","(message)","",2],["inherited","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M000806","(subclass)","",2],["inherited","NewRelic::Command","classes/NewRelic/Command.html#M000966","(subclass)","",2],["init_config","NewRelic::Control::External","classes/NewRelic/Control/External.html#M000977","(options={})","",2],["init_config","NewRelic::Control::Merb","classes/NewRelic/Control/Merb.html#M000981","(options={})","",2],["init_config","NewRelic::Control::Rails","classes/NewRelic/Control/Rails.html#M000985","(options={})","In versions of Rails prior to 2.0, the rails config was only available to  the init.rb, so it had to",2],["init_config","NewRelic::Control::Rails3","classes/NewRelic/Control/Rails3.html#M000995","(options={})","",2],["init_config","NewRelic::Control::Ruby","classes/NewRelic/Control/Ruby.html#M001009","(options={})","",2],["init_config","NewRelic::Control::Sinatra","classes/NewRelic/Control/Sinatra.html#M001011","(options={})","This is the control used when starting up in the context of  The New Relic Infrastructure Agent.  We",2],["init_plugin","NewRelic::Control","classes/NewRelic/Control.html#M001017","(options={})","Initialize the plugin/gem and start the agent.  This does the necessary configuration based on the framework",2],["initialize_with_new_relic","Object","classes/Object.html#M001012","(*args)","",2],["install_developer_mode","NewRelic::Control::Rails","classes/NewRelic/Control/Rails.html#M000991","(rails_config)","",2],["install_devmode_route","NewRelic::Control::Rails","classes/NewRelic/Control/Rails.html#M001000","()","",2],["install_episodes","NewRelic::Control::Rails","classes/NewRelic/Control/Rails.html#M000986","(config)","",2],["install_instrumentation","NewRelic::Control","classes/NewRelic/Control.html#M001063","()","",2],["install_shim","NewRelic::Control","classes/NewRelic/Control.html#M001061","()","Install stubs to the proper location so the app code will not fail if the agent is not running. ",2],["install_shim","NewRelic::Control::Rails","classes/NewRelic/Control/Rails.html#M001004","()","",2],["install_shim","NewRelic::Control::Rails3","classes/NewRelic/Control/Rails3.html#M000998","()","",2],["instance","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000687","()","Should only be called by NewRelic::Control ",2],["instance","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000851","()","",2],["instance","NewRelic::Control","classes/NewRelic/Control.html#M001016","()","Access the Control singleton, lazy initialized ",2],["instrument_method","Object","classes/Object.html#M000748","(the_class, method_name)","",2],["is_action_mailer?","NewRelic::MetricParser::ActionMailer","classes/NewRelic/MetricParser/ActionMailer.html#M001112","()","",2],["is_active_merchant?","NewRelic::MetricParser::ActiveMerchant","classes/NewRelic/MetricParser/ActiveMerchant.html#M001114","()","",2],["is_active_merchant_gateway?","NewRelic::MetricParser::ActiveMerchant","classes/NewRelic/MetricParser/ActiveMerchant.html#M001115","()","",2],["is_active_merchant_operation?","NewRelic::MetricParser::ActiveMerchant","classes/NewRelic/MetricParser/ActiveMerchant.html#M001116","()","",2],["is_active_record?","NewRelic::MetricParser::ActiveRecord","classes/NewRelic/MetricParser/ActiveRecord.html#M001120","()","",2],["is_compiler?","NewRelic::MetricParser::View","classes/NewRelic/MetricParser/View.html#M001171","()","",2],["is_controller?","NewRelic::MetricParser::Controller","classes/NewRelic/MetricParser/Controller.html#M001131","()","",2],["is_controller_cpu?","NewRelic::MetricParser::ControllerCPU","classes/NewRelic/MetricParser/ControllerCPU.html#M001140","()","",2],["is_error?","NewRelic::MetricParser::Errors","classes/NewRelic/MetricParser/Errors.html#M001148","()","",2],["is_execution_traced?","NewRelic::Agent","classes/NewRelic/Agent.html#M000956","()","Check to see if we are capturing metrics currently on this thread. ",2],["is_memcache?","NewRelic::MetricParser::MemCache","classes/NewRelic/MetricParser/MemCache.html#M001158","()","",2],["is_render?","NewRelic::MetricParser::View","classes/NewRelic/MetricParser/View.html#M001170","()","",2],["is_reset?","NewRelic::Stats","classes/NewRelic/Stats.html#M001230","()","",2],["is_view?","NewRelic::MetricParser::View","classes/NewRelic/MetricParser/View.html#M001169","()","",2],["is_web_service?","NewRelic::MetricParser::WebService","classes/NewRelic/MetricParser/WebService.html#M001182","()","",2],["keep_running","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M000906","()","",2],["last_segment","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001204","()","",2],["legend_name","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001193","()","A short name for legends in the graphs ",2],["legend_name","NewRelic::MetricParser::ActiveRecord","classes/NewRelic/MetricParser/ActiveRecord.html#M001122","()","",2],["legend_name","NewRelic::MetricParser::Client","classes/NewRelic/MetricParser/Client.html#M001128","()","",2],["legend_name","NewRelic::MetricParser::External","classes/NewRelic/MetricParser/External.html#M001155","()","",2],["legend_name","NewRelic::MetricParser::MemCache","classes/NewRelic/MetricParser/MemCache.html#M001163","()","",2],["legend_name","NewRelic::MetricParser::WebFrontend","classes/NewRelic/MetricParser/WebFrontend.html#M001181","()","",2],["library","NewRelic::MetricParser::External","classes/NewRelic/MetricParser/External.html#M001153","()","",2],["license_key","NewRelic::Control","classes/NewRelic/Control.html#M001033","()","",2],["load_instrumentation_files","NewRelic::Control","classes/NewRelic/Control.html#M001090","(pattern)","",2],["load_samplers","NewRelic::Control","classes/NewRelic/Control.html#M001064","()","",2],["local_env","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M000831","()","",2],["lock","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M000901","()","",2],["locked_jobs","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M000833","()","",2],["log","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000701","()","",2],["log","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine.html#M000886","()","",2],["log","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M000902","()","",2],["log","NewRelic::Control","classes/NewRelic/Control.html#M001059","()","",2],["log!","NewRelic::Control","classes/NewRelic/Control.html#M001060","(msg, level=:info)","send the given message to STDOUT so that it shows up in the console.  This should be used for important",2],["log_path","NewRelic::Control","classes/NewRelic/Control.html#M001078","()","",2],["log_path","NewRelic::Control::Rails","classes/NewRelic/Control/Rails.html#M000984","()","",2],["log_path","NewRelic::Control::Rails3","classes/NewRelic/Control/Rails3.html#M000992","()","",2],["log_with_capture_sql","Object","classes/Object.html#M000739","(sql, name, &block)","",2],["log_with_newrelic_instrumentation","NewRelic::Agent::Instrumentation::ActiveRecordInstrumentation","classes/NewRelic/Agent/Instrumentation/ActiveRecordInstrumentation.html#M000724","(sql, name, &block)","",2],["log_with_newrelic_instrumentation","Object","classes/Object.html#M000737","(sql, name, &block)","",2],["logger","NewRelic::Agent","classes/NewRelic/Agent.html#M000942","()","Get the logger for the agent.  Available after the agent has initialized. This sends output to the agent",2],["logger","NewRelic::Control::Rails3","classes/NewRelic/Control/Rails3.html#M000989","()","",2],["lookup_stat","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000865","(metric_name)","The stats hash hashes either a metric name for an unscoped metric, or a metric_spec for a scoped metric",2],["lookup_stats","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000871","(metric_name, scope_name = nil)","",2],["major_version","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M001289","()","",2],["manual_start","NewRelic::Agent","classes/NewRelic/Agent.html#M000943","(options={})","Call this to manually start the Agent in situations where the Agent does not auto-start. When the app",2],["manual_start","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000688","(ignored=nil, also_ignored=nil)","This method is deprecated.  Use NewRelic::Agent.manual_start ",2],["max_millis","NewRelic::Histogram::Bucket","classes/NewRelic/Histogram/Bucket.html#M001030","()","",2],["measure","NewRelic::MetricParser::Client","classes/NewRelic/MetricParser/Client.html#M001125","()","",2],["memcache_key_snippet","Object","classes/Object.html#M000749","(method_name)","",2],["merge","NewRelic::Stats","classes/NewRelic/Stats.html#M001228","(other_stats)","",2],["merge!","NewRelic::Stats","classes/NewRelic/Stats.html#M001227","(other_stats)","",2],["merge_defaults","NewRelic::Control","classes/NewRelic/Control.html#M001072","(settings_hash)","",2],["merge_options","NewRelic::Control","classes/NewRelic/Control.html#M001087","(options, hash=self)","Merge the given options into the config options. They might be a nested hash ",2],["method_missing","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001186","(method_name, *args)","",2],["metric_name","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000775","()","",2],["metric_spec","NewRelic::MetricData","classes/NewRelic/MetricData.html#M001107","()","",2],["metric_spec=","NewRelic::MetricData","classes/NewRelic/MetricData.html#M001108","(new_spec)","",2],["metrics","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000866","()","",2],["min_millis","NewRelic::Histogram::Bucket","classes/NewRelic/Histogram/Bucket.html#M001029","()","",2],["minor_version","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M001290","()","",2],["model_class","NewRelic::MetricParser::ActiveRecord","classes/NewRelic/MetricParser/ActiveRecord.html#M001121","()","",2],["mongrel","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001082","()","",2],["monitor_mode?","NewRelic::Control","classes/NewRelic/Control.html#M001035","()","True if we are sending data to the server, monitoring production ",2],["multi_threaded?","NewRelic::Control","classes/NewRelic/Control.html#M001038","()","True if the app runs in multi-threaded mode ",2],["multiply_by","NewRelic::Stats","classes/NewRelic/Stats.html#M001259","(percentage)","multiply the total time and rate by the given percentage  ",2],["new","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000712","()","",2],["new","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000703","()","",2],["new","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000759","()","",2],["new","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M000813","(id)","",2],["new","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M000819","()","",2],["new","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M000827","()","",2],["new","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M000842","()","",2],["new","NewRelic::Agent::Samplers::MemorySampler::ShellPS","classes/NewRelic/Agent/Samplers/MemorySampler/ShellPS.html#M000854","(command)","",2],["new","NewRelic::Agent::Samplers::ObjectSampler","classes/NewRelic/Agent/Samplers/ObjectSampler.html#M000838","()","",2],["new","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000852","()","",2],["new","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine.html#M000885","()","",2],["new","NewRelic::Agent::StatsEngine::ScopeStackElement","classes/NewRelic/Agent/StatsEngine/ScopeStackElement.html#M000881","(name, deduct_call_time)","",2],["new","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000924","(time=nil)","",2],["new","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000896","()","",2],["new","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M000900","()","",2],["new","NewRelic::ChainedCall","classes/NewRelic/ChainedCall.html#M000692","(block1, block2)","",2],["new","NewRelic::Command","classes/NewRelic/Command.html#M000965","(command_line_args)","",2],["new","NewRelic::Command::CommandFailure","classes/NewRelic/Command/CommandFailure.html#M000962","(message, opt_parser=nil)","",2],["new","NewRelic::Command::Deployments","classes/NewRelic/Command/Deployments.html#M000969","(command_line_args)","Initialize the deployment uploader with command line args. Use -h to see options. When command_line_args",2],["new","NewRelic::Command::Install","classes/NewRelic/Command/Install.html#M000973","(command_line_args={})","",2],["new","NewRelic::Control","classes/NewRelic/Control.html#M001081","(local_env)","",2],["new","NewRelic::Histogram","classes/NewRelic/Histogram.html#M001032","(first_bucket_max = 0.010, bucket_count = 30, multiplier = 1.3)","Histogram uses apdex T / 10 as its minimum bucket size, and grows from there. 30 data points should be",2],["new","NewRelic::Histogram::Bucket","classes/NewRelic/Histogram/Bucket.html#M001020","(min, max = nil)","",2],["new","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001065","()","",2],["new","NewRelic::MetricData","classes/NewRelic/MetricData.html#M001104","(metric_spec, stats, metric_id)","",2],["new","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001210","(name)","returns a hash of params for url_for(), giving you a drilldown URL to an RPM page for this metric define",2],["new","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001192","(metric_name = '', metric_scope = '')","Need a \"zero-arg\" constructor so it can be instantiated from java (using jruby) for sending responses",2],["new","NewRelic::NoticedError","classes/NewRelic/NoticedError.html#M001215","(path, data, exception, timestamp = Time.now)","",2],["new","NewRelic::Rack::Episodes","classes/NewRelic/Rack/Episodes.html#M001216","(app)","",2],["new","NewRelic::Rack::MetricApp","classes/NewRelic/Rack/MetricApp.html#M001219","(options)","",2],["new","NewRelic::ScopedMethodTraceStats","classes/NewRelic/ScopedMethodTraceStats.html#M001278","(unscoped_stats)","",2],["new","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M001264","()","",2],["new","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M001234","(metric_name, sample)","",2],["new","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001327","(time = Time.now.to_f, sample_id = nil)","",2],["new","NewRelic::TransactionSample::CompositeSegment","classes/NewRelic/TransactionSample/CompositeSegment.html#M001318","(segments)","",2],["new","NewRelic::TransactionSample::IDGenerator","classes/NewRelic/TransactionSample/IDGenerator.html#M001360","()","",2],["new","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001282","(timestamp, metric_name, segment_id)","",2],["new","NewRelic::TransactionSample::SummarySegment","classes/NewRelic/TransactionSample/SummarySegment.html#M001316","(segment)","",2],["new","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M001288","(version_string)","",2],["new_instance","NewRelic::Control","classes/NewRelic/Control.html#M001079","()","Create the concrete class for environment specific behavior: ",2],["newrelic_ignore","NewRelic::Agent::Instrumentation::ControllerInstrumentation::ClassMethods","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation/ClassMethods.html#M000732","(specifiers={})","Have NewRelic ignore actions in this controller.  Specify the actions as hash options using :except and",2],["newrelic_ignore_apdex","NewRelic::Agent::Instrumentation::ControllerInstrumentation::ClassMethods","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation/ClassMethods.html#M000733","(specifiers={})","Have NewRelic omit apdex measurements on the given actions.  Typically used for  actions that are not",2],["newrelic_metric_path","NewRelic::Agent::Instrumentation::Rails3::ActionController","classes/NewRelic/Agent/Instrumentation/Rails3/ActionController.html#M000802","(action_name_override = nil)","determine the path that is used in the metric name for the called controller action ",2],["newrelic_metric_path","Object","classes/Object.html#M000797","(action_name_override = nil)","determine the path that is used in the metric name for the called controller action ",2],["newrelic_metric_path","Object","classes/Object.html#M000755","()","determine the path that is used in the metric name for the called controller action ",2],["newrelic_notice_error","NewRelic::Agent::Instrumentation::Rails3::Errors","classes/NewRelic/Agent/Instrumentation/Rails3/Errors.html#M000803","(exception, custom_params = {})","",2],["newrelic_notice_error","Object","classes/Object.html#M000798","(exception, custom_params = {})","Make a note of an exception associated with the currently executing controller action.  Note that this",2],["newrelic_request_headers","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000743","()","",2],["newrelic_request_headers","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M000787","()","",2],["newrelic_response_code","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000742","()","Should be implemented in the dispatcher class ",2],["newrelic_root","NewRelic::Control","classes/NewRelic/Control.html#M001083","()","The root directory for the plugin or gem ",2],["newrelic_root","NewRelic::Control","classes/NewRelic/Control.html#M001086","()","",2],["next_id","NewRelic::TransactionSample::IDGenerator","classes/NewRelic/TransactionSample/IDGenerator.html#M001361","()","",2],["normalize_params","NewRelic::CollectionHelper","classes/NewRelic/CollectionHelper.html#M000940","(params)","Transform parameter hash into a hash whose values are strictly strings ",2],["notice_error","NewRelic::Agent","classes/NewRelic/Agent.html#M000958","(exception, options={})","Record the given error in RPM.  It will be passed through the #ignore_error_filter if there is one. *",2],["notice_error","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000707","(exception, options={})","Notice the error with the given available options: * <tt>:uri</tt> => The request path, minus any request",2],["notice_error","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000770","(e, options={})","If we have an active metric frame, notice the error and increment the error metric. Options: * <tt>:request</tt>",2],["notice_first_scope_push","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000903","(time)","",2],["notice_nosql","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000918","(key, duration)","",2],["notice_pop_scope","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000908","(scope, time = Time.now.to_f)","",2],["notice_profile","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000914","(profile)","",2],["notice_push_scope","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000904","(scope, time=Time.now.to_f)","",2],["notice_scope_empty","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000911","(time=Time.now.to_f)","This is called when we are done with the transaction.  We've unwound the stack to the top level. ",2],["notice_sql","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000917","(sql, config, duration)","",2],["notice_transaction","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000912","(path, uri=nil, params={})","",2],["notice_transaction_cpu_time","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000915","(cpu_time)","",2],["obfuscate_sql","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001321","(sql)","",2],["obfuscated_sql","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001312","()","",2],["omit_segments_with","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001350","(regex)","return a new transaction sample that treats segments with the given regular expression in their name",2],["operation","NewRelic::MetricParser::Client","classes/NewRelic/MetricParser/Client.html#M001127","()","",2],["operation","NewRelic::MetricParser::External","classes/NewRelic/MetricParser/External.html#M001154","()","",2],["operation","NewRelic::MetricParser::MemCache","classes/NewRelic/MetricParser/MemCache.html#M001162","()","",2],["operation_name","NewRelic::MetricParser::ActiveMerchant","classes/NewRelic/MetricParser/ActiveMerchant.html#M001118","()","",2],["original_spec","NewRelic::MetricData","classes/NewRelic/MetricData.html#M001106","()","",2],["params","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001307","()","",2],["params=","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001354","(params)","",2],["params=","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001315","(p)","",2],["parent_segment=","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001314","(s)","",2],["parse","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001185","(s)","",2],["path","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000768","()","",2],["path_string","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001336","()","",2],["path_string","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001293","()","",2],["peek_scope","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000888","()","",2],["perform_action_with_newrelic_trace","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000741","(*args, &block)","Yield to the given block with NewRelic tracing.  Used by  default instrumentation on controller actions",2],["pie_chart_label","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001188","()","",2],["pie_chart_label","NewRelic::MetricParser::View","classes/NewRelic/MetricParser/View.html#M001172","()","",2],["platform","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M000845","()","",2],["platform","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M000844","()","",2],["poll","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M000814","()","",2],["poll","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M000825","()","",2],["poll","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M000835","()","",2],["poll","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M000847","()","",2],["poll","NewRelic::Agent::Samplers::ObjectSampler","classes/NewRelic/Agent/Samplers/ObjectSampler.html#M000841","()","",2],["pop","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000769","()","Unwind one stack level.  It knows if it's back at the outermost caller and does the appropriate wrapup",2],["pop_scope","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000887","(expected_scope, duration, time=Time.now.to_f)","",2],["pop_trace_execution_flag","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000699","()","Pop the current trace execution status.  Restore trace execution status to what it was before we pushed",2],["pop_trace_execution_flag","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000860","(*args)","",2],["post_size_limit","NewRelic::Control","classes/NewRelic/Control.html#M001041","()","",2],["prepare_to_send","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001351","(options={})","return a new transaction sample that can be sent to the RPM service. this involves potentially one or",2],["proc_status_file","NewRelic::Agent::Samplers::MemorySampler::ProcStatus","classes/NewRelic/Agent/Samplers/MemorySampler/ProcStatus.html#M000863","()","",2],["process","NewRelic::Histogram","classes/NewRelic/Histogram.html#M001039","(response_time)","",2],["process","NewRelic::Histogram::Bucket","classes/NewRelic/Histogram/Bucket.html#M001024","(value)","This has return value like <=> but does something more than simply compare.  If the value falls within",2],["process","NewRelic::Histogram::Shim","classes/NewRelic/Histogram/Shim.html#M001019","(response_time)","",2],["process_action","NewRelic::Agent::Instrumentation::Rails3::ActionController","classes/NewRelic/Agent/Instrumentation/Rails3/ActionController.html#M000804","(*args)","",2],["profiling=","NewRelic::Control","classes/NewRelic/Control.html#M001015","(val)","Set the flag for capturing profiles in dev mode.  If RubyProf is not loaded a true value is ignored.",2],["profiling?","NewRelic::Control","classes/NewRelic/Control.html#M001013","()","A flag used in dev mode to indicate if profiling is available ",2],["profiling_available?","NewRelic::Control","classes/NewRelic/Control.html#M001014","()","",2],["proxy_server","NewRelic::Control","classes/NewRelic/Control.html#M001055","()","",2],["push","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000760","(category, path)","Indicate that we are entering a measured controller action or task. Make sure you unwind every push with",2],["push_scope","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000884","(metric, time = Time.now.to_f, deduct_call_time_from_parent = true)","",2],["push_trace_execution_flag","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000698","(should_trace=false)","Push flag indicating whether we should be tracing in this thread.   ",2],["push_trace_execution_flag","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000859","(*args)","",2],["rails_vendor_root","NewRelic::Control::Rails","classes/NewRelic/Control/Rails.html#M001002","()","",2],["rails_version","NewRelic::Control::Rails","classes/NewRelic/Control/Rails.html#M000999","()","",2],["record_apdex","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000774","()","",2],["record_apdex_f","NewRelic::ApdexStats","classes/NewRelic/ApdexStats.html#M001273","()","",2],["record_apdex_s","NewRelic::ApdexStats","classes/NewRelic/ApdexStats.html#M001271","()","",2],["record_apdex_t","NewRelic::ApdexStats","classes/NewRelic/ApdexStats.html#M001272","()","",2],["record_data_point","NewRelic::MethodTraceStats","classes/NewRelic/MethodTraceStats.html#M001274","(value, exclusive_time = value)","record a single data point into the statistical gatherer.  The gatherer will aggregate all data points",2],["record_multiple_data_points","NewRelic::MethodTraceStats","classes/NewRelic/MethodTraceStats.html#M001276","(total_value, count=1)","",2],["record_multiple_data_points","NewRelic::ScopedMethodTraceStats","classes/NewRelic/ScopedMethodTraceStats.html#M001280","(total_value, count=1)","",2],["recorded_metrics","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000776","()","Return the array of metrics to record for the current metric frame. ",2],["recording_web_transaction?","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000781","(cat = category)","",2],["recording_web_transaction?","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000780","()","",2],["referer","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000763","()","For the current web transaction, return the full referer, minus the host string, or nil. ",2],["referer","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000758","()","",2],["referer_from_request","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000782","(request)","Make a safe attempt to get the referer from a request object, generally successful when it's a Rack request.",2],["remove_transaction_sampler","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000883","(l)","",2],["render_time","NewRelic::TransactionAnalysis","classes/NewRelic/TransactionAnalysis.html#M001233","()","",2],["request_with_newrelic_trace","Object","classes/Object.html#M000766","(*args, &block)","",2],["requests_per_minute","NewRelic::Stats","classes/NewRelic/Stats.html#M001252","()","Alias for #calls_per_minute",2],["rescue_action_with_newrelic_trace","Object","classes/Object.html#M000799","(exception)","",2],["reset","NewRelic::Agent::BusyCalculator","classes/NewRelic/Agent/BusyCalculator.html#M000684","()","Reset the state of the information accumulated by all threads, but only reset the recursion counter for",2],["reset","NewRelic::Stats","classes/NewRelic/Stats.html#M001231","()","",2],["reset!","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000920","()","reset samples without rebooting the web server ",2],["reset!","NewRelicApi","classes/NewRelicApi.html#M001325","()","Resets the base path of all resources.  This should be called when overridding the newrelic.yml settings",2],["reset_stats","NewRelic::Agent","classes/NewRelic/Agent.html#M000946","()","Clear out any unsent metric data. ",2],["reset_stats","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000704","()","Clear out the metric data, errors, and transaction traces.  Reset the histogram data. ",2],["reset_stats","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000879","()","Reset each of the stats, such as when a new passenger instance starts up. ",2],["root","NewRelic::Control::Merb","classes/NewRelic/Control/Merb.html#M000979","()","",2],["root","NewRelic::Control::Rails","classes/NewRelic/Control/Rails.html#M000983","()","",2],["root","NewRelic::Control::Rails3","classes/NewRelic/Control/Rails3.html#M000988","()","",2],["root","NewRelic::Control::Ruby","classes/NewRelic/Control/Ruby.html#M001006","()","",2],["root_segment=","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001353","(segment)","",2],["round!","NewRelic::Stats","classes/NewRelic/Stats.html#M001255","()","round all of the values to n decimal points ",2],["route_eval_with_newrelic","NewRelic::Agent::Instrumentation::Sinatra","classes/NewRelic/Agent/Instrumentation/Sinatra.html#M000805","(&block_arg)","",2],["run","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M000905","(period, &block)","Run infinitely, calling the registered tasks at their specified call periods.  The caller is responsible",2],["run","NewRelic::Command","classes/NewRelic/Command.html#M000967","()","",2],["run","NewRelic::Command::Deployments","classes/NewRelic/Command/Deployments.html#M000970","()","Run the Deployment upload in RPM via Active Resource. Will possibly print errors and exit the VM ",2],["run","NewRelic::Command::Install","classes/NewRelic/Command/Install.html#M000974","()","",2],["run","NewRelic::MerbBootLoader","classes/NewRelic/MerbBootLoader.html#M001359","()","",2],["run_task","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M000910","()","",2],["sample","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000936","()","",2],["sample_id","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000925","()","",2],["sampler_classes","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M000812","()","",2],["sampling_rate=","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000899","(val)","",2],["scope_depth","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000931","()","",2],["scope_depth","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M000907","()","",2],["scope_name","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000890","()","",2],["scope_name=","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000889","(transaction)","set the name of the transaction for the current thread, which will be used to define the scope of all",2],["segment_0","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001198","()","-- These accessors are used to allow chart to use a specific segment  in the metric name for label construction",2],["segment_1","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001199","()","",2],["segment_2","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001200","()","",2],["segment_3","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001201","()","",2],["segment_4","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001202","()","",2],["segment_5","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001203","()","",2],["segments","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001196","()","",2],["server","NewRelic::Control","classes/NewRelic/Control.html#M001053","()","",2],["server_from_host","NewRelic::Control","classes/NewRelic/Control.html#M001056","(hostname=nil)","",2],["set_profile","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000933","(profile)","",2],["set_record_sql","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000696","(should_record)","",2],["set_record_tt","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000697","(should_record)","",2],["set_sql_obfuscator","NewRelic::Agent","classes/NewRelic/Agent.html#M000951","(type = :replace, &block)","This method sets the block sent to this method as a sql obfuscator.  The block will be called with a",2],["set_sql_obfuscator","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000700","(type, &block)","",2],["set_transaction_cpu_time","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000935","(cpu_time)","",2],["set_transaction_info","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000934","(path, uri, params)","",2],["settings","NewRelic::Control","classes/NewRelic/Control.html#M001022","()","",2],["setup_log","NewRelic::Control","classes/NewRelic/Control.html#M001074","()","Control subclasses may override this, but it can be called multiple times. ",2],["short_name","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001187","()","The short name for the metric is defined as all of the segments of the metric name except for its first",2],["short_name","NewRelic::MetricParser::ActionMailer","classes/NewRelic/MetricParser/ActionMailer.html#M001113","()","",2],["short_name","NewRelic::MetricParser::ActiveMerchant","classes/NewRelic/MetricParser/ActiveMerchant.html#M001119","()","",2],["short_name","NewRelic::MetricParser::Controller","classes/NewRelic/MetricParser/Controller.html#M001136","()","",2],["short_name","NewRelic::MetricParser::ControllerCPU","classes/NewRelic/MetricParser/ControllerCPU.html#M001145","()","",2],["short_name","NewRelic::MetricParser::Errors","classes/NewRelic/MetricParser/Errors.html#M001149","()","",2],["short_name","NewRelic::MetricParser::MemCache","classes/NewRelic/MetricParser/MemCache.html#M001159","()","for MemCache metrics, the short name is actually the full name ",2],["short_name","NewRelic::MetricParser::View","classes/NewRelic/MetricParser/View.html#M001174","()","",2],["short_name","NewRelic::MetricParser::WebFrontend","classes/NewRelic/MetricParser/WebFrontend.html#M001180","()","",2],["shutdown","NewRelic::Agent","classes/NewRelic/Agent.html#M000948","()","Shutdown the agent.  Call this before exiting.  Sends any queued data and kills the background thread.",2],["shutdown","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000691","()","Attempt a graceful shutdown of the agent.   ",2],["shutdown","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000858","()","",2],["snapshot","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001080","()","Take a snapshot of the environment information for this application Returns an associative array ",2],["split","NewRelic::Stats","classes/NewRelic/Stats.html#M001229","(rollup_begin_time, rollup_period)","split into an array of timeslices whose time boundaries start on (begin_time + (n * duration)) and whose",2],["sql_segments","NewRelic::TransactionAnalysis","classes/NewRelic/TransactionAnalysis.html#M001257","()","return an array of sql statements executed by this transaction each element in the array contains [sql,",2],["standard_deviation","NewRelic::Stats","classes/NewRelic/Stats.html#M001243","()","",2],["start","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000702","()","Start up the agent.  This verifies that the agent_enabled? is true and initializes the sampler based",2],["start","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M000857","(*args;)","",2],["start_agent","NewRelic::Control","classes/NewRelic/Control.html#M001018","()","Install the real agent into the Agent module, and issue the start command. ",2],["start_sampler_thread","NewRelic::Agent::StatsEngine::Samplers","classes/NewRelic/Agent/StatsEngine/Samplers.html#M000870","()","",2],["start_time","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001335","()","",2],["start_transaction","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000694","()","",2],["start_transaction","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000765","()","This needs to be called after entering the call to trace the controller action, otherwise the controller",2],["start_transaction","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000891","(name = nil)","Start a new transaction, unless one is already in progress ",2],["started?","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000690","()","True if we have initialized and completed 'start' ",2],["stats","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M000828","()","",2],["stats","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M000846","()","",2],["stats","NewRelic::Agent::Samplers::ObjectSampler","classes/NewRelic/Agent/Samplers/ObjectSampler.html#M000839","()","",2],["stats","NewRelic::Histogram::Bucket","classes/NewRelic/Histogram/Bucket.html#M001023","()","",2],["stats_hash","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M000880","()","",2],["stop","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M000909","()","",2],["strip_nr_from_backtrace","NewRelic::CollectionHelper","classes/NewRelic/CollectionHelper.html#M000944","(backtrace)","Return an array of strings (backtrace), cleaned up for readability Return nil if there is no backtrace",2],["sub","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001211","(pattern, replacement, apply_to_scope = true)","return a new metric spec if the given regex matches the name or scope. ",2],["sum_merge!","NewRelic::Stats","classes/NewRelic/Stats.html#M001226","(other_stats)","merge by adding to average response time - used to compose multiple metrics e.g. dispatcher time + mongrel",2],["summary","NewRelic::Stats","classes/NewRelic/Stats.html#M001254","()","Summary string to facilitate testing ",2],["supported_on_this_platform?","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M000807","()","Override with check.  Called before instantiating. ",2],["supported_on_this_platform?","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M000824","()","",2],["supported_on_this_platform?","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M000834","()","",2],["supported_on_this_platform?","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M000843","()","",2],["supported_on_this_platform?","NewRelic::Agent::Samplers::ObjectSampler","classes/NewRelic/Agent/Samplers/ObjectSampler.html#M000840","()","",2],["sync_startup","NewRelic::Control","classes/NewRelic/Control.html#M001042","()","",2],["system_util_stats","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M000821","()","",2],["systemtime_stats","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M000823","()","",2],["task","NewRelic::MetricParser::OtherTransaction","classes/NewRelic/MetricParser/OtherTransaction.html#M001166","()","",2],["template_label","NewRelic::MetricParser::View","classes/NewRelic/MetricParser/View.html#M001173","()","",2],["time_percentage","NewRelic::Stats","classes/NewRelic/Stats.html#M001247","()","returns the time spent in this component as a percentage of the total time window. ",2],["time_str","NewRelic::Stats","classes/NewRelic/Stats.html#M001223","(value_ms)","",2],["timestamp","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001330","()","offset from start of app ",2],["tiny_version","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M001291","()","",2],["to_debug_str","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001299","(depth)","",2],["to_json","NewRelic::MetricData","classes/NewRelic/MetricData.html#M001110","(*a)","Serialize with all attributes, but if the metric id is not nil, then don't send the metric spec ",2],["to_json","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001213","(*a)","",2],["to_json","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M001266","(*a)","",2],["to_json","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001286","()","",2],["to_s","NewRelic::Agent::Samplers::MemorySampler::JavaHeapSampler","classes/NewRelic/Agent/Samplers/MemorySampler/JavaHeapSampler.html#M000853","()","",2],["to_s","NewRelic::Agent::Samplers::MemorySampler::ProcStatus","classes/NewRelic/Agent/Samplers/MemorySampler/ProcStatus.html#M000864","()","",2],["to_s","NewRelic::Agent::Samplers::MemorySampler::ShellPS","classes/NewRelic/Agent/Samplers/MemorySampler/ShellPS.html#M000861","()","",2],["to_s","NewRelic::Control","classes/NewRelic/Control.html#M001058","()","",2],["to_s","NewRelic::Histogram::Bucket","classes/NewRelic/Histogram/Bucket.html#M001031","()","",2],["to_s","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001103","()","",2],["to_s","NewRelic::MetricData","classes/NewRelic/MetricData.html#M001111","()","",2],["to_s","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001212","()","",2],["to_s","NewRelic::Stats","classes/NewRelic/Stats.html#M001253","()","",2],["to_s","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001344","()","",2],["to_s","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001285","()","",2],["to_s","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M001294","()","",2],["to_s_compact","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001342","()","",2],["to_s_compact","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001298","()","",2],["to_stdout","NewRelic::Control","classes/NewRelic/Control.html#M001076","(msg)","",2],["to_stdout","NewRelic::Control::Merb","classes/NewRelic/Control/Merb.html#M000980","(msg)","",2],["to_stdout","NewRelic::Control::Rails","classes/NewRelic/Control/Rails.html#M000997","(message)","",2],["to_stdout","NewRelic::Control::Ruby","classes/NewRelic/Control/Ruby.html#M001008","(msg)","",2],["tooltip_name","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001190","()","",2],["tooltip_name","NewRelic::MetricParser::ActiveRecord","classes/NewRelic/MetricParser/ActiveRecord.html#M001123","()","",2],["tooltip_name","NewRelic::MetricParser::Client","classes/NewRelic/MetricParser/Client.html#M001129","()","",2],["tooltip_name","NewRelic::MetricParser::External","classes/NewRelic/MetricParser/External.html#M001156","()","",2],["tooltip_name","NewRelic::MetricParser::MemCache","classes/NewRelic/MetricParser/MemCache.html#M001164","()","",2],["total_call_time_per_minute","NewRelic::Stats","classes/NewRelic/Stats.html#M001242","()","",2],["total_time_percentage","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M001245","()","",2],["trace_call","NewRelic::MethodTraceStats","classes/NewRelic/MethodTraceStats.html#M001275","(value, exclusive_time = value)","Alias for #record_data_point",2],["trace_call","NewRelic::ScopedMethodTraceStats","classes/NewRelic/ScopedMethodTraceStats.html#M001279","(call_time, exclusive_time = call_time)","",2],["trace_entry","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000928","(metric_name, time)","",2],["trace_execution_scoped","NewRelic::Agent::MethodTracer::InstanceMethods","classes/NewRelic/Agent/MethodTracer/InstanceMethods.html#M000818","(metric_names, options={})","Trace a given block with stats and keep track of the caller.   See NewRelic::Agent::MethodTracer::ClassMethods#add_method_tracer",2],["trace_execution_unscoped","NewRelic::Agent::MethodTracer::InstanceMethods","classes/NewRelic/Agent/MethodTracer/InstanceMethods.html#M000815","(metric_names, options={})","Trace a given block with stats assigned to the given metric_name.  It does not  provide scoped measurements,",2],["trace_exit","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M000929","(metric_name, time)","",2],["trace_method_execution_no_scope","NewRelic::Agent::MethodTracer::InstanceMethods","classes/NewRelic/Agent/MethodTracer/InstanceMethods.html#M000817","(metric_names, options={})","Alias for #trace_execution_unscoped",2],["transaction_sampler=","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M000882","(sampler)","",2],["truncate","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001329","(max)","",2],["truncate","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001304","(max)","Walk through the tree and truncate the segments ",2],["truncate!","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001197","()","",2],["tt_path","NewRelic::MetricParser::Controller","classes/NewRelic/MetricParser/Controller.html#M001138","()","this is used to match transaction traces to controller actions.   TT's don't have a preceding slash :P",2],["unicorn","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001084","()","",2],["unscoped_stats","NewRelic::ScopedMethodTraceStats","classes/NewRelic/ScopedMethodTraceStats.html#M001281","()","",2],["update_apdex","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000784","(stat, duration, failed)","Record an apdex value for the given stat.  non-nil 'failed' the apdex should be recorded as a failure",2],["uri","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000762","()","For the current web transaction, return the path of the URI minus the host part and query string, or",2],["uri_from_request","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000783","(request)","Make a safe attempt to get the URI, without the host and query string. ",2],["url","NewRelic::MetricParser","classes/NewRelic/MetricParser.html#M001209","()","",2],["url","NewRelic::MetricParser::Controller","classes/NewRelic/MetricParser/Controller.html#M001137","()","",2],["url","NewRelic::MetricParser::ControllerCPU","classes/NewRelic/MetricParser/ControllerCPU.html#M001146","()","",2],["url","NewRelic::MetricParser::View","classes/NewRelic/MetricParser/View.html#M001178","()","",2],["use_harvest_sampler?","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M000811","()","Override to use the periodic sampler instead of running the sampler on the minute during harvests. ",2],["use_ssl?","NewRelic::Control","classes/NewRelic/Control.html#M001051","()","",2],["use_textmate?","NewRelic::Control","classes/NewRelic/Control.html#M001040","()","True if we should view files in textmate ",2],["user","NewRelicApi::Account::AccountView","classes/NewRelicApi/Account/AccountView.html#M001348","()","",2],["user_util_stats","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M000820","()","",2],["usertime_stats","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M000822","()","",2],["validate_seed","NewRelic::Control","classes/NewRelic/Control.html#M001049","()","",2],["validate_token","NewRelic::Control","classes/NewRelic/Control.html#M001050","()","",2],["vendor_root","NewRelic::Control::Rails3","classes/NewRelic/Control/Rails3.html#M000993","()","",2],["verify_certificate?","NewRelic::Control","classes/NewRelic/Control.html#M001052","()","",2],["version","NewRelic::Control::Rails3","classes/NewRelic/Control/Rails3.html#M000994","()","",2],["webservice_call_rate_suffix","NewRelic::MetricParser::WebService","classes/NewRelic/MetricParser/WebService.html#M001183","()","",2],["with_database_metric_name","NewRelic::Agent","classes/NewRelic/Agent.html#M000961","(model, method, &block)","Yield to a block that is run with a database metric name context.  This means the Database instrumentation",2],["with_database_metric_name","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000777","(model, method)","Yield to a block that is run with a database metric name context.  This means the Database instrumentation",2],["worker_name","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M000832","()","",2],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Copyright (c) 2008-2009 New Relic, Inc.  All rights reserved.  Certain inventions disclosed in this file",3],["README.md","files/README_md.html","files/README_md.html","","New Relic RPM =============  New Relic RPM is a Ruby performance management system, developed by [New",3],["README.md","files/README_md.html","files/README_md.html","","New Relic RPM =============  New Relic RPM is a Ruby performance management system, developed by [New",3],["agent.rb","files/lib/new_relic/agent_rb.html","files/lib/new_relic/agent_rb.html","","= New Relic Agent New Relic RPM is a performance monitoring application for Ruby applications running",3],["agent.rb","files/lib/new_relic/agent/agent_rb.html","files/lib/new_relic/agent/agent_rb.html","","",3],["busy_calculator.rb","files/lib/new_relic/agent/busy_calculator_rb.html","files/lib/new_relic/agent/busy_calculator_rb.html","","This module supports calculation of actual time spent processing requests over the course of one harvest",3],["chained_call.rb","files/lib/new_relic/agent/chained_call_rb.html","files/lib/new_relic/agent/chained_call_rb.html","","This is used to allow obfuscators to be chained.   ",3],["error_collector.rb","files/lib/new_relic/agent/error_collector_rb.html","files/lib/new_relic/agent/error_collector_rb.html","","",3],["active_merchant.rb","files/lib/new_relic/agent/instrumentation/active_merchant_rb.html","files/lib/new_relic/agent/instrumentation/active_merchant_rb.html","","ActiveMerchant Instrumentation. ",3],["active_record_instrumentation.rb","files/lib/new_relic/agent/instrumentation/active_record_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/active_record_instrumentation_rb.html","","NewRelic instrumentation for ActiveRecord ",3],["authlogic.rb","files/lib/new_relic/agent/instrumentation/authlogic_rb.html","files/lib/new_relic/agent/instrumentation/authlogic_rb.html","","",3],["controller_instrumentation.rb","files/lib/new_relic/agent/instrumentation/controller_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/controller_instrumentation_rb.html","","",3],["data_mapper.rb","files/lib/new_relic/agent/instrumentation/data_mapper_rb.html","files/lib/new_relic/agent/instrumentation/data_mapper_rb.html","","NewRelic instrumentation for DataMapper For now, we have to refer to all db metrics as \"ActiveRecord\"",3],["delayed_job_instrumentation.rb","files/lib/new_relic/agent/instrumentation/delayed_job_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/delayed_job_instrumentation_rb.html","","",3],["memcache.rb","files/lib/new_relic/agent/instrumentation/memcache_rb.html","files/lib/new_relic/agent/instrumentation/memcache_rb.html","","NOTE there are multiple implementations of the MemCache client in Ruby, each with slightly different",3],["memcache.rb.~14635~","files/lib/new_relic/agent/instrumentation/memcache_rb_~14635~.html","files/lib/new_relic/agent/instrumentation/memcache_rb_~14635~.html","","# NOTE there are multiple implementations of the MemCache client in Ruby, # each with slightly different",3],["controller.rb","files/lib/new_relic/agent/instrumentation/merb/controller_rb.html","files/lib/new_relic/agent/instrumentation/merb/controller_rb.html","","",3],["errors.rb","files/lib/new_relic/agent/instrumentation/merb/errors_rb.html","files/lib/new_relic/agent/instrumentation/merb/errors_rb.html","","Hook in the notification to merb ",3],["metric_frame.rb","files/lib/new_relic/agent/instrumentation/metric_frame_rb.html","files/lib/new_relic/agent/instrumentation/metric_frame_rb.html","","A struct holding the information required to measure a controller action.  This is put on the thread",3],["net.rb","files/lib/new_relic/agent/instrumentation/net_rb.html","files/lib/new_relic/agent/instrumentation/net_rb.html","","",3],["passenger_instrumentation.rb","files/lib/new_relic/agent/instrumentation/passenger_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/passenger_instrumentation_rb.html","","",3],["rack.rb","files/lib/new_relic/agent/instrumentation/rack_rb.html","files/lib/new_relic/agent/instrumentation/rack_rb.html","","",3],["action_controller.rb","files/lib/new_relic/agent/instrumentation/rails/action_controller_rb.html","files/lib/new_relic/agent/instrumentation/rails/action_controller_rb.html","","",3],["action_web_service.rb","files/lib/new_relic/agent/instrumentation/rails/action_web_service_rb.html","files/lib/new_relic/agent/instrumentation/rails/action_web_service_rb.html","","NewRelic Agent instrumentation for WebServices ",3],["errors.rb","files/lib/new_relic/agent/instrumentation/rails/errors_rb.html","files/lib/new_relic/agent/instrumentation/rails/errors_rb.html","","",3],["action_controller.rb","files/lib/new_relic/agent/instrumentation/rails3/action_controller_rb.html","files/lib/new_relic/agent/instrumentation/rails3/action_controller_rb.html","","",3],["errors.rb","files/lib/new_relic/agent/instrumentation/rails3/errors_rb.html","files/lib/new_relic/agent/instrumentation/rails3/errors_rb.html","","",3],["sinatra.rb","files/lib/new_relic/agent/instrumentation/sinatra_rb.html","files/lib/new_relic/agent/instrumentation/sinatra_rb.html","","",3],["unicorn_instrumentation.rb","files/lib/new_relic/agent/instrumentation/unicorn_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/unicorn_instrumentation_rb.html","","",3],["method_tracer.rb","files/lib/new_relic/agent/method_tracer_rb.html","files/lib/new_relic/agent/method_tracer_rb.html","","",3],["sampler.rb","files/lib/new_relic/agent/sampler_rb.html","files/lib/new_relic/agent/sampler_rb.html","","A Sampler is used to capture meaningful metrics in a background thread  periodically.  They will either",3],["cpu_sampler.rb","files/lib/new_relic/agent/samplers/cpu_sampler_rb.html","files/lib/new_relic/agent/samplers/cpu_sampler_rb.html","","",3],["delayed_job_lock_sampler.rb","files/lib/new_relic/agent/samplers/delayed_job_lock_sampler_rb.html","files/lib/new_relic/agent/samplers/delayed_job_lock_sampler_rb.html","","",3],["memory_sampler.rb","files/lib/new_relic/agent/samplers/memory_sampler_rb.html","files/lib/new_relic/agent/samplers/memory_sampler_rb.html","","",3],["object_sampler.rb","files/lib/new_relic/agent/samplers/object_sampler_rb.html","files/lib/new_relic/agent/samplers/object_sampler_rb.html","","",3],["shim_agent.rb","files/lib/new_relic/agent/shim_agent_rb.html","files/lib/new_relic/agent/shim_agent_rb.html","","This agent is loaded by the plug when the plug-in is disabled It recreates just enough of the API to",3],["stats_engine.rb","files/lib/new_relic/agent/stats_engine_rb.html","files/lib/new_relic/agent/stats_engine_rb.html","","",3],["metric_stats.rb","files/lib/new_relic/agent/stats_engine/metric_stats_rb.html","files/lib/new_relic/agent/stats_engine/metric_stats_rb.html","","",3],["samplers.rb","files/lib/new_relic/agent/stats_engine/samplers_rb.html","files/lib/new_relic/agent/stats_engine/samplers_rb.html","","",3],["transactions.rb","files/lib/new_relic/agent/stats_engine/transactions_rb.html","files/lib/new_relic/agent/stats_engine/transactions_rb.html","","",3],["transaction_sampler.rb","files/lib/new_relic/agent/transaction_sampler_rb.html","files/lib/new_relic/agent/transaction_sampler_rb.html","","",3],["worker_loop.rb","files/lib/new_relic/agent/worker_loop_rb.html","files/lib/new_relic/agent/worker_loop_rb.html","","",3],["x","files/lib/new_relic/agent/x.html","files/lib/new_relic/agent/x.html","","------------------------------------------------------------------------ r15879 | bkayser | 2010-03-26",3],["collection_helper.rb","files/lib/new_relic/collection_helper_rb.html","files/lib/new_relic/collection_helper_rb.html","","",3],["command.rb","files/lib/new_relic/command_rb.html","files/lib/new_relic/command_rb.html","","",3],["deployments.rb","files/lib/new_relic/commands/deployments_rb.html","files/lib/new_relic/commands/deployments_rb.html","","This is a class for executing commands related to deployment  events.  It runs without loading the rails",3],["install.rb","files/lib/new_relic/commands/install_rb.html","files/lib/new_relic/commands/install_rb.html","","",3],["control.rb","files/lib/new_relic/control_rb.html","files/lib/new_relic/control_rb.html","","",3],["external.rb","files/lib/new_relic/control/external_rb.html","files/lib/new_relic/control/external_rb.html","","This is the control used when starting up in the context of  The New Relic Infrastructure Agent.  We",3],["merb.rb","files/lib/new_relic/control/merb_rb.html","files/lib/new_relic/control/merb_rb.html","","",3],["rails.rb","files/lib/new_relic/control/rails_rb.html","files/lib/new_relic/control/rails_rb.html","","Control subclass instantiated when Rails is detected.  Contains Rails specific configuration, instrumentation,",3],["rails3.rb","files/lib/new_relic/control/rails3_rb.html","files/lib/new_relic/control/rails3_rb.html","","Control subclass instantiated when Rails is detected.  Contains Rails specific configuration, instrumentation,",3],["ruby.rb","files/lib/new_relic/control/ruby_rb.html","files/lib/new_relic/control/ruby_rb.html","","A control used when no framework is detected. Looks for a newrelic.yml file in several locations including",3],["sinatra.rb","files/lib/new_relic/control/sinatra_rb.html","files/lib/new_relic/control/sinatra_rb.html","","",3],["delayed_job_injection.rb","files/lib/new_relic/delayed_job_injection_rb.html","files/lib/new_relic/delayed_job_injection_rb.html","","This installs some code to manually start the agent when a delayed job worker starts. ",3],["histogram.rb","files/lib/new_relic/histogram_rb.html","files/lib/new_relic/histogram_rb.html","","Histogram is used for organizing response times into an 'Exponential Histogram'.  Feature based in part",3],["local_environment.rb","files/lib/new_relic/local_environment_rb.html","files/lib/new_relic/local_environment_rb.html","","",3],["merbtasks.rb","files/lib/new_relic/merbtasks_rb.html","files/lib/new_relic/merbtasks_rb.html","","",3],["metric_data.rb","files/lib/new_relic/metric_data_rb.html","files/lib/new_relic/metric_data_rb.html","","",3],["metric_parser.rb","files/lib/new_relic/metric_parser_rb.html","files/lib/new_relic/metric_parser_rb.html","","",3],["action_mailer.rb","files/lib/new_relic/metric_parser/action_mailer_rb.html","files/lib/new_relic/metric_parser/action_mailer_rb.html","","",3],["active_merchant.rb","files/lib/new_relic/metric_parser/active_merchant_rb.html","files/lib/new_relic/metric_parser/active_merchant_rb.html","","",3],["active_record.rb","files/lib/new_relic/metric_parser/active_record_rb.html","files/lib/new_relic/metric_parser/active_record_rb.html","","",3],["client.rb","files/lib/new_relic/metric_parser/client_rb.html","files/lib/new_relic/metric_parser/client_rb.html","","",3],["controller.rb","files/lib/new_relic/metric_parser/controller_rb.html","files/lib/new_relic/metric_parser/controller_rb.html","","",3],["controller_cpu.rb","files/lib/new_relic/metric_parser/controller_cpu_rb.html","files/lib/new_relic/metric_parser/controller_cpu_rb.html","","",3],["errors.rb","files/lib/new_relic/metric_parser/errors_rb.html","files/lib/new_relic/metric_parser/errors_rb.html","","",3],["external.rb","files/lib/new_relic/metric_parser/external_rb.html","files/lib/new_relic/metric_parser/external_rb.html","","",3],["mem_cache.rb","files/lib/new_relic/metric_parser/mem_cache_rb.html","files/lib/new_relic/metric_parser/mem_cache_rb.html","","",3],["other_transaction.rb","files/lib/new_relic/metric_parser/other_transaction_rb.html","files/lib/new_relic/metric_parser/other_transaction_rb.html","","OtherTransaction metrics must have at least three segments: /OtherTransaction/<task>/* ",3],["view.rb","files/lib/new_relic/metric_parser/view_rb.html","files/lib/new_relic/metric_parser/view_rb.html","","",3],["web_frontend.rb","files/lib/new_relic/metric_parser/web_frontend_rb.html","files/lib/new_relic/metric_parser/web_frontend_rb.html","","The metric where the mongrel queue time is stored ",3],["web_service.rb","files/lib/new_relic/metric_parser/web_service_rb.html","files/lib/new_relic/metric_parser/web_service_rb.html","","",3],["metric_spec.rb","files/lib/new_relic/metric_spec_rb.html","files/lib/new_relic/metric_spec_rb.html","","this struct uniquely defines a metric, optionally inside the call scope of another metric ",3],["metrics.rb","files/lib/new_relic/metrics_rb.html","files/lib/new_relic/metrics_rb.html","","",3],["noticed_error.rb","files/lib/new_relic/noticed_error_rb.html","files/lib/new_relic/noticed_error_rb.html","","This class encapsulates an error that was noticed by RPM in a managed app. ",3],["episodes.rb","files/lib/new_relic/rack/episodes_rb.html","files/lib/new_relic/rack/episodes_rb.html","","",3],["metric_app.rb","files/lib/new_relic/rack/metric_app_rb.html","files/lib/new_relic/rack/metric_app_rb.html","","",3],["mongrel_rpm.ru","files/lib/new_relic/rack/mongrel_rpm_ru.html","files/lib/new_relic/rack/mongrel_rpm_ru.html","","# This is so that we don't detect a dispatcher like mongrel and think we are # monitoring it. ENV['NEWRELIC_DISPATCHER']",3],["newrelic.yml","files/lib/new_relic/rack/newrelic_yml.html","files/lib/new_relic/rack/newrelic_yml.html","","# # This file configures the Rack NewRelic Metric Application.  Place a copy of this file # in the directory",3],["rack_app.rb","files/lib/new_relic/rack_app_rb.html","files/lib/new_relic/rack_app_rb.html","","",3],["recipes.rb","files/lib/new_relic/recipes_rb.html","files/lib/new_relic/recipes_rb.html","","When installed as a plugin this is loaded automatically. When installed as a gem, you need to add  require",3],["stats.rb","files/lib/new_relic/stats_rb.html","files/lib/new_relic/stats_rb.html","","",3],["transaction_analysis.rb","files/lib/new_relic/transaction_analysis_rb.html","files/lib/new_relic/transaction_analysis_rb.html","","Add these methods to TransactionSample that enable performance analysis in the user interface. ",3],["transaction_sample.rb","files/lib/new_relic/transaction_sample_rb.html","files/lib/new_relic/transaction_sample_rb.html","","",3],["version.rb","files/lib/new_relic/version_rb.html","files/lib/new_relic/version_rb.html","","",3],["new_relic_api.rb","files/lib/new_relic_api_rb.html","files/lib/new_relic_api_rb.html","","== REST API Helpers Ruby lib for working with the New Relic API's XML interface.  Requires Rails 2.0",3],["newrelic_rpm.rb","files/lib/newrelic_rpm_rb.html","files/lib/newrelic_rpm_rb.html","","== New Relic Initialization When installed as a gem, you can activate the New Relic agent one of the",3],["all.rb","files/lib/tasks/all_rb.html","files/lib/tasks/all_rb.html","","This is required to load in task definitions from merb ",3],["install.rake","files/lib/tasks/install_rake.html","files/lib/tasks/install_rake.html","","# run unit tests for the NewRelic Agent namespace :newrelic do   desc \"install a default config/newrelic.yml",3],["tests.rake","files/lib/tasks/tests_rake.html","files/lib/tasks/tests_rake.html","","# run unit tests for the NewRelic Agent  if defined? Rake::TestTask   namespace :test do     AGENT_HOME",3]],"searchIndex":["actioncontroller","base","newrelic","agent","agent","backgroundloadingerror","busycalculator","errorcollector","forcedisconnectexception","forcerestartexception","instrumentation","activerecordinstrumentation","controllerinstrumentation","classmethods","delayedjobinstrumentation","metricframe","rack","rails3","actioncontroller","errors","sinatra","licenseexception","methodtracer","classmethods","instancemethods","posttoobigexception","sampler","unsupported","samplers","cpusampler","delayedjoblocksampler","memorysampler","base","javaheapsampler","procstatus","shellps","objectsampler","serverconnectionexception","servererror","shimagent","statsengine","metricstats","samplers","scopestackelement","transactions","transactionsamplebuilder","transactionsampler","workerloop","apdexstats","basicstats","chainedcall","collectionhelper","command","commandfailure","deployments","install","control","external","merb","rails","rails3","ruby","sinatra","delayedjobinjection","histogram","bucket","shim","localenvironment","merbbootloader","methodtracestats","metricdata","metricparser","actionmailer","activemerchant","activerecord","client","controller","controllercpu","errors","external","memcache","othertransaction","view","webfrontend","webservice","metricspec","metrics","noticederror","rack","episodes","metricapp","status","scopedmethodtracestats","stats","statsbase","transactionanalysis","segmentsummary","transactionsample","compositesegment","fakesegment","idgenerator","segment","summarysegment","versionnumber","newrelicapi","account","accountusage","accountview","application","agent","deployment","subscription","thresholdvalue","user","object","<<()","<=>()","<=>()","==()","[]()","[]()","[]=()","[]=()","abort_transaction!()","abort_transaction!()","abort_transaction!()","absent?()","action_name()","action_name()","action_name()","add_called_segment()","add_custom_parameters()","add_custom_parameters()","add_custom_parameters()","add_harvest_sampler()","add_instrumentation()","add_instrumentation()","add_method_tracer()","add_request_parameters()","add_sampler()","add_segments()","add_transaction_tracer()","after_fork()","after_fork()","after_fork()","agent_enabled?()","all?()","all?()","all?()","analyze()","apdex_metric_path()","apdex_score()","apdex_t()","api_server()","app()","app_names()","append_environment_info()","append_environment_info()","append_environment_info()","append_environment_info()","append_environment_value()","append_gem_list()","append_plugin_list()","application_health()","as_percentage()","as_percentage_of()","authenticate()","average_call_time()","average_exclusive_time()","average_exclusive_time()","average_response_time()","average_time()","average_value()","base_metric_name()","base_metric_name()","begin_time()","begin_time=()","breakdown_data()","busy_count()","call()","call()","call()","call()","call()","call()","call_rate_suffix()","call_rate_suffix()","call_rate_suffix()","call_with_newrelic()","call_without_newrelic()","call_without_newrelic()","called_segments()","called_segments=()","calls_per_minute()","can_run?()","capture_params()","category()","category()","clear_stats()","close_connections()","color_value()","command()","command()","config_file()","config_file()","content()","controller_name()","controller_name()","controller_name()","convert_to_ip_address()","count_segments()","count_segments()","cpu_metric()","create_segment()","current()","current_sample_id()","custom_parameters()","custom_parameters()","database_metric_name()","database_time()","delayed_worker=()","detail_segments=()","developer_mode?()","developer_name()","developer_name()","developer_name()","developer_name()","developer_name()","developer_name()","developer_name()","developer_name()","developer_name()","developer_name()","developer_name()","disable()","disable_all_tracing()","disable_sql_recording()","disable_transaction_tracing()","dispatcher()","dispatcher_finish()","dispatcher_instance_id()","dispatcher_instance_id()","dispatcher_start()","draw_with_newrelic_map()","drilldown_url()","duration()","duration()","duration()","each_segment()","each_segment()","end_time()","end_time=()","end_trace()","end_transaction()","end_transaction()","env()","env()","env()","env()","env()","episodes_enabled?()","eql?()","eql?()","eql?()","err()","exclusive_duration()","exclusive_time_percentage()","exclusive_time_percentage()","explain_sql()","fetch()","find_segment()","find_segment()","finish_trace()","for_metric_named()","fraction_of()","framework()","freeze()","freeze()","from_json()","gateway_name()","gather_environment_info()","get_apdex()","get_connection()","get_custom_stats()","get_memory()","get_memory()","get_memory()","get_sample()","get_stats()","get_stats()","get_stats_no_scope()","get_stats_no_scope()","handle_exception_in_explain()","harvest()","harvest_busy()","harvest_errors()","harvest_timeslice_data()","hash()","hash()","hash()","host()","hosts_all?()","http_connection()","ignore()","ignore_error_filter()","ignore_error_filter()","ignore_transaction()","ignore_transaction()","ignored?()","included()","increment_count()","info()","inherited()","inherited()","init_config()","init_config()","init_config()","init_config()","init_config()","init_config()","init_plugin()","initialize_with_new_relic()","install_developer_mode()","install_devmode_route()","install_episodes()","install_instrumentation()","install_shim()","install_shim()","install_shim()","instance()","instance()","instance()","instrument_method()","is_action_mailer?()","is_active_merchant?()","is_active_merchant_gateway?()","is_active_merchant_operation?()","is_active_record?()","is_compiler?()","is_controller?()","is_controller_cpu?()","is_error?()","is_execution_traced?()","is_memcache?()","is_render?()","is_reset?()","is_view?()","is_web_service?()","keep_running()","last_segment()","legend_name()","legend_name()","legend_name()","legend_name()","legend_name()","legend_name()","library()","license_key()","load_instrumentation_files()","load_samplers()","local_env()","lock()","locked_jobs()","log()","log()","log()","log()","log!()","log_path()","log_path()","log_path()","log_with_capture_sql()","log_with_newrelic_instrumentation()","log_with_newrelic_instrumentation()","logger()","logger()","lookup_stat()","lookup_stats()","major_version()","manual_start()","manual_start()","max_millis()","measure()","memcache_key_snippet()","merge()","merge!()","merge_defaults()","merge_options()","method_missing()","metric_name()","metric_spec()","metric_spec=()","metrics()","min_millis()","minor_version()","model_class()","mongrel()","monitor_mode?()","multi_threaded?()","multiply_by()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_instance()","newrelic_ignore()","newrelic_ignore_apdex()","newrelic_metric_path()","newrelic_metric_path()","newrelic_metric_path()","newrelic_notice_error()","newrelic_notice_error()","newrelic_request_headers()","newrelic_request_headers()","newrelic_response_code()","newrelic_root()","newrelic_root()","next_id()","normalize_params()","notice_error()","notice_error()","notice_error()","notice_first_scope_push()","notice_nosql()","notice_pop_scope()","notice_profile()","notice_push_scope()","notice_scope_empty()","notice_sql()","notice_transaction()","notice_transaction_cpu_time()","obfuscate_sql()","obfuscated_sql()","omit_segments_with()","operation()","operation()","operation()","operation_name()","original_spec()","params()","params=()","params=()","parent_segment=()","parse()","path()","path_string()","path_string()","peek_scope()","perform_action_with_newrelic_trace()","pie_chart_label()","pie_chart_label()","platform()","platform()","poll()","poll()","poll()","poll()","poll()","pop()","pop_scope()","pop_trace_execution_flag()","pop_trace_execution_flag()","post_size_limit()","prepare_to_send()","proc_status_file()","process()","process()","process()","process_action()","profiling=()","profiling?()","profiling_available?()","proxy_server()","push()","push_scope()","push_trace_execution_flag()","push_trace_execution_flag()","rails_vendor_root()","rails_version()","record_apdex()","record_apdex_f()","record_apdex_s()","record_apdex_t()","record_data_point()","record_multiple_data_points()","record_multiple_data_points()","recorded_metrics()","recording_web_transaction?()","recording_web_transaction?()","referer()","referer()","referer_from_request()","remove_transaction_sampler()","render_time()","request_with_newrelic_trace()","requests_per_minute()","rescue_action_with_newrelic_trace()","reset()","reset()","reset!()","reset!()","reset_stats()","reset_stats()","reset_stats()","root()","root()","root()","root()","root_segment=()","round!()","route_eval_with_newrelic()","run()","run()","run()","run()","run()","run_task()","sample()","sample_id()","sampler_classes()","sampling_rate=()","scope_depth()","scope_depth()","scope_name()","scope_name=()","segment_0()","segment_1()","segment_2()","segment_3()","segment_4()","segment_5()","segments()","server()","server_from_host()","set_profile()","set_record_sql()","set_record_tt()","set_sql_obfuscator()","set_sql_obfuscator()","set_transaction_cpu_time()","set_transaction_info()","settings()","setup_log()","short_name()","short_name()","short_name()","short_name()","short_name()","short_name()","short_name()","short_name()","short_name()","shutdown()","shutdown()","shutdown()","snapshot()","split()","sql_segments()","standard_deviation()","start()","start()","start_agent()","start_sampler_thread()","start_time()","start_transaction()","start_transaction()","start_transaction()","started?()","stats()","stats()","stats()","stats()","stats_hash()","stop()","strip_nr_from_backtrace()","sub()","sum_merge!()","summary()","supported_on_this_platform?()","supported_on_this_platform?()","supported_on_this_platform?()","supported_on_this_platform?()","supported_on_this_platform?()","sync_startup()","system_util_stats()","systemtime_stats()","task()","template_label()","time_percentage()","time_str()","timestamp()","tiny_version()","to_debug_str()","to_json()","to_json()","to_json()","to_json()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s_compact()","to_s_compact()","to_stdout()","to_stdout()","to_stdout()","to_stdout()","tooltip_name()","tooltip_name()","tooltip_name()","tooltip_name()","tooltip_name()","total_call_time_per_minute()","total_time_percentage()","trace_call()","trace_call()","trace_entry()","trace_execution_scoped()","trace_execution_unscoped()","trace_exit()","trace_method_execution_no_scope()","transaction_sampler=()","truncate()","truncate()","truncate!()","tt_path()","unicorn()","unscoped_stats()","update_apdex()","uri()","uri_from_request()","url()","url()","url()","url()","use_harvest_sampler?()","use_ssl?()","use_textmate?()","user()","user_util_stats()","usertime_stats()","validate_seed()","validate_token()","vendor_root()","verify_certificate?()","version()","webservice_call_rate_suffix()","with_database_metric_name()","with_database_metric_name()","worker_name()","license","readme.md","readme.md","agent.rb","agent.rb","busy_calculator.rb","chained_call.rb","error_collector.rb","active_merchant.rb","active_record_instrumentation.rb","authlogic.rb","controller_instrumentation.rb","data_mapper.rb","delayed_job_instrumentation.rb","memcache.rb","memcache.rb.~14635~","controller.rb","errors.rb","metric_frame.rb","net.rb","passenger_instrumentation.rb","rack.rb","action_controller.rb","action_web_service.rb","errors.rb","action_controller.rb","errors.rb","sinatra.rb","unicorn_instrumentation.rb","method_tracer.rb","sampler.rb","cpu_sampler.rb","delayed_job_lock_sampler.rb","memory_sampler.rb","object_sampler.rb","shim_agent.rb","stats_engine.rb","metric_stats.rb","samplers.rb","transactions.rb","transaction_sampler.rb","worker_loop.rb","x","collection_helper.rb","command.rb","deployments.rb","install.rb","control.rb","external.rb","merb.rb","rails.rb","rails3.rb","ruby.rb","sinatra.rb","delayed_job_injection.rb","histogram.rb","local_environment.rb","merbtasks.rb","metric_data.rb","metric_parser.rb","action_mailer.rb","active_merchant.rb","active_record.rb","client.rb","controller.rb","controller_cpu.rb","errors.rb","external.rb","mem_cache.rb","other_transaction.rb","view.rb","web_frontend.rb","web_service.rb","metric_spec.rb","metrics.rb","noticed_error.rb","episodes.rb","metric_app.rb","mongrel_rpm.ru","newrelic.yml","rack_app.rb","recipes.rb","stats.rb","transaction_analysis.rb","transaction_sample.rb","version.rb","new_relic_api.rb","newrelic_rpm.rb","all.rb","install.rake","tests.rake"]}}