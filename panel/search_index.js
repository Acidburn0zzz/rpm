var search_data = {"index":{"searchIndex":["actioncontroller","base","agent","agent","classmethods","instancemethods","connect","start","startworkerthread","backgroundloadingerror","beaconconfiguration","browsermonitoring","busycalculator","errorcollector","noticeerror","forcedisconnectexception","forcerestartexception","instrumentation","activerecordinstrumentation","controllerinstrumentation","classmethods","datamapperinstrumentation","memcache","metricframe","queuetime","rack","rails3","actioncontroller","errors","sinatra","licenseexception","methodtracer","classmethods","addmethodtracer","instancemethods","traceexecutionscoped","posttoobigexception","sampler","unsupported","samplers","cpusampler","delayedjoblocksampler","memorysampler","base","javaheapsampler","procstatus","shellps","objectsampler","serverconnectionexception","servererror","shimagent","statsengine","metricstats","synchronizedhash","samplers","scopestackelement","transactions","transactionsamplebuilder","transactionsampler","workerloop","apdexstats","basicstats","chainedcall","collectionhelper","command","commandfailure","deployments","install","control","classmethods","configuration","frameworks","external","merb","rails","rails3","ruby","sinatra","instancemethods","instrumentation","loggingmethods","profiling","servermethods","delayedjobinjection","histogram","bucket","shim","instrumentation","actsassolrinstrumentation","parsermethodsinstrumentation","localenvironment","merbbootloader","methodtracestats","metricdata","metricspec","metrics","noticederror","rack","browsermonitoring","developermode","metricapp","status","railtie","scopedmethodtracestats","stats","statsbase","transactionanalysis","segmentsummary","transactionsample","compositesegment","fakesegment","segment","summarysegment","urlrule","ruleset","versionnumber","object","<<()","<=>()","<=>()","==()","[]()","[]()","[]()","[]=()","[]=()","[]=()","_call()","_install_instrumentation()","abort_transaction!()","abort_transaction!()","abort_transaction!()","absent?()","add_called_segment()","add_custom_parameters()","add_custom_parameters()","add_custom_parameters()","add_harvest_sampler()","add_instrumentation()","add_instrumentation()","add_method_tracer()","add_random_sample_to()","add_request_parameters()","add_sampler()","add_samples_to()","add_segments()","add_to_error_queue()","add_transaction_tracer()","after_fork()","after_fork()","after_fork()","after_fork()","after_fork_with_newrelic()","agent_enabled?()","agent_instance()","already_started?()","analyze()","any_unrecognized_keys?()","apdex_f()","apdex_f_threshold?()","apdex_score()","apdex_t()","api_server()","app()","app_names()","append_backtrace()","append_environment_info()","append_environment_info()","append_environment_info()","append_environment_value()","append_gem_list()","append_new_message()","append_plugin_list()","apply()","as_percentage()","as_percentage_of()","assemble_code_header()","autoinstrument_source()","average_call_time()","average_exclusive_time()","average_exclusive_time()","average_response_time()","average_time()","average_value()","begin_time()","begin_time=()","breakdown_data()","browser_monitoring_auto_instrument?()","browser_timing_footer()","browser_timing_footer()","browser_timing_footer()","browser_timing_header()","browser_timing_header()","browser_timing_header()","build_browser_timing_header()","build_load_file_js()","bundler_gem_list()","busy_count()","call()","call()","call()","call()","call()","call()","call()","call_with_newrelic()","call_without_newrelic()","call_without_newrelic()","called_segments()","called_segments=()","calls_per_minute()","can_run?()","capture_params()","capture_segment_trace()","catch_errors()","cert_file_path()","check_config_and_start_agent()","check_for_illegal_keys!()","check_for_push_scope_and_metric()","check_server_connection=()","check_transaction_sampler_status()","checked_calculation()","clear()","clear_stats()","close_connections()","code_to_eval()","command()","command()","config_file()","config_file()","config_transaction_tracer()","configure_error_collector!()","configure_transaction_tracer!()","connect_in_foreground()","connect_settings()","connect_to_server()","connected?()","content()","control()","convert_to_ip_address()","correct_license_length()","count_segments()","count_segments()","create_and_run_worker_loop()","create_segment()","current()","current_metric()","current_sample_id()","custom_parameters()","custom_parameters()","custom_params_from_opts()","database_metric_name()","database_time()","default_metric_name_code()","deferred_work!()","delete()","delete_if()","detail_segments=()","developer_mode?()","disable()","disable_all_tracing()","disable_sql_recording()","disable_transaction_tracing()","disabled?()","disabled?()","disconnect()","dispatcher()","dispatcher_finish()","dispatcher_instance_id()","dispatcher_instance_id()","dispatcher_start()","duration()","duration()","duration()","each_segment()","each_segment()","enable()","enable_random_samples!()","end_time()","end_time=()","end_trace()","end_transaction()","end_transaction()","env()","env()","env()","env()","env()","environment_for_connect()","eql?()","eql?()","eql?()","err()","error_is_ignored?()","error_params_from_options()","exception_info()","exclusive_duration()","exclusive_time_percentage()","exclusive_time_percentage()","expand_min_max_to()","explain_sql()","extract_source()","extract_stack_trace()","fetch()","fetch_from_options()","filtered_by_error_filter?()","filtered_error?()","find_class_in_object_space()","find_segment()","find_segment()","finish_setup()","finish_trace()","fraction_of()","framework()","freeze()","freeze()","gather_ar_adapter_info()","gather_architecture_info()","gather_cpu_info()","gather_db_info()","gather_dm_adapter_info()","gather_environment_info()","gather_jruby_info()","gather_os_info()","gather_revision_info()","gather_ruby_info()","gather_system_info()","get_apdex()","get_connection()","get_custom_stats()","get_memory()","get_memory()","get_memory()","get_metric_stats()","get_retry_period()","get_sample()","get_stats()","get_stats()","get_stats_no_scope()","get_stats_no_scope()","get_stats_scoped()","get_stats_unscoped()","handle_exception_in_explain()","handle_force_disconnect()","handle_force_restart()","handle_license_error()","handle_other_error()","handle_server_connection_problem()","harvest()","harvest_busy()","harvest_errors()","harvest_timeslice_data()","has_correct_license_key?()","has_license_key?()","hash()","hash()","hash()","http_connection()","ignore()","ignore_error_filter()","ignore_error_filter()","ignore_transaction()","ignore_transaction()","ignored?()","included()","included()","included()","increment_count()","increment_error_count!()","increment_retry_period!()","info()","inherited()","inherited()","init_config()","init_config()","init_config()","init_config()","init_config()","init_plugin()","initialize_with_new_relic()","install_browser_monitoring()","install_developer_mode()","install_exit_handler()","install_instrumentation()","install_shim()","install_shim()","instance()","instance()","instance()","instrument_method()","is_execution_traced?()","is_reset?()","is_sql_recorded?()","is_transaction_traced?()","is_web_transaction?()","javascript_header()","keep_running()","license_bytes()","license_key()","load_instrumentation_files()","load_samplers()","local_env()","lock()","locked_jobs()","log()","log()","log()","log()","log!()","log!()","log!()","log_app_names()","log_connection!()","log_dispatcher()","log_error()","log_errors()","log_file_name()","log_if()","log_path()","log_seed_token()","log_sql_transmission_warning?()","log_unless()","log_version_and_pid()","log_with_newrelic_instrumentation()","log_with_newrelic_instrumentation()","log_with_newrelic_instrumentation()","log_worker_loop_start()","logger()","logger()","lookup_stat()","lookup_stats()","main_stat()","major_version()","manual_start()","max_millis()","memcache_key_snippet()","merge()","merge!()","merge_attributes()","merge_defaults()","merge_options()","method_with_push_scope()","method_without_push_scope()","metric_name()","metric_spec()","metric_spec=()","metrics()","midpoint()","min_millis()","min_time_less?()","minor_version()","mongrel()","monitor_mode?()","monitoring?()","multi_threaded?()","multiply_by()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_instance()","newrelic_ignore()","newrelic_ignore_apdex()","newrelic_method_exists?()","newrelic_metric_path()","newrelic_metric_path()","newrelic_metric_path()","newrelic_notice_error()","newrelic_notice_error()","newrelic_request_headers()","newrelic_request_headers()","newrelic_response_code()","newrelic_root()","newrelic_root()","normalize_params()","normalized_request_and_custom_params()","notice_error()","notice_error()","notice_error()","notice_first_scope_push()","notice_nosql()","notice_pop_scope()","notice_profile()","notice_push_scope()","notice_scope_empty()","notice_sql()","notice_transaction()","notice_transaction_cpu_time()","notify_log_file_location()","obfuscate_sql()","obfuscated_sql()","omit_segments_with()","original_spec()","over_queue_limit?()","params()","params=()","params=()","parent_segment=()","parse_frontend_headers()","parse_query_with_newrelic()","path()","path_string()","path_string()","peek_scope()","perform_action_with_newrelic_trace()","platform()","platform()","poll()","poll()","poll()","poll()","poll()","pop()","pop_flag!()","pop_scope()","pop_trace_execution_flag()","pop_trace_execution_flag()","post_size_limit()","prepare_to_send()","proc_status_file()","process()","process()","process()","process_action()","profiling=()","profiling?()","profiling_available?()","proxy_server()","push()","push_flag!()","push_scope()","push_trace_execution_flag()","push_trace_execution_flag()","query_server_for_configuration()","rails_gem_list()","rails_vendor_root()","rails_version()","record_apdex()","record_apdex()","record_apdex_f()","record_apdex_s()","record_apdex_t()","record_data_point()","record_multiple_data_points()","record_multiple_data_points()","record_transaction()","record_transaction()","recorded_metrics()","recording_web_transaction?()","recording_web_transaction?()","referer()","referer()","referer_from_request()","remove_transaction_sampler()","render_time()","request_params_from_opts()","request_with_newrelic_trace()","requests_per_minute()","rescue_action_with_newrelic_trace()","reset()","reset()","reset!()","reset_stats()","reset_stats()","reset_stats()","resolve_ip_address()","root()","root()","root()","root()","route_eval_with_newrelic()","run()","run()","run()","run()","run()","run_task()","sample()","sample_id()","sampler_classes()","sampler_config()","sampling_rate=()","scope_depth()","scope_depth()","scope_name()","scope_name=()","send_data_on_exit()","sense_method()","server()","server_from_host()","set_collector_host!()","set_deduct_call_time_based_on_metric()","set_if_nil()","set_profile()","set_record_sql()","set_record_tt()","set_sql_obfuscator()","set_sql_obfuscator()","set_sql_recording!()","set_transaction_cpu_time()","set_transaction_info()","settings()","setup_log()","should_exit_notice_error?()","should_instrument?()","should_keep_retrying?()","should_log?()","should_replace_begin_time?()","should_replace_end_time?()","should_retry?()","shutdown()","shutdown()","shutdown()","slowest_sample?()","snapshot()","split()","sql_segments()","stack_min_max_from()","standard_deviation()","start()","start()","start_agent()","start_sampler_thread()","start_time()","start_transaction()","start_transaction()","start_transaction()","started?()","stat_engine()","stats()","stats()","stats()","stats()","stats_hash()","stop()","store_random_sample()","store_sample()","store_sample_for_developer_mode()","store_slowest_sample()","strip_nr_from_backtrace()","sub()","sum_attributes()","sum_merge!()","summary()","supported_on_this_platform?()","supported_on_this_platform?()","supported_on_this_platform?()","supported_on_this_platform?()","supported_on_this_platform?()","sync_startup()","system_util_stats()","systemtime_stats()","time_percentage()","time_str()","timestamp()","tiny_version()","to_debug_str()","to_json()","to_json()","to_json()","to_json()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s_compact()","to_s_compact()","to_stdout()","to_stdout()","to_stdout()","to_stdout()","to_stdout()","total_call_time_per_minute()","total_time_percentage()","trace_call()","trace_call()","trace_disabled?()","trace_entry()","trace_execution_scoped()","trace_execution_scoped_footer()","trace_execution_scoped_header()","trace_execution_unscoped()","trace_exit()","trace_method_execution_no_scope()","traced?()","traced_method_exists?()","transaction_sampler=()","tried_to_connect?()","truncate()","truncate()","truncate!()","truncate_message()","truncate_samples()","ui_name()","unicorn()","unrecognized_keys()","update_apdex()","update_boundaries()","update_totals()","uri()","uri_from_request()","uri_ref_and_root()","use_harvest_sampler?()","use_ssl?()","use_textmate?()","user_util_stats()","usertime_stats()","using_forking_dispatcher?()","using_jruby?()","using_rubinius?()","using_sinatra?()","validate_options()","validate_seed()","validate_settings()","validate_token()","vendor_root()","verify_certificate?()","version()","weird_ruby?()","with_database_metric_name()","with_database_metric_name()","worker_name()","working_jruby?()","license","readme.rdoc","conditional_vendored_dependency_detection.rb","conditional_vendored_metric_parser.rb","agent.rb","agent.rb","beacon_configuration.rb","browser_monitoring.rb","busy_calculator.rb","chained_call.rb","error_collector.rb","active_merchant.rb","acts_as_solr.rb","authlogic.rb","controller_instrumentation.rb","data_mapper.rb","delayed_job_instrumentation.rb","memcache.rb","controller.rb","errors.rb","metric_frame.rb","net.rb","passenger_instrumentation.rb","queue_time.rb","rack.rb","action_controller.rb","action_web_service.rb","active_record_instrumentation.rb","errors.rb","action_controller.rb","active_record_instrumentation.rb","errors.rb","sinatra.rb","sunspot.rb","unicorn_instrumentation.rb","method_tracer.rb","sampler.rb","cpu_sampler.rb","delayed_job_lock_sampler.rb","memory_sampler.rb","object_sampler.rb","shim_agent.rb","stats_engine.rb","metric_stats.rb","samplers.rb","transactions.rb","transaction_sample_builder.rb","transaction_sampler.rb","worker_loop.rb","collection_helper.rb","command.rb","deployments.rb","install.rb","control.rb","class_methods.rb","configuration.rb","external.rb","merb.rb","rails.rb","rails3.rb","ruby.rb","sinatra.rb","instance_methods.rb","instrumentation.rb","logging_methods.rb","profiling.rb","server_methods.rb","delayed_job_injection.rb","histogram.rb","local_environment.rb","merbtasks.rb","metric_data.rb","metric_spec.rb","metrics.rb","noticed_error.rb","browser_monitoring.rb","developer_mode.rb","metric_app.rb","mongrel_rpm.ru","newrelic.yml","rack_app.rb","recipes.rb","stats.rb","timer_lib.rb","transaction_analysis.rb","transaction_sample.rb","url_rule.rb","version.rb","newrelic_rpm.rb","all.rb","install.rake","tests.rake"],"longSearchIndex":["lib/new_relic/agent/instrumentation/rails3/action_controller.rb","actioncontroller","newrelic","newrelic::agent","newrelic::agent::agent","newrelic::agent::agent","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent::errorcollector","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent::instrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation","newrelic::agent::instrumentation::rails3","newrelic::agent::instrumentation::rails3","newrelic::agent::instrumentation","newrelic::agent","newrelic::agent","newrelic::agent::methodtracer","newrelic::agent::methodtracer::classmethods","newrelic::agent::methodtracer","newrelic::agent::methodtracer::instancemethods","newrelic::agent","newrelic::agent","newrelic::agent::sampler","newrelic::agent","newrelic::agent::samplers","newrelic::agent::samplers","newrelic::agent::samplers","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent::statsengine","newrelic::agent::statsengine::metricstats","newrelic::agent::statsengine","newrelic::agent::statsengine","newrelic::agent::statsengine","newrelic::agent","newrelic::agent","newrelic::agent","newrelic","newrelic","newrelic","newrelic","newrelic","newrelic::command","newrelic::command","newrelic::command","newrelic","newrelic::control","newrelic::control","newrelic::control","newrelic::control::frameworks","newrelic::control::frameworks","newrelic::control::frameworks","newrelic::control::frameworks","newrelic::control::frameworks","newrelic::control::frameworks","newrelic::control","newrelic::control","newrelic::control","newrelic::control","newrelic::control","newrelic","newrelic","newrelic::histogram","newrelic::histogram","newrelic","newrelic::instrumentation","newrelic::instrumentation::actsassolrinstrumentation","newrelic","newrelic","newrelic","newrelic","newrelic","newrelic","newrelic","newrelic","newrelic::rack","newrelic::rack","newrelic::rack","newrelic::rack","newrelic","newrelic","newrelic","newrelic","newrelic","newrelic::transactionanalysis","newrelic","newrelic::transactionsample","newrelic::transactionsample","newrelic::transactionsample","newrelic::transactionsample","newrelic","newrelic::urlrule","newrelic","lib/new_relic/agent/instrumentation/delayed_job_instrumentation.rb","newrelic::transactionanalysis::segmentsummary","newrelic::metricspec","newrelic::versionnumber","newrelic::metricspec","newrelic::agent::statsengine::metricstats::synchronizedhash","newrelic::control::configuration","newrelic::transactionsample::segment","newrelic::agent::statsengine::metricstats::synchronizedhash","newrelic::control::configuration","newrelic::transactionsample::segment","newrelic::rack::developermode","newrelic::control::frameworks::rails","newrelic::agent","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::stats","newrelic::transactionsample::segment","newrelic::agent","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::statsengine::samplers","newrelic::agent","newrelic::control::instrumentation","newrelic::agent::methodtracer::classmethods","newrelic::agent::transactionsampler","newrelic::agent","newrelic::agent::statsengine::samplers","newrelic::agent::transactionsampler","newrelic::transactionsample::summarysegment","newrelic::agent::errorcollector::noticeerror","newrelic::agent::instrumentation::controllerinstrumentation::classmethods","newrelic::agent","newrelic::agent::agent::instancemethods","newrelic::agent::shimagent","object","object","newrelic::control::instancemethods","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::agent::instancemethods::start","newrelic::transactionsample","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::start","newrelic::stats","newrelic::control::configuration","newrelic::control::servermethods","newrelic::control::instancemethods","newrelic::control::configuration","newrelic::agent::transactionsampler","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails3","newrelic::control::instancemethods","newrelic::localenvironment","newrelic::localenvironment","newrelic::agent::transactionsampler","newrelic::localenvironment","newrelic::urlrule","newrelic::stats","newrelic::stats","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::rack::browsermonitoring","newrelic::stats","newrelic::stats","newrelic::transactionanalysis::segmentsummary","newrelic::stats","newrelic::transactionanalysis::segmentsummary","newrelic::stats","newrelic::statsbase","newrelic::statsbase","newrelic::transactionanalysis","newrelic::control::configuration","newrelic::agent","newrelic::agent::browsermonitoring","newrelic::agent::shimagent","newrelic::agent","newrelic::agent::browsermonitoring","newrelic::agent::shimagent","newrelic::agent::beaconconfiguration","newrelic::agent::beaconconfiguration","newrelic::control::instancemethods","newrelic::agent::busycalculator","newrelic::agent::instrumentation::rack","newrelic::agent::instrumentation::rack","newrelic::chainedcall","newrelic::rack::browsermonitoring","newrelic::rack::developermode","newrelic::rack::metricapp","newrelic::rack::status","newrelic::agent::instrumentation::rack","newrelic::agent::instrumentation::rack","newrelic::agent::instrumentation::rack","newrelic::transactionsample::segment","newrelic::transactionsample::segment","newrelic::stats","newrelic::agent::samplers::memorysampler::base","newrelic::control::configuration","newrelic::agent::transactionsampler","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::control::servermethods","newrelic::agent::agent::instancemethods::start","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::instrumentation::metricframe","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::stats","newrelic::agent::statsengine::metricstats::synchronizedhash","newrelic::agent::statsengine::metricstats","newrelic::transactionsample","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::command::deployments","newrelic::command::install","newrelic::control::frameworks::ruby","newrelic::control::instancemethods","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::connect","newrelic::agent::agent::instancemethods::connect","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::connect","newrelic::agent::agent::instancemethods::connect","newrelic::agent::agent::instancemethods","newrelic::command::install","newrelic::agent::errorcollector","newrelic::control::servermethods","newrelic::agent::agent::instancemethods::start","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::transactionsample","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::transactionsampler","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::errorcollector::noticeerror","newrelic::agent::instrumentation::metricframe","newrelic::transactionanalysis","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::agent::statsengine::metricstats::synchronizedhash","newrelic::agent::statsengine::metricstats::synchronizedhash","newrelic::transactionsample::compositesegment","newrelic::control::configuration","newrelic::agent::transactionsampler","newrelic::agent","newrelic::agent","newrelic::agent","newrelic::agent::agent::instancemethods::start","newrelic::agent::errorcollector::noticeerror","newrelic::agent::agent::instancemethods::connect","newrelic::control::configuration","newrelic::agent::busycalculator","newrelic::control::configuration","newrelic::localenvironment","newrelic::agent::busycalculator","newrelic::stats","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::agent::transactionsampler","newrelic::agent::agent::instancemethods::connect","newrelic::statsbase","newrelic::statsbase","newrelic::transactionsample::segment","newrelic::agent::agent::instancemethods","newrelic::agent::statsengine::transactions","newrelic::control::frameworks::merb","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails3","newrelic::control::frameworks::ruby","newrelic::control::frameworks::sinatra","newrelic::agent::agent::instancemethods::connect","newrelic::metricdata","newrelic::metricspec","newrelic::versionnumber","newrelic::command","newrelic::agent::errorcollector::noticeerror","newrelic::agent::errorcollector::noticeerror","newrelic::agent::errorcollector::noticeerror","newrelic::transactionsample::segment","newrelic::stats","newrelic::transactionanalysis::segmentsummary","newrelic::stats","newrelic::transactionsample::segment","newrelic::agent::errorcollector::noticeerror","newrelic::agent::errorcollector::noticeerror","newrelic::control::configuration","newrelic::agent::errorcollector::noticeerror","newrelic::agent::errorcollector::noticeerror","newrelic::agent::errorcollector::noticeerror","newrelic::localenvironment","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::agent::agent::instancemethods::connect","newrelic::agent::transactionsamplebuilder","newrelic::stats","newrelic::control::instancemethods","newrelic::agent::transactionsamplebuilder","newrelic::statsbase","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::localenvironment","newrelic::stats","newrelic::transactionsample","newrelic::agent::statsengine::metricstats","newrelic::agent::samplers::memorysampler::javaheapsampler","newrelic::agent::samplers::memorysampler::procstatus","newrelic::agent::samplers::memorysampler::shellps","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::agent::instancemethods::connect","newrelic::agent::samplers::memorysampler::base","newrelic::agent","newrelic::agent::statsengine::metricstats","newrelic::agent","newrelic::agent::statsengine::metricstats","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::transactionsample::segment","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::agent::agent::instancemethods::connect","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::agent::transactionsampler","newrelic::agent::busycalculator","newrelic::agent::errorcollector","newrelic::agent::statsengine::metricstats","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::start","newrelic::metricdata","newrelic::metricspec","newrelic::versionnumber","newrelic::control::servermethods","newrelic::agent::errorcollector","newrelic::agent","newrelic::agent::errorcollector","newrelic::agent::transactionsamplebuilder","newrelic::agent::transactionsampler","newrelic::agent::transactionsamplebuilder","newrelic::agent::instrumentation::activerecordinstrumentation","newrelic::agent::instrumentation::activerecordinstrumentation","newrelic::agent::instrumentation::datamapperinstrumentation","newrelic::methodtracestats","newrelic::agent::errorcollector::noticeerror","newrelic::agent::agent::instancemethods::connect","newrelic::command","newrelic::agent::sampler","newrelic::command","newrelic::control::frameworks::external","newrelic::control::frameworks::merb","newrelic::control::frameworks::rails","newrelic::control::frameworks::ruby","newrelic::control::frameworks::sinatra","newrelic::control::instancemethods","object","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails","newrelic::agent::agent::instancemethods::start","newrelic::control::instrumentation","newrelic::control::frameworks::rails","newrelic::control::instrumentation","newrelic::agent::agent::classmethods","newrelic::agent::shimagent","newrelic::control::classmethods","newrelic::agent::instrumentation::memcache","newrelic::agent","newrelic::stats","newrelic::agent","newrelic::agent","newrelic::agent::instrumentation::metricframe","newrelic::agent::beaconconfiguration","newrelic::agent::workerloop","newrelic::agent::beaconconfiguration","newrelic::control::configuration","newrelic::control::instrumentation","newrelic::control::instrumentation","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::workerloop","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::agent::instancemethods","newrelic::agent::statsengine","newrelic::agent::workerloop","newrelic::control::loggingmethods","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails3","newrelic::control::loggingmethods","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::connect","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::connect","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::control::loggingmethods","newrelic::agent::agent::instancemethods::start","newrelic::control::loggingmethods","newrelic::agent::agent::instancemethods::connect","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::start","newrelic::agent::instrumentation::activerecordinstrumentation","newrelic::agent::instrumentation::activerecordinstrumentation","newrelic::agent::instrumentation::datamapperinstrumentation","newrelic::agent::agent::instancemethods::startworkerthread","newrelic::agent","newrelic::control::frameworks::rails3","newrelic::agent::statsengine::metricstats","newrelic::agent::statsengine::metricstats","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::versionnumber","newrelic::agent","newrelic::histogram::bucket","newrelic::agent::instrumentation::memcache","newrelic::stats","newrelic::stats","newrelic::stats","newrelic::control::configuration","newrelic::control::configuration","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::instrumentation::metricframe","newrelic::metricdata","newrelic::metricdata","newrelic::agent::statsengine::metricstats","newrelic::stats","newrelic::histogram::bucket","newrelic::stats","newrelic::versionnumber","newrelic::localenvironment","newrelic::control::configuration","newrelic::agent::agent::instancemethods::start","newrelic::control::configuration","newrelic::stats","newrelic::agent::agent","newrelic::agent::beaconconfiguration","newrelic::agent::errorcollector","newrelic::agent::instrumentation::metricframe","newrelic::agent::sampler","newrelic::agent::samplers::cpusampler","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::memorysampler::shellps","newrelic::agent::samplers::objectsampler","newrelic::agent::shimagent","newrelic::agent::statsengine","newrelic::agent::statsengine::metricstats::synchronizedhash","newrelic::agent::statsengine::scopestackelement","newrelic::agent::transactionsamplebuilder","newrelic::agent::transactionsampler","newrelic::agent::workerloop","newrelic::chainedcall","newrelic::command","newrelic::command::commandfailure","newrelic::command::deployments","newrelic::command::install","newrelic::control::instancemethods","newrelic::histogram","newrelic::histogram::bucket","newrelic::localenvironment","newrelic::metricdata","newrelic::metricspec","newrelic::noticederror","newrelic::rack::browsermonitoring","newrelic::rack::developermode","newrelic::rack::metricapp","newrelic::scopedmethodtracestats","newrelic::statsbase","newrelic::transactionanalysis::segmentsummary","newrelic::transactionsample","newrelic::transactionsample::compositesegment","newrelic::transactionsample::segment","newrelic::transactionsample::summarysegment","newrelic::versionnumber","newrelic::control::classmethods","newrelic::agent::instrumentation::controllerinstrumentation::classmethods","newrelic::agent::instrumentation::controllerinstrumentation::classmethods","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::instrumentation::rails3::actioncontroller","object","object","newrelic::agent::instrumentation::rails3::errors","object","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::agent::instrumentation::rack","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::control::classmethods","newrelic::control::instancemethods","newrelic::collectionhelper","newrelic::agent::errorcollector::noticeerror","newrelic::agent","newrelic::agent::errorcollector","newrelic::agent::instrumentation::metricframe","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::agent::instancemethods::start","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::transactionsample","newrelic::metricdata","newrelic::agent::errorcollector::noticeerror","newrelic::transactionsample::segment","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::transactionsample::segment","newrelic::agent::instrumentation::queuetime","newrelic::instrumentation::actsassolrinstrumentation::parsermethodsinstrumentation","newrelic::agent::instrumentation::metricframe","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::agent::statsengine::transactions","newrelic::agent::instrumentation::controllerinstrumentation","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::memorysampler","newrelic::agent::sampler","newrelic::agent::samplers::cpusampler","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::objectsampler","newrelic::agent::instrumentation::metricframe","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::statsengine::transactions","newrelic::agent::agent::instancemethods","newrelic::agent::shimagent","newrelic::control::configuration","newrelic::transactionsample","newrelic::agent::samplers::memorysampler::procstatus","newrelic::histogram","newrelic::histogram::bucket","newrelic::histogram::shim","newrelic::agent::instrumentation::rails3::actioncontroller","newrelic::control::profiling","newrelic::control::profiling","newrelic::control::profiling","newrelic::control::servermethods","newrelic::agent::instrumentation::metricframe","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::statsengine::transactions","newrelic::agent::agent::instancemethods","newrelic::agent::shimagent","newrelic::agent::agent::instancemethods::connect","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::apdexstats","newrelic::apdexstats","newrelic::apdexstats","newrelic::methodtracestats","newrelic::methodtracestats","newrelic::scopedmethodtracestats","newrelic::agent","newrelic::agent::agent::instancemethods","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::statsengine::transactions","newrelic::transactionanalysis","newrelic::agent::errorcollector::noticeerror","object","newrelic::stats","object","newrelic::agent::busycalculator","newrelic::stats","newrelic::agent::transactionsampler","newrelic::agent","newrelic::agent::agent::instancemethods","newrelic::agent::statsengine::metricstats","newrelic::control::servermethods","newrelic::control::frameworks::merb","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails3","newrelic::control::frameworks::ruby","newrelic::agent::instrumentation::sinatra","newrelic::agent::workerloop","newrelic::command","newrelic::command::deployments","newrelic::command::install","newrelic::merbbootloader","newrelic::agent::workerloop","newrelic::agent::transactionsamplebuilder","newrelic::agent::transactionsamplebuilder","newrelic::agent::sampler","newrelic::agent::agent::instancemethods::start","newrelic::agent::transactionsampler","newrelic::agent::transactionsamplebuilder","newrelic::agent::transactionsampler","newrelic::agent::statsengine::transactions","newrelic::agent::statsengine::transactions","newrelic::control::configuration","newrelic::agent::errorcollector::noticeerror","newrelic::control::servermethods","newrelic::control::servermethods","newrelic::agent::agent::instancemethods::connect","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::transactionsamplebuilder","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods","newrelic::agent","newrelic::agent::agent::instancemethods","newrelic::agent::agent::instancemethods::start","newrelic::agent::transactionsamplebuilder","newrelic::agent::transactionsamplebuilder","newrelic::control::configuration","newrelic::control::loggingmethods","newrelic::agent::errorcollector::noticeerror","newrelic::rack::browsermonitoring","newrelic::agent::agent::instancemethods::connect","newrelic::control::loggingmethods","newrelic::stats","newrelic::stats","newrelic::agent::agent::instancemethods::connect","newrelic::agent","newrelic::agent::agent::instancemethods","newrelic::agent::shimagent","newrelic::agent::transactionsampler","newrelic::localenvironment","newrelic::stats","newrelic::transactionanalysis","newrelic::stats","newrelic::stats","newrelic::agent::agent::instancemethods","newrelic::agent::shimagent","newrelic::control::instancemethods","newrelic::agent::statsengine::samplers","newrelic::transactionsample","newrelic::agent::agent::instancemethods","newrelic::agent::instrumentation::metricframe","newrelic::agent::statsengine::transactions","newrelic::agent::agent::instancemethods","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::objectsampler","newrelic::histogram::bucket","newrelic::agent::statsengine::metricstats","newrelic::agent::workerloop","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::collectionhelper","newrelic::metricspec","newrelic::stats","newrelic::stats","newrelic::stats","newrelic::agent::sampler","newrelic::agent::samplers::cpusampler","newrelic::agent::samplers::delayedjoblocksampler","newrelic::agent::samplers::memorysampler","newrelic::agent::samplers::objectsampler","newrelic::control::configuration","newrelic::agent::samplers::cpusampler","newrelic::agent::samplers::cpusampler","newrelic::stats","newrelic::stats","newrelic::transactionsample","newrelic::versionnumber","newrelic::transactionsample::segment","newrelic::metricdata","newrelic::metricspec","newrelic::statsbase","newrelic::transactionsample::segment","newrelic::agent::samplers::memorysampler::javaheapsampler","newrelic::agent::samplers::memorysampler::procstatus","newrelic::agent::samplers::memorysampler::shellps","newrelic::control::instancemethods","newrelic::histogram::bucket","newrelic::localenvironment","newrelic::metricdata","newrelic::metricspec","newrelic::stats","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::versionnumber","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::control::frameworks::merb","newrelic::control::frameworks::rails","newrelic::control::frameworks::rails3","newrelic::control::frameworks::ruby","newrelic::control::loggingmethods","newrelic::stats","newrelic::transactionanalysis::segmentsummary","newrelic::methodtracestats","newrelic::scopedmethodtracestats","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::transactionsamplebuilder","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::methodtracer::instancemethods","newrelic::agent::transactionsamplebuilder","newrelic::agent::methodtracer::instancemethods","newrelic::agent::methodtracer::instancemethods::traceexecutionscoped","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::statsengine::transactions","newrelic::agent::agent::instancemethods::connect","newrelic::transactionsample","newrelic::transactionsample::segment","newrelic::metricspec","newrelic::agent::transactionsampler","newrelic::agent::transactionsampler","newrelic::transactionanalysis::segmentsummary","newrelic::localenvironment","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::agent::instrumentation::metricframe","newrelic::stats","newrelic::stats","newrelic::agent::instrumentation::metricframe","newrelic::agent::instrumentation::metricframe","newrelic::agent::errorcollector::noticeerror","newrelic::agent::sampler","newrelic::control::configuration","newrelic::control::configuration","newrelic::agent::samplers::cpusampler","newrelic::agent::samplers::cpusampler","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::start","newrelic::agent::agent::instancemethods::start","newrelic::agent::methodtracer::classmethods::addmethodtracer","newrelic::control::configuration","newrelic::agent::agent::instancemethods::connect","newrelic::control::configuration","newrelic::control::frameworks::rails3","newrelic::control::configuration","newrelic::control::frameworks::rails3","newrelic::agent::agent::instancemethods::start","newrelic::agent","newrelic::agent::instrumentation::metricframe","newrelic::agent::samplers::delayedjoblocksampler","newrelic::localenvironment","files/license.html","files/readme_rdoc.html","files/lib/conditional_vendored_dependency_detection_rb.html","files/lib/conditional_vendored_metric_parser_rb.html","files/lib/new_relic/agent_rb.html","files/lib/new_relic/agent/agent_rb.html","files/lib/new_relic/agent/beacon_configuration_rb.html","files/lib/new_relic/agent/browser_monitoring_rb.html","files/lib/new_relic/agent/busy_calculator_rb.html","files/lib/new_relic/agent/chained_call_rb.html","files/lib/new_relic/agent/error_collector_rb.html","files/lib/new_relic/agent/instrumentation/active_merchant_rb.html","files/lib/new_relic/agent/instrumentation/acts_as_solr_rb.html","files/lib/new_relic/agent/instrumentation/authlogic_rb.html","files/lib/new_relic/agent/instrumentation/controller_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/data_mapper_rb.html","files/lib/new_relic/agent/instrumentation/delayed_job_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/memcache_rb.html","files/lib/new_relic/agent/instrumentation/merb/controller_rb.html","files/lib/new_relic/agent/instrumentation/merb/errors_rb.html","files/lib/new_relic/agent/instrumentation/metric_frame_rb.html","files/lib/new_relic/agent/instrumentation/net_rb.html","files/lib/new_relic/agent/instrumentation/passenger_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/queue_time_rb.html","files/lib/new_relic/agent/instrumentation/rack_rb.html","files/lib/new_relic/agent/instrumentation/rails/action_controller_rb.html","files/lib/new_relic/agent/instrumentation/rails/action_web_service_rb.html","files/lib/new_relic/agent/instrumentation/rails/active_record_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/rails/errors_rb.html","files/lib/new_relic/agent/instrumentation/rails3/action_controller_rb.html","files/lib/new_relic/agent/instrumentation/rails3/active_record_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/rails3/errors_rb.html","files/lib/new_relic/agent/instrumentation/sinatra_rb.html","files/lib/new_relic/agent/instrumentation/sunspot_rb.html","files/lib/new_relic/agent/instrumentation/unicorn_instrumentation_rb.html","files/lib/new_relic/agent/method_tracer_rb.html","files/lib/new_relic/agent/sampler_rb.html","files/lib/new_relic/agent/samplers/cpu_sampler_rb.html","files/lib/new_relic/agent/samplers/delayed_job_lock_sampler_rb.html","files/lib/new_relic/agent/samplers/memory_sampler_rb.html","files/lib/new_relic/agent/samplers/object_sampler_rb.html","files/lib/new_relic/agent/shim_agent_rb.html","files/lib/new_relic/agent/stats_engine_rb.html","files/lib/new_relic/agent/stats_engine/metric_stats_rb.html","files/lib/new_relic/agent/stats_engine/samplers_rb.html","files/lib/new_relic/agent/stats_engine/transactions_rb.html","files/lib/new_relic/agent/transaction_sample_builder_rb.html","files/lib/new_relic/agent/transaction_sampler_rb.html","files/lib/new_relic/agent/worker_loop_rb.html","files/lib/new_relic/collection_helper_rb.html","files/lib/new_relic/command_rb.html","files/lib/new_relic/commands/deployments_rb.html","files/lib/new_relic/commands/install_rb.html","files/lib/new_relic/control_rb.html","files/lib/new_relic/control/class_methods_rb.html","files/lib/new_relic/control/configuration_rb.html","files/lib/new_relic/control/frameworks/external_rb.html","files/lib/new_relic/control/frameworks/merb_rb.html","files/lib/new_relic/control/frameworks/rails_rb.html","files/lib/new_relic/control/frameworks/rails3_rb.html","files/lib/new_relic/control/frameworks/ruby_rb.html","files/lib/new_relic/control/frameworks/sinatra_rb.html","files/lib/new_relic/control/instance_methods_rb.html","files/lib/new_relic/control/instrumentation_rb.html","files/lib/new_relic/control/logging_methods_rb.html","files/lib/new_relic/control/profiling_rb.html","files/lib/new_relic/control/server_methods_rb.html","files/lib/new_relic/delayed_job_injection_rb.html","files/lib/new_relic/histogram_rb.html","files/lib/new_relic/local_environment_rb.html","files/lib/new_relic/merbtasks_rb.html","files/lib/new_relic/metric_data_rb.html","files/lib/new_relic/metric_spec_rb.html","files/lib/new_relic/metrics_rb.html","files/lib/new_relic/noticed_error_rb.html","files/lib/new_relic/rack/browser_monitoring_rb.html","files/lib/new_relic/rack/developer_mode_rb.html","files/lib/new_relic/rack/metric_app_rb.html","files/lib/new_relic/rack/mongrel_rpm_ru.html","files/lib/new_relic/rack/newrelic_yml.html","files/lib/new_relic/rack_app_rb.html","files/lib/new_relic/recipes_rb.html","files/lib/new_relic/stats_rb.html","files/lib/new_relic/timer_lib_rb.html","files/lib/new_relic/transaction_analysis_rb.html","files/lib/new_relic/transaction_sample_rb.html","files/lib/new_relic/url_rule_rb.html","files/lib/new_relic/version_rb.html","files/lib/newrelic_rpm_rb.html","files/lib/tasks/all_rb.html","files/lib/tasks/install_rake.html","files/lib/tasks/tests_rake.html"],"info":[["ActionController","lib/new_relic/agent/instrumentation/rails3/action_controller.rb","classes/ActionController.html"," < ","",1],["Base","ActionController","classes/ActionController/Base.html"," < Object","",1],["Agent","NewRelic","classes/NewRelic/Agent.html"," < ","== Agent APIs This module contains the public API methods for the Agent. For adding custom instrumentation",1],["Agent","NewRelic::Agent","classes/NewRelic/Agent/Agent.html"," < Object","The Agent is a singleton that is instantiated when the plugin is activated.  It collects performance",1],["ClassMethods","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent/ClassMethods.html"," < ","",1],["InstanceMethods","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent/InstanceMethods.html"," < ","",1],["Connect","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html"," < ","",1],["Start","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html"," < ","Herein lies the corpse of the former 'start' method. May it's unmatched flog score rest in pieces. ",1],["StartWorkerThread","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html"," < ","",1],["BackgroundLoadingError","NewRelic::Agent","classes/NewRelic/Agent/BackgroundLoadingError.html"," < StandardError","",1],["BeaconConfiguration","NewRelic::Agent","classes/NewRelic/Agent/BeaconConfiguration.html"," < Object","",1],["BrowserMonitoring","NewRelic::Agent","classes/NewRelic/Agent/BrowserMonitoring.html"," < ","",1],["BusyCalculator","NewRelic::Agent","classes/NewRelic/Agent/BusyCalculator.html"," < ","This module supports calculation of actual time spent processing requests over the course of one harvest",1],["ErrorCollector","NewRelic::Agent","classes/NewRelic/Agent/ErrorCollector.html"," < Object","",1],["NoticeError","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector/NoticeError.html"," < ","",1],["ForceDisconnectException","NewRelic::Agent","classes/NewRelic/Agent/ForceDisconnectException.html"," < StandardError","An exception that forces an agent to stop reporting until its mongrel is restarted. ",1],["ForceRestartException","NewRelic::Agent","classes/NewRelic/Agent/ForceRestartException.html"," < StandardError","An exception that forces an agent to restart. ",1],["Instrumentation","NewRelic::Agent","classes/NewRelic/Agent/Instrumentation.html"," < ","",1],["ActiveRecordInstrumentation","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/ActiveRecordInstrumentation.html"," < ","",1],["ControllerInstrumentation","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html"," < ","== NewRelic instrumentation for controller actions and tasks This instrumentation is applied to the action",1],["ClassMethods","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation/ClassMethods.html"," < ","",1],["DataMapperInstrumentation","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/DataMapperInstrumentation.html"," < ","",1],["Memcache","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/Memcache.html"," < ","",1],["MetricFrame","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/MetricFrame.html"," < Object","",1],["QueueTime","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/QueueTime.html"," < ","",1],["Rack","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/Rack.html"," < ","== Instrumentation for Rack New Relic will instrument a #call method as if it were a controller action,",1],["Rails3","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/Rails3.html"," < ","",1],["ActionController","NewRelic::Agent::Instrumentation::Rails3","classes/NewRelic/Agent/Instrumentation/Rails3/ActionController.html"," < ","",1],["Errors","NewRelic::Agent::Instrumentation::Rails3","classes/NewRelic/Agent/Instrumentation/Rails3/Errors.html"," < ","",1],["Sinatra","NewRelic::Agent::Instrumentation","classes/NewRelic/Agent/Instrumentation/Sinatra.html"," < ","NewRelic instrumentation for Sinatra applications.  Sinatra actions will appear in the UI similar to",1],["LicenseException","NewRelic::Agent","classes/NewRelic/Agent/LicenseException.html"," < StandardError","An exception that is thrown by the server if the agent license is invalid. ",1],["MethodTracer","NewRelic::Agent","classes/NewRelic/Agent/MethodTracer.html"," < ","This module contains class methods added to support installing custom metric tracers and executing for",1],["ClassMethods","NewRelic::Agent::MethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods.html"," < ","",1],["AddMethodTracer","NewRelic::Agent::MethodTracer::ClassMethods","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html"," < ","Add a method tracer to the specified method. === Common Options * <tt>:push_scope => false</tt> specifies",1],["InstanceMethods","NewRelic::Agent::MethodTracer","classes/NewRelic/Agent/MethodTracer/InstanceMethods.html"," < ","",1],["TraceExecutionScoped","NewRelic::Agent::MethodTracer::InstanceMethods","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html"," < ","",1],["PostTooBigException","NewRelic::Agent","classes/NewRelic/Agent/PostTooBigException.html"," < ServerConnectionException","Used for when a transaction trace or error report has too much data, so we reset the queue to clear the",1],["Sampler","NewRelic::Agent","classes/NewRelic/Agent/Sampler.html"," < Object","",1],["Unsupported","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler/Unsupported.html"," < StandardError","Exception denotes a sampler is not available and it will not be registered. ",1],["Samplers","NewRelic::Agent","classes/NewRelic/Agent/Samplers.html"," < ","",1],["CpuSampler","NewRelic::Agent::Samplers","classes/NewRelic/Agent/Samplers/CpuSampler.html"," < NewRelic::Agent::Sampler","",1],["DelayedJobLockSampler","NewRelic::Agent::Samplers","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html"," < NewRelic::Agent::Sampler","",1],["MemorySampler","NewRelic::Agent::Samplers","classes/NewRelic/Agent/Samplers/MemorySampler.html"," < NewRelic::Agent::Sampler","",1],["Base","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler/Base.html"," < Object","",1],["JavaHeapSampler","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler/JavaHeapSampler.html"," < Base","",1],["ProcStatus","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler/ProcStatus.html"," < Base","ProcStatus A class that samples memory by reading the file /proc/$$/status, which is specific to linux",1],["ShellPS","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler/ShellPS.html"," < Base","",1],["ObjectSampler","NewRelic::Agent::Samplers","classes/NewRelic/Agent/Samplers/ObjectSampler.html"," < NewRelic::Agent::Sampler","",1],["ServerConnectionException","NewRelic::Agent","classes/NewRelic/Agent/ServerConnectionException.html"," < StandardError","Used to blow out of a periodic task without logging a an error, such as for routine failures. ",1],["ServerError","NewRelic::Agent","classes/NewRelic/Agent/ServerError.html"," < StandardError","Reserved for future use.  Meant to represent a problem on the server side. ",1],["ShimAgent","NewRelic::Agent","classes/NewRelic/Agent/ShimAgent.html"," < NewRelic::Agent::Agent","",1],["StatsEngine","NewRelic::Agent","classes/NewRelic/Agent/StatsEngine.html"," < Object","",1],["MetricStats","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine/MetricStats.html"," < ","",1],["SynchronizedHash","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats/SynchronizedHash.html"," < Hash","",1],["Samplers","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine/Samplers.html"," < ","",1],["ScopeStackElement","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine/ScopeStackElement.html"," < Object","Defines methods that stub out the stats engine methods when the agent is disabled ",1],["Transactions","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine/Transactions.html"," < ","",1],["TransactionSampleBuilder","NewRelic::Agent","classes/NewRelic/Agent/TransactionSampleBuilder.html"," < Object","a builder is created with every sampled transaction, to dynamically generate the sampled data.  It is",1],["TransactionSampler","NewRelic::Agent","classes/NewRelic/Agent/TransactionSampler.html"," < Object","",1],["WorkerLoop","NewRelic::Agent","classes/NewRelic/Agent/WorkerLoop.html"," < Object","A worker loop executes a set of registered tasks on a single thread. A task is a proc or block with a",1],["ApdexStats","NewRelic","classes/NewRelic/ApdexStats.html"," < StatsBase","",1],["BasicStats","NewRelic","classes/NewRelic/BasicStats.html"," < StatsBase","",1],["ChainedCall","NewRelic","classes/NewRelic/ChainedCall.html"," < Object","This is used to allow obfuscators to be chained. ",1],["CollectionHelper","NewRelic","classes/NewRelic/CollectionHelper.html"," < ","",1],["Command","NewRelic","classes/NewRelic/Command.html"," < Object","",1],["CommandFailure","NewRelic::Command","classes/NewRelic/Command/CommandFailure.html"," < StandardError","Capture a failure to execute the command. ",1],["Deployments","NewRelic::Command","classes/NewRelic/Command/Deployments.html"," < NewRelic::Command","",1],["Install","NewRelic::Command","classes/NewRelic/Command/Install.html"," < NewRelic::Command","",1],["Control","NewRelic","classes/NewRelic/Control.html"," < Object","The Control is a singleton responsible for the startup and initialization sequence.  The initializer",1],["ClassMethods","NewRelic::Control","classes/NewRelic/Control/ClassMethods.html"," < ","",1],["Configuration","NewRelic::Control","classes/NewRelic/Control/Configuration.html"," < ","",1],["Frameworks","NewRelic::Control","classes/NewRelic/Control/Frameworks.html"," < ","used for framework-specific subclasses ",1],["External","NewRelic::Control::Frameworks","classes/NewRelic/Control/Frameworks/External.html"," < NewRelic::Control::Frameworks::Ruby","",1],["Merb","NewRelic::Control::Frameworks","classes/NewRelic/Control/Frameworks/Merb.html"," < NewRelic::Control","",1],["Rails","NewRelic::Control::Frameworks","classes/NewRelic/Control/Frameworks/Rails.html"," < NewRelic::Control::Frameworks::Ruby","",1],["Rails3","NewRelic::Control::Frameworks","classes/NewRelic/Control/Frameworks/Rails3.html"," < NewRelic::Control::Frameworks::Rails","",1],["Ruby","NewRelic::Control::Frameworks","classes/NewRelic/Control/Frameworks/Ruby.html"," < NewRelic::Control","",1],["Sinatra","NewRelic::Control::Frameworks","classes/NewRelic/Control/Frameworks/Sinatra.html"," < NewRelic::Control::Frameworks::Ruby","",1],["InstanceMethods","NewRelic::Control","classes/NewRelic/Control/InstanceMethods.html"," < ","",1],["Instrumentation","NewRelic::Control","classes/NewRelic/Control/Instrumentation.html"," < ","",1],["LoggingMethods","NewRelic::Control","classes/NewRelic/Control/LoggingMethods.html"," < ","",1],["Profiling","NewRelic::Control","classes/NewRelic/Control/Profiling.html"," < ","",1],["ServerMethods","NewRelic::Control","classes/NewRelic/Control/ServerMethods.html"," < ","",1],["DelayedJobInjection","NewRelic","classes/NewRelic/DelayedJobInjection.html"," < ","",1],["Histogram","NewRelic","classes/NewRelic/Histogram.html"," < Object","",1],["Bucket","NewRelic::Histogram","classes/NewRelic/Histogram/Bucket.html"," < Object","Stores statistics for response times falling in a particular range. A bucket has a min and max response",1],["Shim","NewRelic::Histogram","classes/NewRelic/Histogram/Shim.html"," < ","Used to stub out API methods when the agent is not enabled ",1],["Instrumentation","NewRelic","classes/NewRelic/Instrumentation.html"," < ","",1],["ActsAsSolrInstrumentation","NewRelic::Instrumentation","classes/NewRelic/Instrumentation/ActsAsSolrInstrumentation.html"," < ","",1],["ParserMethodsInstrumentation","NewRelic::Instrumentation::ActsAsSolrInstrumentation","classes/NewRelic/Instrumentation/ActsAsSolrInstrumentation/ParserMethodsInstrumentation.html"," < ","",1],["LocalEnvironment","NewRelic","classes/NewRelic/LocalEnvironment.html"," < Object","An instance of LocalEnvironment is responsible for determining three things: * Framework - :rails, :rails3,",1],["MerbBootLoader","NewRelic","classes/NewRelic/MerbBootLoader.html"," < Merb::BootLoader","",1],["MethodTraceStats","NewRelic","classes/NewRelic/MethodTraceStats.html"," < StatsBase","Statistics used to track the performance of traced methods ",1],["MetricData","NewRelic","classes/NewRelic/MetricData.html"," < Object","",1],["MetricSpec","NewRelic","classes/NewRelic/MetricSpec.html"," < Object","this struct uniquely defines a metric, optionally inside the call scope of another metric ",1],["Metrics","NewRelic","classes/NewRelic/Metrics.html"," < ","",1],["NoticedError","NewRelic","classes/NewRelic/NoticedError.html"," < Object","This class encapsulates an error that was noticed by RPM in a managed app. ",1],["Rack","NewRelic","classes/NewRelic/Rack.html"," < ","",1],["BrowserMonitoring","NewRelic::Rack","classes/NewRelic/Rack/BrowserMonitoring.html"," < Object","",1],["DeveloperMode","NewRelic::Rack","classes/NewRelic/Rack/DeveloperMode.html"," < Object","",1],["MetricApp","NewRelic::Rack","classes/NewRelic/Rack/MetricApp.html"," < Object","",1],["Status","NewRelic::Rack","classes/NewRelic/Rack/Status.html"," < Object","",1],["Railtie","NewRelic","classes/NewRelic/Railtie.html"," < Rails::Railtie","",1],["ScopedMethodTraceStats","NewRelic","classes/NewRelic/ScopedMethodTraceStats.html"," < MethodTraceStats","",1],["Stats","NewRelic","classes/NewRelic/Stats.html"," < ","",1],["StatsBase","NewRelic","classes/NewRelic/StatsBase.html"," < Object","",1],["TransactionAnalysis","NewRelic","classes/NewRelic/TransactionAnalysis.html"," < ","",1],["SegmentSummary","NewRelic::TransactionAnalysis","classes/NewRelic/TransactionAnalysis/SegmentSummary.html"," < Object","summarizes performance data for all calls to segments with the same metric_name ",1],["TransactionSample","NewRelic","classes/NewRelic/TransactionSample.html"," < Object","",1],["CompositeSegment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample/CompositeSegment.html"," < Segment","",1],["FakeSegment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample/FakeSegment.html"," < Segment","",1],["Segment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample/Segment.html"," < Object","",1],["SummarySegment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample/SummarySegment.html"," < Segment","",1],["UrlRule","NewRelic","classes/NewRelic/UrlRule.html"," < Object","Represents url mapping rules stored on the server.  These rules should be applied to URLs which are not",1],["RuleSet","NewRelic::UrlRule","classes/NewRelic/UrlRule/RuleSet.html"," < Object","",1],["VersionNumber","NewRelic","classes/NewRelic/VersionNumber.html"," < Object","Helper class for managing version comparisons ",1],["Object","lib/new_relic/agent/instrumentation/delayed_job_instrumentation.rb","classes/Object.html"," < Object","",1],["<<","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M001502","(segment)","",2],["<=>","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001431","(o)","",2],["<=>","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M001552","(other)","",2],["==","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001424","(o)","",2],["[]","NewRelic::Agent::StatsEngine::MetricStats::SynchronizedHash","classes/NewRelic/Agent/StatsEngine/MetricStats/SynchronizedHash.html#M001137","(*args)","",2],["[]","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001282","(key)","",2],["[]","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001548","(key)","",2],["[]=","NewRelic::Agent::StatsEngine::MetricStats::SynchronizedHash","classes/NewRelic/Agent/StatsEngine/MetricStats/SynchronizedHash.html#M001136","(*args)","",2],["[]=","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001283","(key, value)","",2],["[]=","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001547","(key, value)","",2],["_call","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M001443","(env)","",2],["_install_instrumentation","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M001327","()","",2],["abort_transaction!","NewRelic::Agent","classes/NewRelic/Agent.html#M001243","()","Cancel the collection of the current transaction in progress, if any.  Only affects the transaction started",2],["abort_transaction!","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000976","()","Call this to ensure that the current transaction is not saved ",2],["abort_transaction!","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000973","()","Indicate that you don't want to keep the currently saved transaction information ",2],["absent?","NewRelic::Stats","classes/NewRelic/Stats.html#M001464","()","",2],["add_called_segment","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001534","(s)","",2],["add_custom_parameters","NewRelic::Agent","classes/NewRelic/Agent.html#M001251","(params)","Add parameters to the current transaction trace (and traced error if any) on the call stack. ",2],["add_custom_parameters","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000990","(p)","",2],["add_custom_parameters","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000983","(p)","Add context parameters to the metric frame.  This information will be passed in to errors and transaction",2],["add_harvest_sampler","NewRelic::Agent::StatsEngine::Samplers","classes/NewRelic/Agent/StatsEngine/Samplers.html#M001150","(sampler)","Add a sampler to be invoked just before each harvest. ",2],["add_instrumentation","NewRelic::Agent","classes/NewRelic/Agent.html#M001239","(file_pattern)","Add instrumentation files to the agent.  The argument should be a glob matching ruby scripts which will",2],["add_instrumentation","NewRelic::Control::Instrumentation","classes/NewRelic/Control/Instrumentation.html#M001340","(pattern)","Add instrumentation.  Don't call this directly.  Use NewRelic::Agent#add_instrumentation. This will load",2],["add_method_tracer","NewRelic::Agent::MethodTracer::ClassMethods","classes/NewRelic/Agent/MethodTracer/ClassMethods.html#M001094","(method_name, metric_name_code=nil, options = {})","",2],["add_random_sample_to","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001223","(result)","Every 1/n harvests, adds the most recent sample to the harvest array if it exists. Makes sure that the",2],["add_request_parameters","NewRelic::Agent","classes/NewRelic/Agent.html#M001252","(params)","Alias for #add_custom_parameters",2],["add_sampler","NewRelic::Agent::StatsEngine::Samplers","classes/NewRelic/Agent/StatsEngine/Samplers.html#M001149","(sampler)","Add an instance of Sampler to be invoked about every 10 seconds on a background thread. ",2],["add_samples_to","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001224","(result, slow_threshold)","Returns an array of slow samples, with either one or two elements - one element unless random sampling",2],["add_segments","NewRelic::TransactionSample::SummarySegment","classes/NewRelic/TransactionSample/SummarySegment.html#M001566","(segments)","",2],["add_to_error_queue","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000927","(noticed_error, exception)","",2],["add_transaction_tracer","NewRelic::Agent::Instrumentation::ControllerInstrumentation::ClassMethods","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation/ClassMethods.html#M000945","(method, options={})","Add transaction tracing to the given method.  This will treat the given method as a main entrypoint for",2],["after_fork","NewRelic::Agent","classes/NewRelic/Agent.html#M001236","(options={})","Register this method as a callback for processes that fork jobs. If the master/parent connects to the",2],["after_fork","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000807","(options={})","This method should be called in a forked process after a fork. It assumes the parent process initialized",2],["after_fork","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M001128","(*args;)","",2],["after_fork","Object","classes/Object.html#M000960","()","",2],["after_fork_with_newrelic","Object","classes/Object.html#M000959","()","",2],["agent_enabled?","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M001339","()","True if dev mode or monitor mode are enabled, and we are running inside a valid dispatcher like mongrel",2],["agent_instance","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M001059","()","",2],["already_started?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000828","()","",2],["analyze","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001588","()","",2],["any_unrecognized_keys?","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M001082","(expected, given)","",2],["apdex_f","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000832","()","",2],["apdex_f_threshold?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000833","()","",2],["apdex_score","NewRelic::Stats","classes/NewRelic/Stats.html#M001505","()","",2],["apdex_t","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001285","()","",2],["api_server","NewRelic::Control::ServerMethods","classes/NewRelic/Control/ServerMethods.html#M001364","()","",2],["app","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M001343","()","",2],["app_names","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001298","()","",2],["append_backtrace","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001220","(segment, duration)","Appends a backtrace to a segment if that segment took longer than the specified duration ",2],["append_environment_info","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M001325","()","Collect the Rails::Info into an associative array as well as the list of plugins ",2],["append_environment_info","NewRelic::Control::Frameworks::Rails3","classes/NewRelic/Control/Frameworks/Rails3.html#M001317","()","Collect the Rails::Info into an associative array as well as the list of plugins ",2],["append_environment_info","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M001346","()","Append framework specific environment information for uploading to the server for change detection. ",2],["append_environment_value","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001382","(name, value = nil)","Add the given key/value pair to the app environment settings.  Must pass either a value or a block. ",2],["append_gem_list","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001383","()","",2],["append_new_message","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001219","(old_message, message)","Allows the addition of multiple pieces of metadata to one segment - i.e. traced method calls multiple",2],["append_plugin_list","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001384","()","",2],["apply","NewRelic::UrlRule","classes/NewRelic/UrlRule.html#M001531","(url)","",2],["as_percentage","NewRelic::Stats","classes/NewRelic/Stats.html#M001485","()","the stat total_call_time is a percent ",2],["as_percentage_of","NewRelic::Stats","classes/NewRelic/Stats.html#M001484","(other_stats)","",2],["assemble_code_header","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M001090","(method_name, metric_name_code, options)","",2],["autoinstrument_source","NewRelic::Rack::BrowserMonitoring","classes/NewRelic/Rack/BrowserMonitoring.html#M001442","(response, headers)","",2],["average_call_time","NewRelic::Stats","classes/NewRelic/Stats.html#M001467","()","",2],["average_exclusive_time","NewRelic::Stats","classes/NewRelic/Stats.html#M001468","()","",2],["average_exclusive_time","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M001507","()","",2],["average_response_time","NewRelic::Stats","classes/NewRelic/Stats.html#M001494","()","Alias for #average_call_time",2],["average_time","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M001506","()","",2],["average_value","NewRelic::Stats","classes/NewRelic/Stats.html#M001493","()","Alias for #average_call_time",2],["begin_time","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M001517","()","",2],["begin_time=","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M001515","(t)","In this class, we explicitly don't track begin and end time here, to save space during cross process",2],["breakdown_data","NewRelic::TransactionAnalysis","classes/NewRelic/TransactionAnalysis.html#M001514","(limit = nil)","return the data that breaks down the performance of the transaction as an array of SegmentSummary objects.",2],["browser_monitoring_auto_instrument?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001290","()","",2],["browser_timing_footer","NewRelic::Agent","classes/NewRelic/Agent.html#M001258","()","Returns a Javascript string which should be injected into the very bottom of the response body ",2],["browser_timing_footer","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000806","()","",2],["browser_timing_footer","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M001134","()","",2],["browser_timing_header","NewRelic::Agent","classes/NewRelic/Agent.html#M001257","()","Returns a Javascript string which should be injected into the very top of the response body ",2],["browser_timing_header","NewRelic::Agent::BrowserMonitoring","classes/NewRelic/Agent/BrowserMonitoring.html#M000805","()","",2],["browser_timing_header","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M001133","()","",2],["build_browser_timing_header","NewRelic::Agent::BeaconConfiguration","classes/NewRelic/Agent/BeaconConfiguration.html#M000801","()","",2],["build_load_file_js","NewRelic::Agent::BeaconConfiguration","classes/NewRelic/Agent/BeaconConfiguration.html#M000799","(connect_data)","",2],["bundler_gem_list","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M001347","()","",2],["busy_count","NewRelic::Agent::BusyCalculator","classes/NewRelic/Agent/BusyCalculator.html#M000851","()","",2],["call","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M001007","(*args)","Alias for #call_with_newrelic",2],["call","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M001011","(*args)","Alias for #call_with_newrelic",2],["call","NewRelic::ChainedCall","classes/NewRelic/ChainedCall.html#M000883","(sql)","",2],["call","NewRelic::Rack::BrowserMonitoring","classes/NewRelic/Rack/BrowserMonitoring.html#M001438","(env)","method required by Rack interface ",2],["call","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M001440","(env)","",2],["call","NewRelic::Rack::MetricApp","classes/NewRelic/Rack/MetricApp.html#M001459","(env)","",2],["call","NewRelic::Rack::Status","classes/NewRelic/Rack/Status.html#M001461","(env)","",2],["call_with_newrelic","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M001005","(*args)","",2],["call_without_newrelic","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M001010","(*args)","Alias for #call",2],["call_without_newrelic","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M001008","(*args)","Alias for #call",2],["called_segments","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001540","()","",2],["called_segments=","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001563","(segments)","",2],["calls_per_minute","NewRelic::Stats","classes/NewRelic/Stats.html#M001488","()","",2],["can_run?","NewRelic::Agent::Samplers::MemorySampler::Base","classes/NewRelic/Agent/Samplers/MemorySampler/Base.html#M001116","()","",2],["capture_params","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001287","()","",2],["capture_segment_trace","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001203","()","in developer mode, capture the stack trace with the segment. this is cpu and memory expensive and therefore",2],["catch_errors","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000870","()","",2],["cert_file_path","NewRelic::Control::ServerMethods","classes/NewRelic/Control/ServerMethods.html#M001369","()","",2],["check_config_and_start_agent","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000857","()","",2],["check_for_illegal_keys!","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M001083","(options)","",2],["check_for_push_scope_and_metric","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M001085","(options)","",2],["check_server_connection=","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000966","(value)","",2],["check_transaction_sampler_status","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000863","()","",2],["checked_calculation","NewRelic::Stats","classes/NewRelic/Stats.html#M001466","(numerator, denominator)","makes sure we aren't dividing by zero ",2],["clear","NewRelic::Agent::StatsEngine::MetricStats::SynchronizedHash","classes/NewRelic/Agent/StatsEngine/MetricStats/SynchronizedHash.html#M001138","(*args)","",2],["clear_stats","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M001156","()","Remove all stats.  For test code only. ",2],["close_connections","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001572","()","",2],["code_to_eval","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M001093","(method_name, metric_name_code, options)","",2],["command","NewRelic::Command::Deployments","classes/NewRelic/Command/Deployments.html#M001264","()","",2],["command","NewRelic::Command::Install","classes/NewRelic/Command/Install.html#M001270","()","",2],["config_file","NewRelic::Control::Frameworks::Ruby","classes/NewRelic/Control/Frameworks/Ruby.html#M001330","()","Check a sequence of file locations for newrelic.yml ",2],["config_file","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M001349","()","",2],["config_transaction_tracer","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000837","()","this entire method should be done on the transaction sampler object, rather than here. We should pass",2],["configure_error_collector!","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000889","(server_enabled)","",2],["configure_transaction_tracer!","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000891","(server_enabled, sample_rate)","",2],["connect_in_foreground","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000838","()","",2],["connect_settings","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000887","()","",2],["connect_to_server","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000888","()","",2],["connected?","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000812","()","Return nil if not yet connected, true if successfully started and false if we failed to start. ",2],["content","NewRelic::Command::Install","classes/NewRelic/Command/Install.html#M001273","()","",2],["control","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000902","()","",2],["convert_to_ip_address","NewRelic::Control::ServerMethods","classes/NewRelic/Control/ServerMethods.html#M001367","(host)","Check to see if we need to look up the IP address If it's an IP address already, we pass it through.",2],["correct_license_length","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000855","()","",2],["count_segments","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001574","()","",2],["count_segments","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001543","()","",2],["create_and_run_worker_loop","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000865","()","",2],["create_segment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001580","(relative_timestamp, metric_name, segment_id = nil)","",2],["current","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000967","(create_if_empty=nil)","Return the currently active metric frame, or nil.  Call with +true+ to create a new metric frame if one",2],["current_metric","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000978","()","",2],["current_sample_id","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001194","()","Returns the current sample id, delegated from `builder` ",2],["custom_parameters","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000984","()","",2],["custom_parameters","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000989","()","",2],["custom_params_from_opts","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000915","(options)","",2],["database_metric_name","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000968","()","This is the name of the model currently assigned to database measurements, overriding the default. ",2],["database_time","NewRelic::TransactionAnalysis","classes/NewRelic/TransactionAnalysis.html#M001499","()","",2],["default_metric_name_code","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M001087","(method_name)","Default to the class where the method is defined. ",2],["deferred_work!","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000871","(connection_options)","",2],["delete","NewRelic::Agent::StatsEngine::MetricStats::SynchronizedHash","classes/NewRelic/Agent/StatsEngine/MetricStats/SynchronizedHash.html#M001139","(*args)","",2],["delete_if","NewRelic::Agent::StatsEngine::MetricStats::SynchronizedHash","classes/NewRelic/Agent/StatsEngine/MetricStats/SynchronizedHash.html#M001141","(*args)","",2],["detail_segments=","NewRelic::TransactionSample::CompositeSegment","classes/NewRelic/TransactionSample/CompositeSegment.html#M001569","(segments)","",2],["developer_mode?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001289","()","True if we are capturing data and displaying in /newrelic ",2],["disable","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001199","()","Disable the transaction sampler - this also deregisters it with the statistics engine. ",2],["disable_all_tracing","NewRelic::Agent","classes/NewRelic/Agent.html#M001244","()","Yield to the block without collecting any metrics or traces in any of the subsequent calls.  If executed",2],["disable_sql_recording","NewRelic::Agent","classes/NewRelic/Agent.html#M001241","()","This method sets the state of sql recording in the transaction sampler feature. Within the given block,",2],["disable_transaction_tracing","NewRelic::Agent","classes/NewRelic/Agent.html#M001242","()","This method disables the recording of transaction traces in the given block.  See also #disable_all_tracing",2],["disabled?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000829","()","",2],["disabled?","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000906","()","",2],["disconnect","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000874","()","",2],["dispatcher","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001297","()","",2],["dispatcher_finish","NewRelic::Agent::BusyCalculator","classes/NewRelic/Agent/BusyCalculator.html#M000845","(end_time = Time.now)","",2],["dispatcher_instance_id","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001296","()","",2],["dispatcher_instance_id","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001385","()","",2],["dispatcher_start","NewRelic::Agent::BusyCalculator","classes/NewRelic/Agent/BusyCalculator.html#M000844","(time)","",2],["duration","NewRelic::Stats","classes/NewRelic/Stats.html#M001486","()","",2],["duration","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001581","()","",2],["duration","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001541","()","return the total duration of this segment ",2],["each_segment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001582","(&block)","",2],["each_segment","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001557","(&block)","call the provided block for this segment and each of the called segments ",2],["enable","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001195","()","Enable the transaction sampler - this also registers it with the statistics engine. ",2],["enable_random_samples!","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000890","(sample_rate)","",2],["end_time","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M001518","()","",2],["end_time=","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M001516","(t)","",2],["end_trace","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001533","(timestamp)","",2],["end_transaction","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000820","()","",2],["end_transaction","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M001170","()","Try to clean up gracefully, otherwise we leave things hanging around on thread locals. If it looks like",2],["env","NewRelic::Control::Frameworks::Merb","classes/NewRelic/Control/Frameworks/Merb.html#M001303","()","",2],["env","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M001312","()","",2],["env","NewRelic::Control::Frameworks::Rails3","classes/NewRelic/Control/Frameworks/Rails3.html#M001307","()","",2],["env","NewRelic::Control::Frameworks::Ruby","classes/NewRelic/Control/Frameworks/Ruby.html#M001328","()","",2],["env","NewRelic::Control::Frameworks::Sinatra","classes/NewRelic/Control/Frameworks/Sinatra.html#M001333","()","",2],["environment_for_connect","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000885","()","",2],["eql?","NewRelic::MetricData","classes/NewRelic/MetricData.html#M001397","(o)","",2],["eql?","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001425","(o)","",2],["eql?","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M001555","(other)","",2],["err","NewRelic::Command","classes/NewRelic/Command.html#M001262","(message)","",2],["error_is_ignored?","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000909","(error)","",2],["error_params_from_options","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000919","(options)","",2],["exception_info","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000925","(exception)","",2],["exclusive_duration","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001542","()","return the duration of this segment without including the time in the called segments ",2],["exclusive_time_percentage","NewRelic::Stats","classes/NewRelic/Stats.html#M001492","()","",2],["exclusive_time_percentage","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M001508","()","",2],["expand_min_max_to","NewRelic::Stats","classes/NewRelic/Stats.html#M001477","(other)","",2],["explain_sql","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001559","()","perform this in the runtime environment of a managed application, to explain the sql statement(s) executed",2],["extract_source","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000921","(exception)","",2],["extract_stack_trace","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000924","(exception)","",2],["fetch","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001284","(key, default=nil)","",2],["fetch_from_options","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000913","(options, key, default=nil)","",2],["filtered_by_error_filter?","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000907","(error)","",2],["filtered_error?","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000908","(error)","",2],["find_class_in_object_space","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001407","(klass)","",2],["find_segment","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001584","(id)","",2],["find_segment","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001558","(id)","",2],["finish_setup","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000894","(config_data)","",2],["finish_trace","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M001182","(time)","",2],["fraction_of","NewRelic::Stats","classes/NewRelic/Stats.html#M001498","(s)","calculate this set of stats to be a percentage fraction of the provided stats, which has an overlapping",2],["framework","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M001344","()","Alias for #app",2],["freeze","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M001184","()","",2],["freeze","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M001511","()","",2],["gather_ar_adapter_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001393","()","",2],["gather_architecture_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001389","()","",2],["gather_cpu_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001388","()","See what the number of cpus is, works only on linux. ",2],["gather_db_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001395","()","",2],["gather_dm_adapter_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001394","()","",2],["gather_environment_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001401","()","Collect base statistics about the environment and record them for comparison and change detection. ",2],["gather_jruby_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001387","()","",2],["gather_os_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001390","()","",2],["gather_revision_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001392","()","",2],["gather_ruby_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001386","()","",2],["gather_system_info","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001391","()","",2],["get_apdex","NewRelic::Stats","classes/NewRelic/Stats.html#M001504","()","returns s,t,f ",2],["get_connection","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001571","(config)","",2],["get_custom_stats","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M001145","(metric_name, stat_class)","This version allows a caller to pass a stat class to use ",2],["get_memory","NewRelic::Agent::Samplers::MemorySampler::JavaHeapSampler","classes/NewRelic/Agent/Samplers/MemorySampler/JavaHeapSampler.html#M001118","()","",2],["get_memory","NewRelic::Agent::Samplers::MemorySampler::ProcStatus","classes/NewRelic/Agent/Samplers/MemorySampler/ProcStatus.html#M001123","()","Returns the amount of resident memory this process is using in MB ",2],["get_memory","NewRelic::Agent::Samplers::MemorySampler::ShellPS","classes/NewRelic/Agent/Samplers/MemorySampler/ShellPS.html#M001121","()","Returns the amount of resident memory this process is using in MB ",2],["get_metric_stats","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M001066","(metrics, options)","",2],["get_retry_period","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000877","()","",2],["get_sample","NewRelic::Agent::Samplers::MemorySampler::Base","classes/NewRelic/Agent/Samplers/MemorySampler/Base.html#M001117","()","",2],["get_stats","NewRelic::Agent","classes/NewRelic/Agent.html#M001232","(metric_name, use_scope=false)","Get or create a statistics gatherer that will aggregate numerical data under a metric name. +metric_name+",2],["get_stats","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M001146","(metric_name, use_scope = true, scoped_metric_only = false, scope = nil)","If use_scope is true, two chained metrics are created, one with scope and one without If scoped_metric_only",2],["get_stats_no_scope","NewRelic::Agent","classes/NewRelic/Agent.html#M001233","(metric_name, use_scope=false)","Alias for #get_stats",2],["get_stats_no_scope","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M001144","(metric_name)","",2],["get_stats_scoped","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M001063","(first_name, scoped_metric_only)","",2],["get_stats_unscoped","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M001064","(name)","",2],["handle_exception_in_explain","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001561","(e)","",2],["handle_force_disconnect","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000867","(error)","",2],["handle_force_restart","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000866","(error)","",2],["handle_license_error","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000881","(error)","",2],["handle_other_error","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000869","(error)","",2],["handle_server_connection_problem","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000868","(error)","",2],["harvest","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001225","(previous = [], slow_threshold = 2.0)","get the set of collected samples, merging into previous samples, and clear the collected sample list.",2],["harvest_busy","NewRelic::Agent::BusyCalculator","classes/NewRelic/Agent/BusyCalculator.html#M000858","()","Called before uploading to to the server to collect current busy stats. ",2],["harvest_errors","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000931","(unsent_errors)","Get the errors currently queued up.  Unsent errors are left over from a previous unsuccessful attempt",2],["harvest_timeslice_data","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M001155","(previous_timeslice_data, metric_ids)","Harvest the timeslice data.  First recombine current statss with any previously unsent metrics, clear",2],["has_correct_license_key?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000854","()","",2],["has_license_key?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000853","()","",2],["hash","NewRelic::MetricData","classes/NewRelic/MetricData.html#M001403","()","",2],["hash","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001426","()","",2],["hash","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M001554","()","",2],["http_connection","NewRelic::Control::ServerMethods","classes/NewRelic/Control/ServerMethods.html#M001370","(host = nil)","Return the Net::HTTP with proxy configuration given the NewRelic::Control::Server object. Default is",2],["ignore","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000904","(errors)","errors is an array of Exception Class Names ",2],["ignore_error_filter","NewRelic::Agent","classes/NewRelic/Agent.html#M001248","(&block)","Set a filter to be applied to errors that RPM will track.  The block should evalute to the exception",2],["ignore_error_filter","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000903","(&block)","",2],["ignore_transaction","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M001179","()","",2],["ignore_transaction","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001214","()","Tells the builder to ignore a transaction, if we are currently creating one. Only causes the sample to",2],["ignored?","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M001178","()","",2],["included","NewRelic::Agent::Instrumentation::ActiveRecordInstrumentation","classes/NewRelic/Agent/Instrumentation/ActiveRecordInstrumentation.html#M001035","(instrumented_class)","",2],["included","NewRelic::Agent::Instrumentation::ActiveRecordInstrumentation","classes/NewRelic/Agent/Instrumentation/ActiveRecordInstrumentation.html#M001042","(instrumented_class)","",2],["included","NewRelic::Agent::Instrumentation::DataMapperInstrumentation","classes/NewRelic/Agent/Instrumentation/DataMapperInstrumentation.html#M000947","(klass)","",2],["increment_count","NewRelic::MethodTraceStats","classes/NewRelic/MethodTraceStats.html#M001527","(value = 1)","",2],["increment_error_count!","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000910","()","",2],["increment_retry_period!","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000878","()","",2],["info","NewRelic::Command","classes/NewRelic/Command.html#M001261","(message)","",2],["inherited","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M001047","(subclass)","",2],["inherited","NewRelic::Command","classes/NewRelic/Command.html#M001266","(subclass)","",2],["init_config","NewRelic::Control::Frameworks::External","classes/NewRelic/Control/Frameworks/External.html#M001278","(options={})","",2],["init_config","NewRelic::Control::Frameworks::Merb","classes/NewRelic/Control/Frameworks/Merb.html#M001306","(options={})","",2],["init_config","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M001314","(options={})","In versions of Rails prior to 2.0, the rails config was only available to the init.rb, so it had to be",2],["init_config","NewRelic::Control::Frameworks::Ruby","classes/NewRelic/Control/Frameworks/Ruby.html#M001332","(options={})","",2],["init_config","NewRelic::Control::Frameworks::Sinatra","classes/NewRelic/Control/Frameworks/Sinatra.html#M001334","(options={})","This is the control used when starting up in the context of The New Relic Infrastructure Agent.  We want",2],["init_plugin","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M001335","(options={})","Initialize the plugin/gem and start the agent.  This does the necessary configuration based on the framework",2],["initialize_with_new_relic","Object","classes/Object.html#M001371","(*args)","",2],["install_browser_monitoring","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M001318","(config)","",2],["install_developer_mode","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M001319","(rails_config)","",2],["install_exit_handler","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000843","()","",2],["install_instrumentation","NewRelic::Control::Instrumentation","classes/NewRelic/Control/Instrumentation.html#M001341","()","",2],["install_shim","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M001326","()","",2],["install_shim","NewRelic::Control::Instrumentation","classes/NewRelic/Control/Instrumentation.html#M001337","()","Install stubs to the proper location so the app code will not fail if the agent is not running. ",2],["instance","NewRelic::Agent::Agent::ClassMethods","classes/NewRelic/Agent/Agent/ClassMethods.html#M000803","()","Should only be called by NewRelic::Control ",2],["instance","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M001126","()","",2],["instance","NewRelic::Control::ClassMethods","classes/NewRelic/Control/ClassMethods.html#M001275","()","Access the Control singleton, lazy initialized ",2],["instrument_method","NewRelic::Agent::Instrumentation::Memcache","classes/NewRelic/Agent/Instrumentation/Memcache.html#M000961","(the_class, method_name)","",2],["is_execution_traced?","NewRelic::Agent","classes/NewRelic/Agent.html#M001245","()","Check to see if we are capturing metrics currently on this thread. ",2],["is_reset?","NewRelic::Stats","classes/NewRelic/Stats.html#M001482","()","",2],["is_sql_recorded?","NewRelic::Agent","classes/NewRelic/Agent.html#M001247","()","",2],["is_transaction_traced?","NewRelic::Agent","classes/NewRelic/Agent.html#M001246","()","",2],["is_web_transaction?","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000993","(metric)","",2],["javascript_header","NewRelic::Agent::BeaconConfiguration","classes/NewRelic/Agent/BeaconConfiguration.html#M000800","()","",2],["keep_running","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M001196","()","",2],["license_bytes","NewRelic::Agent::BeaconConfiguration","classes/NewRelic/Agent/BeaconConfiguration.html#M000798","()","",2],["license_key","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001286","()","",2],["load_instrumentation_files","NewRelic::Control::Instrumentation","classes/NewRelic/Control/Instrumentation.html#M001336","(pattern)","",2],["load_samplers","NewRelic::Control::Instrumentation","classes/NewRelic/Control/Instrumentation.html#M001342","()","",2],["local_env","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M001097","()","",2],["lock","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M001191","()","",2],["locked_jobs","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M001099","()","",2],["log","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000827","()","",2],["log","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine.html#M001164","()","",2],["log","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M001192","()","",2],["log","NewRelic::Control::LoggingMethods","classes/NewRelic/Control/LoggingMethods.html#M001352","()","",2],["log!","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M001320","(msg, level=:info)","",2],["log!","NewRelic::Control::Frameworks::Rails3","classes/NewRelic/Control/Frameworks/Rails3.html#M001310","(msg, level=:info)","",2],["log!","NewRelic::Control::LoggingMethods","classes/NewRelic/Control/LoggingMethods.html#M001353","(msg, level=:info)","send the given message to STDOUT so that it shows up in the console.  This should be used for important",2],["log_app_names","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000831","()","",2],["log_connection!","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000895","(config_data)","",2],["log_dispatcher","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000830","()","",2],["log_error","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000880","(error)","",2],["log_errors","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M001077","(code_area, metric)","",2],["log_file_name","NewRelic::Control::LoggingMethods","classes/NewRelic/Control/LoggingMethods.html#M001362","()","",2],["log_if","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000848","(boolean, level, message)","",2],["log_path","NewRelic::Control::LoggingMethods","classes/NewRelic/Control/LoggingMethods.html#M001361","()","",2],["log_seed_token","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000884","()","",2],["log_sql_transmission_warning?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000835","()","",2],["log_unless","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000849","(boolean, level, message)","",2],["log_version_and_pid","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000847","()","",2],["log_with_newrelic_instrumentation","NewRelic::Agent::Instrumentation::ActiveRecordInstrumentation","classes/NewRelic/Agent/Instrumentation/ActiveRecordInstrumentation.html#M001036","(sql, name, &block)","",2],["log_with_newrelic_instrumentation","NewRelic::Agent::Instrumentation::ActiveRecordInstrumentation","classes/NewRelic/Agent/Instrumentation/ActiveRecordInstrumentation.html#M001043","(sql, name, &block)","",2],["log_with_newrelic_instrumentation","NewRelic::Agent::Instrumentation::DataMapperInstrumentation","classes/NewRelic/Agent/Instrumentation/DataMapperInstrumentation.html#M000948","(msg)","Unlike in AR, log is called in DM after the query actually ran, complete with metrics.  Since DO has",2],["log_worker_loop_start","NewRelic::Agent::Agent::InstanceMethods::StartWorkerThread","classes/NewRelic/Agent/Agent/InstanceMethods/StartWorkerThread.html#M000864","()","",2],["logger","NewRelic::Agent","classes/NewRelic/Agent.html#M001234","()","Get the logger for the agent.  Available after the agent has initialized. This sends output to the agent",2],["logger","NewRelic::Control::Frameworks::Rails3","classes/NewRelic/Control/Frameworks/Rails3.html#M001309","()","",2],["lookup_stat","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M001142","(metric_name)","The stats hash hashes either a metric name for an unscoped metric, or a metric_spec for a scoped metric",2],["lookup_stats","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M001152","(metric_name, scope_name = nil)","",2],["main_stat","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M001065","(metric, options)","",2],["major_version","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M001545","()","",2],["manual_start","NewRelic::Agent","classes/NewRelic/Agent.html#M001235","(options={})","Call this to manually start the Agent in situations where the Agent does not auto-start. When the app",2],["max_millis","NewRelic::Histogram::Bucket","classes/NewRelic/Histogram/Bucket.html#M001377","()","",2],["memcache_key_snippet","NewRelic::Agent::Instrumentation::Memcache","classes/NewRelic/Agent/Instrumentation/Memcache.html#M000962","(method_name)","",2],["merge","NewRelic::Stats","classes/NewRelic/Stats.html#M001480","(other_stats)","",2],["merge!","NewRelic::Stats","classes/NewRelic/Stats.html#M001479","(other_stats)","",2],["merge_attributes","NewRelic::Stats","classes/NewRelic/Stats.html#M001478","(other)","",2],["merge_defaults","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001280","(settings_hash)","",2],["merge_options","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001281","(options, hash=self)","Merge the given options into the config options. They might be a nested hash ",2],["method_with_push_scope","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M001092","(method_name, metric_name_code, options)","",2],["method_without_push_scope","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M001091","(method_name, metric_name_code, options)","",2],["metric_name","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000986","()","",2],["metric_spec","NewRelic::MetricData","classes/NewRelic/MetricData.html#M001399","()","",2],["metric_spec=","NewRelic::MetricData","classes/NewRelic/MetricData.html#M001400","(new_spec)","",2],["metrics","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M001143","()","",2],["midpoint","NewRelic::Stats","classes/NewRelic/Stats.html#M001487","()","",2],["min_millis","NewRelic::Histogram::Bucket","classes/NewRelic/Histogram/Bucket.html#M001376","()","",2],["min_time_less?","NewRelic::Stats","classes/NewRelic/Stats.html#M001476","(other)","",2],["minor_version","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M001550","()","",2],["mongrel","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001408","()","",2],["monitor_mode?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001288","()","True if we are sending data to the server, monitoring production ",2],["monitoring?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000850","()","",2],["multi_threaded?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001291","()","True if the app runs in multi-threaded mode ",2],["multiply_by","NewRelic::Stats","classes/NewRelic/Stats.html#M001503","(percentage)","multiply the total time and rate by the given percentage ",2],["new","NewRelic::Agent::Agent","classes/NewRelic/Agent/Agent.html#M000802","()","14105: v8 (tag 2.10.3) (no v7) 10379: v6 (not tagged) 4078:  v5 (tag 2.5.4) 2292:  v4 (tag 2.3.6) 1754:",2],["new","NewRelic::Agent::BeaconConfiguration","classes/NewRelic/Agent/BeaconConfiguration.html#M000797","(connect_data)","",2],["new","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000901","()","",2],["new","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000971","()","",2],["new","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M001051","(id)","",2],["new","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M001070","()","",2],["new","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M001095","()","",2],["new","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M001110","()","",2],["new","NewRelic::Agent::Samplers::MemorySampler::ShellPS","classes/NewRelic/Agent/Samplers/MemorySampler/ShellPS.html#M001120","(command)","",2],["new","NewRelic::Agent::Samplers::ObjectSampler","classes/NewRelic/Agent/Samplers/ObjectSampler.html#M001106","()","",2],["new","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M001127","()","",2],["new","NewRelic::Agent::StatsEngine","classes/NewRelic/Agent/StatsEngine.html#M001163","()","",2],["new","NewRelic::Agent::StatsEngine::MetricStats::SynchronizedHash","classes/NewRelic/Agent/StatsEngine/MetricStats/SynchronizedHash.html#M001135","(*args)","",2],["new","NewRelic::Agent::StatsEngine::ScopeStackElement","classes/NewRelic/Agent/StatsEngine/ScopeStackElement.html#M001159","(name, deduct_call_time)","",2],["new","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M001176","(time=Time.now)","",2],["new","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001189","()","",2],["new","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M001190","()","",2],["new","NewRelic::ChainedCall","classes/NewRelic/ChainedCall.html#M000882","(block1, block2)","",2],["new","NewRelic::Command","classes/NewRelic/Command.html#M001263","(command_line_args)","",2],["new","NewRelic::Command::CommandFailure","classes/NewRelic/Command/CommandFailure.html#M001260","(message, opt_parser=nil)","",2],["new","NewRelic::Command::Deployments","classes/NewRelic/Command/Deployments.html#M001265","(command_line_args)","Initialize the deployment uploader with command line args. Use -h to see options. When command_line_args",2],["new","NewRelic::Command::Install","classes/NewRelic/Command/Install.html#M001271","(command_line_args={})","",2],["new","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M001350","(local_env, config_file_override=nil)","",2],["new","NewRelic::Histogram","classes/NewRelic/Histogram.html#M001379","(first_bucket_max = 0.010, bucket_count = 30, multiplier = 1.3)","Histogram uses apdex T / 10 as its minimum bucket size, and grows from there. 30 data points should be",2],["new","NewRelic::Histogram::Bucket","classes/NewRelic/Histogram/Bucket.html#M001373","(min, max = nil)","",2],["new","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001381","()","",2],["new","NewRelic::MetricData","classes/NewRelic/MetricData.html#M001396","(metric_spec, stats, metric_id)","",2],["new","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001420","(metric_name = '', metric_scope = '')","Need a \"zero-arg\" constructor so it can be instantiated from java (using jruby) for sending responses",2],["new","NewRelic::NoticedError","classes/NewRelic/NoticedError.html#M001436","(path, data, exception, timestamp = Time.now)","",2],["new","NewRelic::Rack::BrowserMonitoring","classes/NewRelic/Rack/BrowserMonitoring.html#M001437","(app, options = {})","",2],["new","NewRelic::Rack::DeveloperMode","classes/NewRelic/Rack/DeveloperMode.html#M001439","(app)","",2],["new","NewRelic::Rack::MetricApp","classes/NewRelic/Rack/MetricApp.html#M001457","(options)","",2],["new","NewRelic::ScopedMethodTraceStats","classes/NewRelic/ScopedMethodTraceStats.html#M001528","(unscoped_stats)","",2],["new","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M001510","()","",2],["new","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M001501","(metric_name, sample)","",2],["new","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001573","(time = Time.now.to_f, sample_id = nil)","",2],["new","NewRelic::TransactionSample::CompositeSegment","classes/NewRelic/TransactionSample/CompositeSegment.html#M001568","(segments)","",2],["new","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001532","(timestamp, metric_name, segment_id)","",2],["new","NewRelic::TransactionSample::SummarySegment","classes/NewRelic/TransactionSample/SummarySegment.html#M001565","(segment)","",2],["new","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M001544","(version_string)","",2],["new_instance","NewRelic::Control::ClassMethods","classes/NewRelic/Control/ClassMethods.html#M001276","()","Create the concrete class for environment specific behavior: ",2],["newrelic_ignore","NewRelic::Agent::Instrumentation::ControllerInstrumentation::ClassMethods","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation/ClassMethods.html#M000940","(specifiers={})","Have NewRelic ignore actions in this controller.  Specify the actions as hash options using :except and",2],["newrelic_ignore_apdex","NewRelic::Agent::Instrumentation::ControllerInstrumentation::ClassMethods","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation/ClassMethods.html#M000941","(specifiers={})","Have NewRelic omit apdex measurements on the given actions.  Typically used for actions that are not",2],["newrelic_method_exists?","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M001088","(method_name)","",2],["newrelic_metric_path","NewRelic::Agent::Instrumentation::Rails3::ActionController","classes/NewRelic/Agent/Instrumentation/Rails3/ActionController.html#M001041","(action_name_override = nil)","determine the path that is used in the metric name for the called controller action ",2],["newrelic_metric_path","Object","classes/Object.html#M001034","(action_name_override = nil)","determine the path that is used in the metric name for the called controller action ",2],["newrelic_metric_path","Object","classes/Object.html#M000965","()","determine the path that is used in the metric name for the called controller action ",2],["newrelic_notice_error","NewRelic::Agent::Instrumentation::Rails3::Errors","classes/NewRelic/Agent/Instrumentation/Rails3/Errors.html#M001045","(exception, custom_params = {})","",2],["newrelic_notice_error","Object","classes/Object.html#M001037","(exception, custom_params = {})","Make a note of an exception associated with the currently executing controller action.  Note that this",2],["newrelic_request_headers","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000951","()","",2],["newrelic_request_headers","NewRelic::Agent::Instrumentation::Rack","classes/NewRelic/Agent/Instrumentation/Rack.html#M001004","()","",2],["newrelic_response_code","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000950","()","Should be implemented in the dispatcher class ",2],["newrelic_root","NewRelic::Control::ClassMethods","classes/NewRelic/Control/ClassMethods.html#M001277","()","The root directory for the plugin or gem ",2],["newrelic_root","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M001351","()","",2],["normalize_params","NewRelic::CollectionHelper","classes/NewRelic/CollectionHelper.html#M001250","(params)","Transform parameter hash into a hash whose values are strictly strings ",2],["normalized_request_and_custom_params","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000918","(options)","",2],["notice_error","NewRelic::Agent","classes/NewRelic/Agent.html#M001249","(exception, options={})","Record the given error in RPM.  It will be passed through the #ignore_error_filter if there is one. *",2],["notice_error","NewRelic::Agent::ErrorCollector","classes/NewRelic/Agent/ErrorCollector.html#M000928","(exception, options={})","Notice the error with the given available options: * <tt>:uri</tt> => The request path, minus any request",2],["notice_error","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000981","(e, options={})","If we have an active metric frame, notice the error and increment the error metric. Options: * <tt>:request</tt>",2],["notice_first_scope_push","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001201","(time)","Creates a new transaction sample builder, unless the transaction sampler is disabled. Takes a time parameter",2],["notice_nosql","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001222","(key, duration)","Adds non-sql metadata to a segment - generally the memcached key duration is seconds, float value. ",2],["notice_pop_scope","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001205","(scope, time = Time.now)","Informs the transaction sample builder about the end of a traced scope ",2],["notice_profile","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001215","(profile)","For developer mode profiling support - delegates to the builder ",2],["notice_push_scope","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001202","(scope, time=Time.now)","This delegates to the builder to create a new open transaction segment for the specified scope, beginning",2],["notice_scope_empty","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001206","(time=Time.now)","This is called when we are done with the transaction.  We've unwound the stack to the top level. It also",2],["notice_sql","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001221","(sql, config, duration)","some statements (particularly INSERTS with large BLOBS may be very large; we should trim them to a maximum",2],["notice_transaction","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001213","(path, uri=nil, params={})","Delegates to the builder to store the path, uri, and parameters if the sampler is active ",2],["notice_transaction_cpu_time","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001216","(cpu_time)","Sets the CPU time used by a transaction, delegates to the builder ",2],["notify_log_file_location","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000846","()","",2],["obfuscate_sql","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001570","(sql)","",2],["obfuscated_sql","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001562","()","",2],["omit_segments_with","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001586","(regex)","return a new transaction sample that treats segments with the given regular expression in their name",2],["original_spec","NewRelic::MetricData","classes/NewRelic/MetricData.html#M001398","()","",2],["over_queue_limit?","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000926","(exception)","",2],["params","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001549","()","",2],["params=","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001589","(params)","",2],["params=","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001560","(p)","",2],["parent_segment=","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001564","(s)","",2],["parse_frontend_headers","NewRelic::Agent::Instrumentation::QueueTime","classes/NewRelic/Agent/Instrumentation/QueueTime.html#M001000","(headers)","",2],["parse_query_with_newrelic","NewRelic::Instrumentation::ActsAsSolrInstrumentation::ParserMethodsInstrumentation","classes/NewRelic/Instrumentation/ActsAsSolrInstrumentation/ParserMethodsInstrumentation.html#M000938","(*args)","",2],["path","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000979","()","Return the path, the part of the metric after the category ",2],["path_string","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001579","()","",2],["path_string","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001537","()","",2],["peek_scope","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M001166","()","",2],["perform_action_with_newrelic_trace","NewRelic::Agent::Instrumentation::ControllerInstrumentation","classes/NewRelic/Agent/Instrumentation/ControllerInstrumentation.html#M000949","(*args, &block)","Yield to the given block with NewRelic tracing.  Used by default instrumentation on controller actions",2],["platform","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M001113","()","",2],["platform","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M001112","()","",2],["poll","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M001052","()","",2],["poll","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M001076","()","",2],["poll","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M001102","()","",2],["poll","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M001115","()","",2],["poll","NewRelic::Agent::Samplers::ObjectSampler","classes/NewRelic/Agent/Samplers/ObjectSampler.html#M001109","()","",2],["pop","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000980","()","Unwind one stack level.  It knows if it's back at the outermost caller and does the appropriate wrapup",2],["pop_flag!","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M001069","(forced)","",2],["pop_scope","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M001165","(expected_scope, duration, time=Time.now.to_f)","",2],["pop_trace_execution_flag","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000825","()","Pop the current trace execution status.  Restore trace execution status to what it was before we pushed",2],["pop_trace_execution_flag","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M001132","(*args)","",2],["post_size_limit","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001293","()","",2],["prepare_to_send","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001587","(options={})","return a new transaction sample that can be sent to the RPM service. this involves potentially one or",2],["proc_status_file","NewRelic::Agent::Samplers::MemorySampler::ProcStatus","classes/NewRelic/Agent/Samplers/MemorySampler/ProcStatus.html#M001124","()","",2],["process","NewRelic::Histogram","classes/NewRelic/Histogram.html#M001380","(response_time)","",2],["process","NewRelic::Histogram::Bucket","classes/NewRelic/Histogram/Bucket.html#M001375","(value)","This has return value like <=> but does something more than simply compare.  If the value falls within",2],["process","NewRelic::Histogram::Shim","classes/NewRelic/Histogram/Shim.html#M001372","(response_time)","",2],["process_action","NewRelic::Agent::Instrumentation::Rails3::ActionController","classes/NewRelic/Agent/Instrumentation/Rails3/ActionController.html#M001044","(*args)","",2],["profiling=","NewRelic::Control::Profiling","classes/NewRelic/Control/Profiling.html#M001357","(val)","Set the flag for capturing profiles in dev mode.  If RubyProf is not loaded a true value is ignored.",2],["profiling?","NewRelic::Control::Profiling","classes/NewRelic/Control/Profiling.html#M001355","()","A flag used in dev mode to indicate if profiling is available ",2],["profiling_available?","NewRelic::Control::Profiling","classes/NewRelic/Control/Profiling.html#M001356","()","",2],["proxy_server","NewRelic::Control::ServerMethods","classes/NewRelic/Control/ServerMethods.html#M001365","()","",2],["push","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000972","(m)","Indicate that we are entering a measured controller action or task. Make sure you unwind every push with",2],["push_flag!","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M001068","(forced)","",2],["push_scope","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M001162","(metric, time = Time.now.to_f, deduct_call_time_from_parent = true)","",2],["push_trace_execution_flag","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000824","(should_trace=false)","Push flag indicating whether we should be tracing in this thread. ",2],["push_trace_execution_flag","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M001131","(*args)","",2],["query_server_for_configuration","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000893","()","",2],["rails_gem_list","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M001324","()","",2],["rails_vendor_root","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M001323","()","",2],["rails_version","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M001322","()","",2],["record_apdex","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000996","(current_metric, action_duration, total_duration, is_error)","",2],["record_apdex","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000985","()","",2],["record_apdex_f","NewRelic::ApdexStats","classes/NewRelic/ApdexStats.html#M001521","()","",2],["record_apdex_s","NewRelic::ApdexStats","classes/NewRelic/ApdexStats.html#M001519","()","",2],["record_apdex_t","NewRelic::ApdexStats","classes/NewRelic/ApdexStats.html#M001520","()","",2],["record_data_point","NewRelic::MethodTraceStats","classes/NewRelic/MethodTraceStats.html#M001523","(value, exclusive_time = value)","record a single data point into the statistical gatherer.  The gatherer will aggregate all data points",2],["record_multiple_data_points","NewRelic::MethodTraceStats","classes/NewRelic/MethodTraceStats.html#M001525","(total_value, count=1)","",2],["record_multiple_data_points","NewRelic::ScopedMethodTraceStats","classes/NewRelic/ScopedMethodTraceStats.html#M001530","(total_value, count=1)","",2],["record_transaction","NewRelic::Agent","classes/NewRelic/Agent.html#M001256","(response_sec, options = {})","Record a web transaction from an external source.  This will process the response time, error, and score",2],["record_transaction","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000804","(duration_seconds, options={})","",2],["recorded_metrics","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000987","()","Return the array of metrics to record for the current metric frame. ",2],["recording_web_transaction?","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000991","()","",2],["recording_web_transaction?","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000992","()","",2],["referer","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000969","()","",2],["referer","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000975","()","For the current web transaction, return the full referer, minus the host string, or nil. ",2],["referer_from_request","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000994","(request)","Make a safe attempt to get the referer from a request object, generally successful when it's a Rack request.",2],["remove_transaction_sampler","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M001161","(l)","",2],["render_time","NewRelic::TransactionAnalysis","classes/NewRelic/TransactionAnalysis.html#M001500","()","",2],["request_params_from_opts","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000917","(options)","",2],["request_with_newrelic_trace","Object","classes/Object.html#M000970","(*args, &block)","",2],["requests_per_minute","NewRelic::Stats","classes/NewRelic/Stats.html#M001495","()","Alias for #calls_per_minute",2],["rescue_action_with_newrelic_trace","Object","classes/Object.html#M001038","(exception)","",2],["reset","NewRelic::Agent::BusyCalculator","classes/NewRelic/Agent/BusyCalculator.html#M000852","()","Reset the state of the information accumulated by all threads, but only reset the recursion counter for",2],["reset","NewRelic::Stats","classes/NewRelic/Stats.html#M001483","()","",2],["reset!","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001226","()","reset samples without rebooting the web server ",2],["reset_stats","NewRelic::Agent","classes/NewRelic/Agent.html#M001237","()","Clear out any unsent metric data. ",2],["reset_stats","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000860","()","Clear out the metric data, errors, and transaction traces.  Reset the histogram data. ",2],["reset_stats","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M001157","()","Reset each of the stats, such as when a new passenger instance starts up. ",2],["resolve_ip_address","NewRelic::Control::ServerMethods","classes/NewRelic/Control/ServerMethods.html#M001368","(host)","Look up the ip address of the host using the pure ruby lookup to prevent blocking.  If that fails, fall",2],["root","NewRelic::Control::Frameworks::Merb","classes/NewRelic/Control/Frameworks/Merb.html#M001304","()","",2],["root","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M001313","()","",2],["root","NewRelic::Control::Frameworks::Rails3","classes/NewRelic/Control/Frameworks/Rails3.html#M001308","()","",2],["root","NewRelic::Control::Frameworks::Ruby","classes/NewRelic/Control/Frameworks/Ruby.html#M001329","()","",2],["route_eval_with_newrelic","NewRelic::Agent::Instrumentation::Sinatra","classes/NewRelic/Agent/Instrumentation/Sinatra.html#M001046","(&block_arg)","",2],["run","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M001193","(period=nil, &block)","Run infinitely, calling the registered tasks at their specified call periods.  The caller is responsible",2],["run","NewRelic::Command","classes/NewRelic/Command.html#M001267","()","",2],["run","NewRelic::Command::Deployments","classes/NewRelic/Command/Deployments.html#M001268","()","Run the Deployment upload in RPM via Active Resource. Will possibly print errors and exit the VM ",2],["run","NewRelic::Command::Install","classes/NewRelic/Command/Install.html#M001272","()","",2],["run","NewRelic::MerbBootLoader","classes/NewRelic/MerbBootLoader.html#M001567","()","",2],["run_task","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M001198","()","",2],["sample","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M001188","()","",2],["sample_id","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M001177","()","",2],["sampler_classes","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M001050","()","",2],["sampler_config","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000836","()","",2],["sampling_rate=","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001200","(val)","Set with an integer value n, this takes one in every n harvested samples. It also resets the harvest",2],["scope_depth","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M001183","()","",2],["scope_depth","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001204","()","Defaults to zero, otherwise delegated to the transaction sample builder ",2],["scope_name","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M001168","()","",2],["scope_name=","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M001167","(transaction)","set the name of the transaction for the current thread, which will be used to define the scope of all",2],["send_data_on_exit","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001295","()","Configuration option of the same name to indicate that we should flush data to the server on exiting.",2],["sense_method","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000920","(object, method)","",2],["server","NewRelic::Control::ServerMethods","classes/NewRelic/Control/ServerMethods.html#M001363","()","",2],["server_from_host","NewRelic::Control::ServerMethods","classes/NewRelic/Control/ServerMethods.html#M001366","(hostname=nil)","",2],["set_collector_host!","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000892","()","",2],["set_deduct_call_time_based_on_metric","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M001084","(options)","",2],["set_if_nil","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M001067","(hash, key)","",2],["set_profile","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M001185","(profile)","",2],["set_record_sql","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000821","(should_record)","",2],["set_record_tt","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000822","(should_record)","",2],["set_sql_obfuscator","NewRelic::Agent","classes/NewRelic/Agent.html#M001240","(type = :replace, &block)","This method sets the block sent to this method as a sql obfuscator.  The block will be called with a",2],["set_sql_obfuscator","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000826","(type, &block)","",2],["set_sql_recording!","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000834","()","",2],["set_transaction_cpu_time","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M001187","(cpu_time)","",2],["set_transaction_info","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M001186","(path, uri, params)","",2],["settings","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001279","()","",2],["setup_log","NewRelic::Control::LoggingMethods","classes/NewRelic/Control/LoggingMethods.html#M001358","()","Control subclasses may override this, but it can be called multiple times. ",2],["should_exit_notice_error?","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000911","(exception)","",2],["should_instrument?","NewRelic::Rack::BrowserMonitoring","classes/NewRelic/Rack/BrowserMonitoring.html#M001441","(status, headers)","",2],["should_keep_retrying?","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000876","(options)","",2],["should_log?","NewRelic::Control::LoggingMethods","classes/NewRelic/Control/LoggingMethods.html#M001354","()","",2],["should_replace_begin_time?","NewRelic::Stats","classes/NewRelic/Stats.html#M001474","(other)","",2],["should_replace_end_time?","NewRelic::Stats","classes/NewRelic/Stats.html#M001473","(other)","",2],["should_retry?","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000879","()","",2],["shutdown","NewRelic::Agent","classes/NewRelic/Agent.html#M001238","()","Shutdown the agent.  Call this before exiting.  Sends any queued data and kills the background thread.",2],["shutdown","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000813","()","Attempt a graceful shutdown of the agent. ",2],["shutdown","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M001130","()","",2],["slowest_sample?","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001211","(old_sample, new_sample)","Checks to see if the old sample exists, or if it's duration is less than the new sample ",2],["snapshot","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001402","()","Take a snapshot of the environment information for this application Returns an associative array ",2],["split","NewRelic::Stats","classes/NewRelic/Stats.html#M001481","(rollup_begin_time, rollup_period)","split into an array of timeslices whose time boundaries start on (begin_time + (n * duration)) and whose",2],["sql_segments","NewRelic::TransactionAnalysis","classes/NewRelic/TransactionAnalysis.html#M001522","(show_non_sql_segments = true)","return an array of sql statements executed by this transaction each element in the array contains [sql,",2],["stack_min_max_from","NewRelic::Stats","classes/NewRelic/Stats.html#M001471","(other)","",2],["standard_deviation","NewRelic::Stats","classes/NewRelic/Stats.html#M001490","()","",2],["start","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000859","()","",2],["start","NewRelic::Agent::ShimAgent","classes/NewRelic/Agent/ShimAgent.html#M001129","(*args;)","",2],["start_agent","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M001338","()","Install the real agent into the Agent module, and issue the start command. ",2],["start_sampler_thread","NewRelic::Agent::StatsEngine::Samplers","classes/NewRelic/Agent/StatsEngine/Samplers.html#M001140","()","",2],["start_time","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001578","()","",2],["start_transaction","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000819","()","",2],["start_transaction","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000977","()","This needs to be called after entering the call to trace the controller action, otherwise the controller",2],["start_transaction","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M001169","(name = nil)","Start a new transaction, unless one is already in progress ",2],["started?","NewRelic::Agent::Agent::InstanceMethods","classes/NewRelic/Agent/Agent/InstanceMethods.html#M000811","()","True if we have initialized and completed 'start' ",2],["stat_engine","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M001062","()","",2],["stats","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M001096","()","",2],["stats","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M001114","()","",2],["stats","NewRelic::Agent::Samplers::ObjectSampler","classes/NewRelic/Agent/Samplers/ObjectSampler.html#M001107","()","",2],["stats","NewRelic::Histogram::Bucket","classes/NewRelic/Histogram/Bucket.html#M001374","()","",2],["stats_hash","NewRelic::Agent::StatsEngine::MetricStats","classes/NewRelic/Agent/StatsEngine/MetricStats.html#M001158","()","",2],["stop","NewRelic::Agent::WorkerLoop","classes/NewRelic/Agent/WorkerLoop.html#M001197","()","",2],["store_random_sample","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001208","(sample)","Only active when random sampling is true - this is very rarely used. Always store the most recent sample",2],["store_sample","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001207","(sample)","Samples can be stored in three places: the random sample variable, when random sampling is active, the",2],["store_sample_for_developer_mode","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001209","(sample)","Samples take up a ton of memory, so we only store a lot of them in developer mode - we truncate to @max_samples",2],["store_slowest_sample","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001210","(sample)","Sets @slowest_sample to the passed in sample if it is slower than the current sample in @slowest_sample",2],["strip_nr_from_backtrace","NewRelic::CollectionHelper","classes/NewRelic/CollectionHelper.html#M001254","(backtrace)","Return an array of strings (backtrace), cleaned up for readability Return nil if there is no backtrace",2],["sub","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001427","(pattern, replacement, apply_to_scope = true)","return a new metric spec if the given regex matches the name or scope. ",2],["sum_attributes","NewRelic::Stats","classes/NewRelic/Stats.html#M001470","(other)","",2],["sum_merge!","NewRelic::Stats","classes/NewRelic/Stats.html#M001469","(other_stats)","merge by adding to average response time - used to compose multiple metrics e.g. dispatcher time + mongrel",2],["summary","NewRelic::Stats","classes/NewRelic/Stats.html#M001497","()","Summary string to facilitate testing ",2],["supported_on_this_platform?","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M001048","()","Override with check.  Called before instantiating. ",2],["supported_on_this_platform?","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M001075","()","",2],["supported_on_this_platform?","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M001100","()","",2],["supported_on_this_platform?","NewRelic::Agent::Samplers::MemorySampler","classes/NewRelic/Agent/Samplers/MemorySampler.html#M001111","()","",2],["supported_on_this_platform?","NewRelic::Agent::Samplers::ObjectSampler","classes/NewRelic/Agent/Samplers/ObjectSampler.html#M001108","()","",2],["sync_startup","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001294","()","Configuration option of the same name to indicate that we should connect to RPM synchronously on startup.",2],["system_util_stats","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M001072","()","",2],["systemtime_stats","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M001074","()","",2],["time_percentage","NewRelic::Stats","classes/NewRelic/Stats.html#M001491","()","returns the time spent in this component as a percentage of the total time window. ",2],["time_str","NewRelic::Stats","classes/NewRelic/Stats.html#M001465","(value_ms)","",2],["timestamp","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001576","()","offset from start of app ",2],["tiny_version","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M001551","()","",2],["to_debug_str","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001539","(depth)","",2],["to_json","NewRelic::MetricData","classes/NewRelic/MetricData.html#M001404","(*a)","Serialize with all attributes, but if the metric id is not nil, then don't send the metric spec ",2],["to_json","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001430","(*a)","",2],["to_json","NewRelic::StatsBase","classes/NewRelic/StatsBase.html#M001512","(*a)","",2],["to_json","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001536","()","",2],["to_s","NewRelic::Agent::Samplers::MemorySampler::JavaHeapSampler","classes/NewRelic/Agent/Samplers/MemorySampler/JavaHeapSampler.html#M001119","()","",2],["to_s","NewRelic::Agent::Samplers::MemorySampler::ProcStatus","classes/NewRelic/Agent/Samplers/MemorySampler/ProcStatus.html#M001125","()","",2],["to_s","NewRelic::Agent::Samplers::MemorySampler::ShellPS","classes/NewRelic/Agent/Samplers/MemorySampler/ShellPS.html#M001122","()","",2],["to_s","NewRelic::Control::InstanceMethods","classes/NewRelic/Control/InstanceMethods.html#M001345","()","",2],["to_s","NewRelic::Histogram::Bucket","classes/NewRelic/Histogram/Bucket.html#M001378","()","",2],["to_s","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001435","()","",2],["to_s","NewRelic::MetricData","classes/NewRelic/MetricData.html#M001405","()","",2],["to_s","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001429","()","",2],["to_s","NewRelic::Stats","classes/NewRelic/Stats.html#M001496","()","",2],["to_s","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001585","()","",2],["to_s","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001535","()","",2],["to_s","NewRelic::VersionNumber","classes/NewRelic/VersionNumber.html#M001553","()","",2],["to_s_compact","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001583","()","",2],["to_s_compact","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001538","()","",2],["to_stdout","NewRelic::Control::Frameworks::Merb","classes/NewRelic/Control/Frameworks/Merb.html#M001305","(msg)","",2],["to_stdout","NewRelic::Control::Frameworks::Rails","classes/NewRelic/Control/Frameworks/Rails.html#M001321","(message)","",2],["to_stdout","NewRelic::Control::Frameworks::Rails3","classes/NewRelic/Control/Frameworks/Rails3.html#M001311","(msg)","",2],["to_stdout","NewRelic::Control::Frameworks::Ruby","classes/NewRelic/Control/Frameworks/Ruby.html#M001331","(msg)","",2],["to_stdout","NewRelic::Control::LoggingMethods","classes/NewRelic/Control/LoggingMethods.html#M001360","(msg)","",2],["total_call_time_per_minute","NewRelic::Stats","classes/NewRelic/Stats.html#M001489","()","",2],["total_time_percentage","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M001509","()","",2],["trace_call","NewRelic::MethodTraceStats","classes/NewRelic/MethodTraceStats.html#M001524","(value, exclusive_time = value)","Alias for #record_data_point",2],["trace_call","NewRelic::ScopedMethodTraceStats","classes/NewRelic/ScopedMethodTraceStats.html#M001529","(call_time, exclusive_time = call_time)","",2],["trace_disabled?","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M001061","(options)","",2],["trace_entry","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M001180","(metric_name, time)","",2],["trace_execution_scoped","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M001080","(metric_names, options={})","Trace a given block with stats and keep track of the caller. See NewRelic::Agent::MethodTracer::ClassMethods#add_method_tracer",2],["trace_execution_scoped_footer","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M001079","(t0, first_name, metric_stats, expected_scope, forced, t1=Time.now.to_f)","",2],["trace_execution_scoped_header","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M001078","(metric, options, t0=Time.now.to_f)","",2],["trace_execution_unscoped","NewRelic::Agent::MethodTracer::InstanceMethods","classes/NewRelic/Agent/MethodTracer/InstanceMethods.html#M001056","(metric_names, options={})","Trace a given block with stats assigned to the given metric_name.  It does not provide scoped measurements,",2],["trace_exit","NewRelic::Agent::TransactionSampleBuilder","classes/NewRelic/Agent/TransactionSampleBuilder.html#M001181","(metric_name, time)","",2],["trace_method_execution_no_scope","NewRelic::Agent::MethodTracer::InstanceMethods","classes/NewRelic/Agent/MethodTracer/InstanceMethods.html#M001058","(metric_names, options={})","Alias for #trace_execution_unscoped",2],["traced?","NewRelic::Agent::MethodTracer::InstanceMethods::TraceExecutionScoped","classes/NewRelic/Agent/MethodTracer/InstanceMethods/TraceExecutionScoped.html#M001060","()","",2],["traced_method_exists?","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M001089","(method_name, metric_name_code)","",2],["transaction_sampler=","NewRelic::Agent::StatsEngine::Transactions","classes/NewRelic/Agent/StatsEngine/Transactions.html#M001160","(sampler)","",2],["tried_to_connect?","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000875","(options)","",2],["truncate","NewRelic::TransactionSample","classes/NewRelic/TransactionSample.html#M001575","(max)","",2],["truncate","NewRelic::TransactionSample::Segment","classes/NewRelic/TransactionSample/Segment.html#M001546","(max)","Walk through the tree and truncate the segments ",2],["truncate!","NewRelic::MetricSpec","classes/NewRelic/MetricSpec.html#M001421","()","",2],["truncate_message","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001218","(message)","Truncates the message to `MAX_DATA_LENGTH` if needed, and appends an ellipsis because it makes the trucation",2],["truncate_samples","NewRelic::Agent::TransactionSampler","classes/NewRelic/Agent/TransactionSampler.html#M001212","()","Smashes the @samples array down to the length of @max_samples by taking the last @max_samples elements",2],["ui_name","NewRelic::TransactionAnalysis::SegmentSummary","classes/NewRelic/TransactionAnalysis/SegmentSummary.html#M001513","()","",2],["unicorn","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001409","()","",2],["unrecognized_keys","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M001081","(expected, given)","",2],["update_apdex","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000997","(stat, duration, failed)","Record an apdex value for the given stat.  when `failed` the apdex should be recorded as a failure regardless",2],["update_boundaries","NewRelic::Stats","classes/NewRelic/Stats.html#M001472","(other)","",2],["update_totals","NewRelic::Stats","classes/NewRelic/Stats.html#M001475","(other)","",2],["uri","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000974","()","For the current web transaction, return the path of the URI minus the host part and query string, or",2],["uri_from_request","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000995","(request)","Make a safe attempt to get the URI, without the host and query string. ",2],["uri_ref_and_root","NewRelic::Agent::ErrorCollector::NoticeError","classes/NewRelic/Agent/ErrorCollector/NoticeError.html#M000914","(options)","",2],["use_harvest_sampler?","NewRelic::Agent::Sampler","classes/NewRelic/Agent/Sampler.html#M001049","()","Override to use the periodic sampler instead of running the sampler on the minute during harvests. ",2],["use_ssl?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001301","()","",2],["use_textmate?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001292","()","True if we should view files in textmate ",2],["user_util_stats","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M001071","()","",2],["usertime_stats","NewRelic::Agent::Samplers::CpuSampler","classes/NewRelic/Agent/Samplers/CpuSampler.html#M001073","()","",2],["using_forking_dispatcher?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000856","()","",2],["using_jruby?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000840","()","",2],["using_rubinius?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000839","()","",2],["using_sinatra?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000841","()","",2],["validate_options","NewRelic::Agent::MethodTracer::ClassMethods::AddMethodTracer","classes/NewRelic/Agent/MethodTracer/ClassMethods/AddMethodTracer.html#M001086","(options)","",2],["validate_seed","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001299","()","",2],["validate_settings","NewRelic::Agent::Agent::InstanceMethods::Connect","classes/NewRelic/Agent/Agent/InstanceMethods/Connect.html#M000886","()","",2],["validate_token","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001300","()","",2],["vendor_root","NewRelic::Control::Frameworks::Rails3","classes/NewRelic/Control/Frameworks/Rails3.html#M001315","()","",2],["verify_certificate?","NewRelic::Control::Configuration","classes/NewRelic/Control/Configuration.html#M001302","()","",2],["version","NewRelic::Control::Frameworks::Rails3","classes/NewRelic/Control/Frameworks/Rails3.html#M001316","()","",2],["weird_ruby?","NewRelic::Agent::Agent::InstanceMethods::Start","classes/NewRelic/Agent/Agent/InstanceMethods/Start.html#M000842","()","we should not set an at_exit block if people are using these as they don't do standard at_exit behavior",2],["with_database_metric_name","NewRelic::Agent","classes/NewRelic/Agent.html#M001253","(model, method, &block)","Yield to a block that is run with a database metric name context.  This means the Database instrumentation",2],["with_database_metric_name","NewRelic::Agent::Instrumentation::MetricFrame","classes/NewRelic/Agent/Instrumentation/MetricFrame.html#M000988","(model, method)","Yield to a block that is run with a database metric name context.  This means the Database instrumentation",2],["worker_name","NewRelic::Agent::Samplers::DelayedJobLockSampler","classes/NewRelic/Agent/Samplers/DelayedJobLockSampler.html#M001098","()","",2],["working_jruby?","NewRelic::LocalEnvironment","classes/NewRelic/LocalEnvironment.html#M001406","()","",2],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Copyright (c) 2008-2010 New Relic, Inc.  All rights reserved.  Certain inventions disclosed in this file",3],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= New Relic RPM    New Relic RPM is a Ruby performance management system, developed by New Relic, Inc",3],["conditional_vendored_dependency_detection.rb","files/lib/conditional_vendored_dependency_detection_rb.html","files/lib/conditional_vendored_dependency_detection_rb.html","","",3],["conditional_vendored_metric_parser.rb","files/lib/conditional_vendored_metric_parser_rb.html","files/lib/conditional_vendored_metric_parser_rb.html","","",3],["agent.rb","files/lib/new_relic/agent_rb.html","files/lib/new_relic/agent_rb.html","","",3],["agent.rb","files/lib/new_relic/agent/agent_rb.html","files/lib/new_relic/agent/agent_rb.html","","",3],["beacon_configuration.rb","files/lib/new_relic/agent/beacon_configuration_rb.html","files/lib/new_relic/agent/beacon_configuration_rb.html","","",3],["browser_monitoring.rb","files/lib/new_relic/agent/browser_monitoring_rb.html","files/lib/new_relic/agent/browser_monitoring_rb.html","","",3],["busy_calculator.rb","files/lib/new_relic/agent/busy_calculator_rb.html","files/lib/new_relic/agent/busy_calculator_rb.html","","",3],["chained_call.rb","files/lib/new_relic/agent/chained_call_rb.html","files/lib/new_relic/agent/chained_call_rb.html","","This is used to allow obfuscators to be chained. ",3],["error_collector.rb","files/lib/new_relic/agent/error_collector_rb.html","files/lib/new_relic/agent/error_collector_rb.html","","",3],["active_merchant.rb","files/lib/new_relic/agent/instrumentation/active_merchant_rb.html","files/lib/new_relic/agent/instrumentation/active_merchant_rb.html","","",3],["acts_as_solr.rb","files/lib/new_relic/agent/instrumentation/acts_as_solr_rb.html","files/lib/new_relic/agent/instrumentation/acts_as_solr_rb.html","","",3],["authlogic.rb","files/lib/new_relic/agent/instrumentation/authlogic_rb.html","files/lib/new_relic/agent/instrumentation/authlogic_rb.html","","",3],["controller_instrumentation.rb","files/lib/new_relic/agent/instrumentation/controller_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/controller_instrumentation_rb.html","","",3],["data_mapper.rb","files/lib/new_relic/agent/instrumentation/data_mapper_rb.html","files/lib/new_relic/agent/instrumentation/data_mapper_rb.html","","NewRelic instrumentation for DataMapper Instrumenting DM has different key challenges versus AR: 1. The",3],["delayed_job_instrumentation.rb","files/lib/new_relic/agent/instrumentation/delayed_job_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/delayed_job_instrumentation_rb.html","","",3],["memcache.rb","files/lib/new_relic/agent/instrumentation/memcache_rb.html","files/lib/new_relic/agent/instrumentation/memcache_rb.html","","NOTE there are multiple implementations of the MemCache client in Ruby, each with slightly different",3],["controller.rb","files/lib/new_relic/agent/instrumentation/merb/controller_rb.html","files/lib/new_relic/agent/instrumentation/merb/controller_rb.html","","",3],["errors.rb","files/lib/new_relic/agent/instrumentation/merb/errors_rb.html","files/lib/new_relic/agent/instrumentation/merb/errors_rb.html","","",3],["metric_frame.rb","files/lib/new_relic/agent/instrumentation/metric_frame_rb.html","files/lib/new_relic/agent/instrumentation/metric_frame_rb.html","","A struct holding the information required to measure a controller action.  This is put on the thread",3],["net.rb","files/lib/new_relic/agent/instrumentation/net_rb.html","files/lib/new_relic/agent/instrumentation/net_rb.html","","",3],["passenger_instrumentation.rb","files/lib/new_relic/agent/instrumentation/passenger_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/passenger_instrumentation_rb.html","","",3],["queue_time.rb","files/lib/new_relic/agent/instrumentation/queue_time_rb.html","files/lib/new_relic/agent/instrumentation/queue_time_rb.html","","",3],["rack.rb","files/lib/new_relic/agent/instrumentation/rack_rb.html","files/lib/new_relic/agent/instrumentation/rack_rb.html","","",3],["action_controller.rb","files/lib/new_relic/agent/instrumentation/rails/action_controller_rb.html","files/lib/new_relic/agent/instrumentation/rails/action_controller_rb.html","","",3],["action_web_service.rb","files/lib/new_relic/agent/instrumentation/rails/action_web_service_rb.html","files/lib/new_relic/agent/instrumentation/rails/action_web_service_rb.html","","",3],["active_record_instrumentation.rb","files/lib/new_relic/agent/instrumentation/rails/active_record_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/rails/active_record_instrumentation_rb.html","","",3],["errors.rb","files/lib/new_relic/agent/instrumentation/rails/errors_rb.html","files/lib/new_relic/agent/instrumentation/rails/errors_rb.html","","",3],["action_controller.rb","files/lib/new_relic/agent/instrumentation/rails3/action_controller_rb.html","files/lib/new_relic/agent/instrumentation/rails3/action_controller_rb.html","","",3],["active_record_instrumentation.rb","files/lib/new_relic/agent/instrumentation/rails3/active_record_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/rails3/active_record_instrumentation_rb.html","","",3],["errors.rb","files/lib/new_relic/agent/instrumentation/rails3/errors_rb.html","files/lib/new_relic/agent/instrumentation/rails3/errors_rb.html","","",3],["sinatra.rb","files/lib/new_relic/agent/instrumentation/sinatra_rb.html","files/lib/new_relic/agent/instrumentation/sinatra_rb.html","","",3],["sunspot.rb","files/lib/new_relic/agent/instrumentation/sunspot_rb.html","files/lib/new_relic/agent/instrumentation/sunspot_rb.html","","",3],["unicorn_instrumentation.rb","files/lib/new_relic/agent/instrumentation/unicorn_instrumentation_rb.html","files/lib/new_relic/agent/instrumentation/unicorn_instrumentation_rb.html","","",3],["method_tracer.rb","files/lib/new_relic/agent/method_tracer_rb.html","files/lib/new_relic/agent/method_tracer_rb.html","","",3],["sampler.rb","files/lib/new_relic/agent/sampler_rb.html","files/lib/new_relic/agent/sampler_rb.html","","A Sampler is used to capture meaningful metrics in a background thread periodically.  They will either",3],["cpu_sampler.rb","files/lib/new_relic/agent/samplers/cpu_sampler_rb.html","files/lib/new_relic/agent/samplers/cpu_sampler_rb.html","","",3],["delayed_job_lock_sampler.rb","files/lib/new_relic/agent/samplers/delayed_job_lock_sampler_rb.html","files/lib/new_relic/agent/samplers/delayed_job_lock_sampler_rb.html","","",3],["memory_sampler.rb","files/lib/new_relic/agent/samplers/memory_sampler_rb.html","files/lib/new_relic/agent/samplers/memory_sampler_rb.html","","",3],["object_sampler.rb","files/lib/new_relic/agent/samplers/object_sampler_rb.html","files/lib/new_relic/agent/samplers/object_sampler_rb.html","","",3],["shim_agent.rb","files/lib/new_relic/agent/shim_agent_rb.html","files/lib/new_relic/agent/shim_agent_rb.html","","This agent is loaded by the plug when the plug-in is disabled It recreates just enough of the API to",3],["stats_engine.rb","files/lib/new_relic/agent/stats_engine_rb.html","files/lib/new_relic/agent/stats_engine_rb.html","","",3],["metric_stats.rb","files/lib/new_relic/agent/stats_engine/metric_stats_rb.html","files/lib/new_relic/agent/stats_engine/metric_stats_rb.html","","",3],["samplers.rb","files/lib/new_relic/agent/stats_engine/samplers_rb.html","files/lib/new_relic/agent/stats_engine/samplers_rb.html","","",3],["transactions.rb","files/lib/new_relic/agent/stats_engine/transactions_rb.html","files/lib/new_relic/agent/stats_engine/transactions_rb.html","","",3],["transaction_sample_builder.rb","files/lib/new_relic/agent/transaction_sample_builder_rb.html","files/lib/new_relic/agent/transaction_sample_builder_rb.html","","",3],["transaction_sampler.rb","files/lib/new_relic/agent/transaction_sampler_rb.html","files/lib/new_relic/agent/transaction_sampler_rb.html","","",3],["worker_loop.rb","files/lib/new_relic/agent/worker_loop_rb.html","files/lib/new_relic/agent/worker_loop_rb.html","","",3],["collection_helper.rb","files/lib/new_relic/collection_helper_rb.html","files/lib/new_relic/collection_helper_rb.html","","",3],["command.rb","files/lib/new_relic/command_rb.html","files/lib/new_relic/command_rb.html","","",3],["deployments.rb","files/lib/new_relic/commands/deployments_rb.html","files/lib/new_relic/commands/deployments_rb.html","","This is a class for executing commands related to deployment events.  It runs without loading the rails",3],["install.rb","files/lib/new_relic/commands/install_rb.html","files/lib/new_relic/commands/install_rb.html","","",3],["control.rb","files/lib/new_relic/control_rb.html","files/lib/new_relic/control_rb.html","","",3],["class_methods.rb","files/lib/new_relic/control/class_methods_rb.html","files/lib/new_relic/control/class_methods_rb.html","","",3],["configuration.rb","files/lib/new_relic/control/configuration_rb.html","files/lib/new_relic/control/configuration_rb.html","","",3],["external.rb","files/lib/new_relic/control/frameworks/external_rb.html","files/lib/new_relic/control/frameworks/external_rb.html","","This is the control used when starting up in the context of The New Relic Infrastructure Agent.  We want",3],["merb.rb","files/lib/new_relic/control/frameworks/merb_rb.html","files/lib/new_relic/control/frameworks/merb_rb.html","","",3],["rails.rb","files/lib/new_relic/control/frameworks/rails_rb.html","files/lib/new_relic/control/frameworks/rails_rb.html","","Control subclass instantiated when Rails is detected.  Contains Rails specific configuration, instrumentation,",3],["rails3.rb","files/lib/new_relic/control/frameworks/rails3_rb.html","files/lib/new_relic/control/frameworks/rails3_rb.html","","Control subclass instantiated when Rails is detected.  Contains Rails specific configuration, instrumentation,",3],["ruby.rb","files/lib/new_relic/control/frameworks/ruby_rb.html","files/lib/new_relic/control/frameworks/ruby_rb.html","","A control used when no framework is detected. Looks for a newrelic.yml file in several locations including",3],["sinatra.rb","files/lib/new_relic/control/frameworks/sinatra_rb.html","files/lib/new_relic/control/frameworks/sinatra_rb.html","","",3],["instance_methods.rb","files/lib/new_relic/control/instance_methods_rb.html","files/lib/new_relic/control/instance_methods_rb.html","","",3],["instrumentation.rb","files/lib/new_relic/control/instrumentation_rb.html","files/lib/new_relic/control/instrumentation_rb.html","","",3],["logging_methods.rb","files/lib/new_relic/control/logging_methods_rb.html","files/lib/new_relic/control/logging_methods_rb.html","","",3],["profiling.rb","files/lib/new_relic/control/profiling_rb.html","files/lib/new_relic/control/profiling_rb.html","","",3],["server_methods.rb","files/lib/new_relic/control/server_methods_rb.html","files/lib/new_relic/control/server_methods_rb.html","","",3],["delayed_job_injection.rb","files/lib/new_relic/delayed_job_injection_rb.html","files/lib/new_relic/delayed_job_injection_rb.html","","",3],["histogram.rb","files/lib/new_relic/histogram_rb.html","files/lib/new_relic/histogram_rb.html","","Histogram is used for organizing response times into an 'Exponential Histogram'.  Feature based in part",3],["local_environment.rb","files/lib/new_relic/local_environment_rb.html","files/lib/new_relic/local_environment_rb.html","","",3],["merbtasks.rb","files/lib/new_relic/merbtasks_rb.html","files/lib/new_relic/merbtasks_rb.html","","",3],["metric_data.rb","files/lib/new_relic/metric_data_rb.html","files/lib/new_relic/metric_data_rb.html","","",3],["metric_spec.rb","files/lib/new_relic/metric_spec_rb.html","files/lib/new_relic/metric_spec_rb.html","","this struct uniquely defines a metric, optionally inside the call scope of another metric ",3],["metrics.rb","files/lib/new_relic/metrics_rb.html","files/lib/new_relic/metrics_rb.html","","",3],["noticed_error.rb","files/lib/new_relic/noticed_error_rb.html","files/lib/new_relic/noticed_error_rb.html","","This class encapsulates an error that was noticed by RPM in a managed app. ",3],["browser_monitoring.rb","files/lib/new_relic/rack/browser_monitoring_rb.html","files/lib/new_relic/rack/browser_monitoring_rb.html","","",3],["developer_mode.rb","files/lib/new_relic/rack/developer_mode_rb.html","files/lib/new_relic/rack/developer_mode_rb.html","","",3],["metric_app.rb","files/lib/new_relic/rack/metric_app_rb.html","files/lib/new_relic/rack/metric_app_rb.html","","",3],["mongrel_rpm.ru","files/lib/new_relic/rack/mongrel_rpm_ru.html","files/lib/new_relic/rack/mongrel_rpm_ru.html","","# This is so that we don't detect a dispatcher like mongrel and think we are # monitoring it. ENV['NEWRELIC_DISPATCHER']",3],["newrelic.yml","files/lib/new_relic/rack/newrelic_yml.html","files/lib/new_relic/rack/newrelic_yml.html","","# # This file configures the Rack NewRelic Metric Application.  Place a copy of this file # in the directory",3],["rack_app.rb","files/lib/new_relic/rack_app_rb.html","files/lib/new_relic/rack_app_rb.html","","",3],["recipes.rb","files/lib/new_relic/recipes_rb.html","files/lib/new_relic/recipes_rb.html","","When installed as a plugin this is loaded automatically. When installed as a gem, you need to add require",3],["stats.rb","files/lib/new_relic/stats_rb.html","files/lib/new_relic/stats_rb.html","","",3],["timer_lib.rb","files/lib/new_relic/timer_lib_rb.html","files/lib/new_relic/timer_lib_rb.html","","Copyright:  (C) 2008 David Vollbracht & Philippe Hanrigou ",3],["transaction_analysis.rb","files/lib/new_relic/transaction_analysis_rb.html","files/lib/new_relic/transaction_analysis_rb.html","","Add these methods to TransactionSample that enable performance analysis in the user interface. ",3],["transaction_sample.rb","files/lib/new_relic/transaction_sample_rb.html","files/lib/new_relic/transaction_sample_rb.html","","",3],["url_rule.rb","files/lib/new_relic/url_rule_rb.html","files/lib/new_relic/url_rule_rb.html","","Represents url mapping rules stored on the server.  These rules should be applied to URLs which are not",3],["version.rb","files/lib/new_relic/version_rb.html","files/lib/new_relic/version_rb.html","","",3],["newrelic_rpm.rb","files/lib/newrelic_rpm_rb.html","files/lib/newrelic_rpm_rb.html","","== New Relic Initialization When installed as a gem, you can activate the New Relic agent one of the",3],["all.rb","files/lib/tasks/all_rb.html","files/lib/tasks/all_rb.html","","This is required to load in task definitions from merb ",3],["install.rake","files/lib/tasks/install_rake.html","files/lib/tasks/install_rake.html","","# run unit tests for the NewRelic Agent namespace :newrelic do   desc \"install a default config/newrelic.yml",3],["tests.rake","files/lib/tasks/tests_rake.html","files/lib/tasks/tests_rake.html","","# run unit tests for the NewRelic Agent begin   require 'rake/test_task' rescue LoadError => e end  if",3]]}}